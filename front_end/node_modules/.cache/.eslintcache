[{"F:\\Web\\Cờ Tướng\\front_end\\src\\index.jsx":"1","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\piece.js":"2","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\instantiatePiece.js":"3","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\advisor.js":"4","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\general.js":"5","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\cannon.js":"6","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\elephant.js":"7","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\chariot.js":"8","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\horse.js":"9","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\soldier.js":"10","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\chariotRules.js":"11","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\horseRules.js":"12","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\advisorRules.js":"13","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\generalRules.js":"14","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\elephantRules.js":"15","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\cannonRules.js":"16","F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\soldierRules.js":"17","F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\rootReducer.js":"18","F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\boardReducer.js":"19","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Login\\Login.jsx":"20","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Main.jsx":"21","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\EntryComponent\\EntryComponent.jsx":"22","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\NavBar\\NavBar.jsx":"23","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Signup\\Signup.jsx":"24","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\App\\App.jsx":"25","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Game.jsx":"26","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\Board.jsx":"27","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Timer\\Timer.jsx":"28","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\initializeBoard.js":"29","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\getSVGLocation.js":"30","F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\appReducer.js":"31","F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\gameReducer.js":"32","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\Piece\\Piece.jsx":"33","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameController\\GameController.jsx":"34","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GamePlayArea\\GamePlayArea.jsx":"35","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\GameBar.jsx":"36","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\ChatSection\\ChatSection.jsx":"37","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GamePlayArea\\GameResult\\GameResult.jsx":"38","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\ChatSection\\DrawOffer\\DrawOffer.jsx":"39","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\ChatSection\\renderMessages.js":"40","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GamePlayArea\\Pause\\Pause.jsx":"41","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\App\\context.js":"42","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\App\\callAPI.js":"43","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\VerifyEmail\\VerifyEmail.jsx":"44","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\VerifyEmailNote\\VerifyEmailNote.jsx":"45"},{"size":458,"mtime":1615126143529,"results":"46","hashOfConfig":"47"},{"size":6885,"mtime":1615550249264,"results":"48","hashOfConfig":"47"},{"size":1011,"mtime":1614062655316,"results":"49","hashOfConfig":"47"},{"size":843,"mtime":1615369926028,"results":"50","hashOfConfig":"47"},{"size":1188,"mtime":1615550251079,"results":"51","hashOfConfig":"47"},{"size":1725,"mtime":1615550250211,"results":"52","hashOfConfig":"47"},{"size":804,"mtime":1615369931823,"results":"53","hashOfConfig":"47"},{"size":292,"mtime":1614063330081,"results":"54","hashOfConfig":"47"},{"size":1980,"mtime":1615550251907,"results":"55","hashOfConfig":"47"},{"size":942,"mtime":1615465196337,"results":"56","hashOfConfig":"47"},{"size":451,"mtime":1614662801179,"results":"57","hashOfConfig":"47"},{"size":152,"mtime":1614662802067,"results":"58","hashOfConfig":"47"},{"size":108,"mtime":1613373533127,"results":"59","hashOfConfig":"47"},{"size":106,"mtime":1613373658854,"results":"60","hashOfConfig":"47"},{"size":110,"mtime":1615429349011,"results":"61","hashOfConfig":"47"},{"size":449,"mtime":1614662799537,"results":"62","hashOfConfig":"47"},{"size":77,"mtime":1613458402026,"results":"63","hashOfConfig":"47"},{"size":335,"mtime":1614590459472,"results":"64","hashOfConfig":"47"},{"size":1962,"mtime":1615046695594,"results":"65","hashOfConfig":"47"},{"size":7120,"mtime":1616241325156,"results":"66","hashOfConfig":"47"},{"size":2210,"mtime":1616237078822,"results":"67","hashOfConfig":"47"},{"size":823,"mtime":1614406500780,"results":"68","hashOfConfig":"47"},{"size":2959,"mtime":1616246754024,"results":"69","hashOfConfig":"47"},{"size":10564,"mtime":1616241396303,"results":"70","hashOfConfig":"47"},{"size":1376,"mtime":1616056280347,"results":"71","hashOfConfig":"47"},{"size":1937,"mtime":1616163325694,"results":"72","hashOfConfig":"47"},{"size":8949,"mtime":1616228605135,"results":"73","hashOfConfig":"47"},{"size":1432,"mtime":1615547948496,"results":"74","hashOfConfig":"47"},{"size":1998,"mtime":1614492200749,"results":"75","hashOfConfig":"47"},{"size":283,"mtime":1615462144124,"results":"76","hashOfConfig":"47"},{"size":568,"mtime":1616171790644,"results":"77","hashOfConfig":"47"},{"size":2335,"mtime":1616223009976,"results":"78","hashOfConfig":"47"},{"size":740,"mtime":1614914167701,"results":"79","hashOfConfig":"47"},{"size":4524,"mtime":1616225594510,"results":"80","hashOfConfig":"47"},{"size":2927,"mtime":1616227443460,"results":"81","hashOfConfig":"47"},{"size":4460,"mtime":1616241934637,"results":"82","hashOfConfig":"47"},{"size":3103,"mtime":1616216676713,"results":"83","hashOfConfig":"47"},{"size":2291,"mtime":1616216092846,"results":"84","hashOfConfig":"47"},{"size":2728,"mtime":1616217949886,"results":"85","hashOfConfig":"47"},{"size":604,"mtime":1615008831734,"results":"86","hashOfConfig":"47"},{"size":4348,"mtime":1616227816750,"results":"87","hashOfConfig":"47"},{"size":1709,"mtime":1616238812547,"results":"88","hashOfConfig":"47"},{"size":611,"mtime":1616235690300,"results":"89","hashOfConfig":"47"},{"size":4474,"mtime":1615991633557,"results":"90","hashOfConfig":"47"},{"size":688,"mtime":1615989775833,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"fbx7jn",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"F:\\Web\\Cờ Tướng\\front_end\\src\\index.jsx",[],["194","195"],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\piece.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\instantiatePiece.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\advisor.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\general.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\cannon.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\elephant.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\chariot.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\horse.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\soldier.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\chariotRules.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\horseRules.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\advisorRules.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\generalRules.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\elephantRules.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\cannonRules.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\pieces\\move_rules\\soldierRules.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\rootReducer.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\boardReducer.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Login\\Login.jsx",["196","197"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { AuthenticateUserContext } from \"../App/context.js\";\r\nimport callAPI from \"../App/callAPI.js\";\r\nimport {\r\n  Container,\r\n  Form,\r\n  InputGroup,\r\n  Button,\r\n  Spinner,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport \"./Login.scss\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const authenticateUser = useContext(AuthenticateUserContext);\r\n  const [successfullyLogin, setSuccessfullyLogin] = useState(false);\r\n  const [checkingSession, setCheckingSession] = useState(false);\r\n  const [invalidUsernameMess, setInvalidUsernameMess] = useState(\"\");\r\n  const [invalidPasswordMess, setInvalidPasswordMess] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [waitForResponse, setWaitForResponse] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [waitForServer, setWaitForServer] = useState(false);\r\n  const isAuthenticated = useSelector(\r\n    (state) => state.appState.isAuthenticated\r\n  );\r\n\r\n  const handleUsernameChange = (event) => {\r\n    const value = event.target.value;\r\n    setInvalidUsernameMess(\"\");\r\n    setUsername(value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    const value = event.target.value;\r\n    if (value.length < 6) {\r\n      setInvalidPasswordMess(\"Password must be atlest 6 characters\");\r\n    } else setInvalidPasswordMess(\"\");\r\n    setPassword(value);\r\n  };\r\n\r\n  const handleMissingField = () => {\r\n    let count = 0;\r\n    if (!username) {\r\n      count += 1;\r\n      setInvalidUsernameMess(\"Please fill out this field\");\r\n    }\r\n    if (!password) {\r\n      count += 1;\r\n      setInvalidPasswordMess(\"Please fill out this field\");\r\n    }\r\n    return count !== 0;\r\n  };\r\n\r\n  const handleError = (ok, message) => {\r\n    if (!ok) {\r\n      setError(message);\r\n    } else if (/Password/.test(message)) {\r\n      setInvalidPasswordMess(message);\r\n    } else if (/Username/.test(message)) {\r\n      setInvalidUsernameMess(message);\r\n    } else setError(message);\r\n  };\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n    const missingField = handleMissingField();\r\n    if (!missingField && !invalidPasswordMess && !invalidUsernameMess) {\r\n      setError(null);\r\n      setWaitForResponse(true);\r\n      const { message, user, ok, sessionID } = await callAPI(\"POST\", \"/login\", {\r\n        username: username,\r\n        password: password,\r\n      });\r\n      setWaitForResponse(false);\r\n      if (user) {\r\n        authenticateUser(dispatch, user, sessionID);\r\n      } else handleError(ok, message);\r\n    }\r\n  };\r\n\r\n  const handleLoginAsGuest = async () => {\r\n    setWaitForServer(true);\r\n    const { user } = await callAPI(\"GET\", \"/login-as-guest\", null);\r\n    setWaitForServer(false);\r\n    setSuccessfullyLogin(true);\r\n    authenticateUser(dispatch, user, null);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    setCheckingSession(true);\r\n    const { message, user, ok, sessionID } = await callAPI(\"GET\", \"/\", null);\r\n    setCheckingSession(false);\r\n    if (user) {\r\n      authenticateUser(dispatch, user, sessionID);\r\n    } else handleError(ok, message);\r\n  }, [isAuthenticated]);\r\n\r\n  if (isAuthenticated) {\r\n    if (isAuthenticated !== \"guest\") return <Redirect to=\"/\" />;\r\n    else if (successfullyLogin) return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <h1>Xiangqi</h1>\r\n      {checkingSession ? (\r\n        <Spinner\r\n          animation=\"border\"\r\n          variant=\"secondary\"\r\n          style={{\r\n            width: `${window.innerWidth / 5}px`,\r\n            height: `${window.innerWidth / 5}px`,\r\n            borderWidth: \"9px\",\r\n          }}\r\n        />\r\n      ) : (\r\n        <Row className=\"justify-content-center\">\r\n          <Col\r\n            md={{ span: 4 }}\r\n            sm={{ span: 6 }}\r\n            xs={{ span: 10 }}\r\n            className=\"login-component d-flex flex-column  align-items-center\"\r\n          >\r\n            {error ? <p className=\"error-message\">{error}</p> : null}\r\n            <Form onSubmit={handleLogin} method=\"POST\">\r\n              <Form.Group controlId=\"username-or-email\">\r\n                <InputGroup hasValidation>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    isInvalid={invalidUsernameMess !== \"\"}\r\n                    placeholder=\"Username or Email\"\r\n                    onChange={handleUsernameChange}\r\n                    value={username}\r\n                  />\r\n                  <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                    style={{ textAlign: \"left\" }}\r\n                  >\r\n                    {invalidUsernameMess}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"password\">\r\n                <InputGroup hasValidation>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    isInvalid={invalidPasswordMess !== \"\"}\r\n                    placeholder=\"Password\"\r\n                    onChange={handlePasswordChange}\r\n                    value={password}\r\n                  />\r\n                  <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                    style={{ textAlign: \"left\" }}\r\n                  >\r\n                    {invalidPasswordMess}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              <Button type=\"submit\">\r\n                {waitForResponse ? (\r\n                  <Spinner animation=\"border\" variant=\"dark\" />\r\n                ) : (\r\n                  \"Log In\"\r\n                )}\r\n              </Button>\r\n              <Button className=\"log-in-as-guest\" onClick={handleLoginAsGuest}>\r\n                {waitForServer ? (\r\n                  <Spinner animation=\"border\" variant=\"dark\" />\r\n                ) : (\r\n                  \"Log In As Guest\"\r\n                )}\r\n              </Button>\r\n            </Form>\r\n            <p className=\"seperator\">\r\n              <span></span>\r\n              <span className=\"seperator-text\">or connect with</span>\r\n              <span></span>\r\n            </p>\r\n            <div className=\"social-login\">\r\n              <a className=\"google\" href=\"http://localhost:8080/auth/google\">\r\n                <i className=\"fab fa-google\"></i> Google\r\n              </a>\r\n              <a\r\n                className=\"facebook\"\r\n                href=\"http://localhost:8080/auth/facebook\"\r\n              >\r\n                <i className=\"fab fa-facebook \"></i> Facebook\r\n              </a>\r\n              <a className=\"github\" href=\"http://localhost:8080/auth/github\">\r\n                <i className=\"fab fa-github \"></i> Github\r\n              </a>\r\n            </div>\r\n            <div className=\"sign-up-area\">\r\n              <Link to=\"/signup\">Sign Up</Link>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Main.jsx",["198","199","200"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport EntryComponent from \"./EntryComponent/EntryComponent.jsx\";\r\nimport NavBar from \"./NavBar/NavBar.jsx\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"./Main.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Game from \"./Game/Game.jsx\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport callAPI from \"../App/callAPI.js\";\r\nimport { AuthenticateUserContext } from \"../App/context\";\r\nimport VerifyEmailNote from \"./VerifyEmailNote/VerifyEmailNote.jsx\";\r\n\r\nconst Main = () => {\r\n  const dispatch = useDispatch();\r\n  const [waitForResponse, setWaitForResponse] = useState(false);\r\n  const authenticateUser = useContext(AuthenticateUserContext);\r\n  const playerInfo = useSelector((state) => state.appState.playerInfo);\r\n  const isAuthenticated = useSelector(\r\n    (state) => state.appState.isAuthenticated\r\n  );\r\n\r\n  useEffect(async () => {\r\n    if (window.location.hash == \"#_=_\") {\r\n      if (window.history.replaceState) {\r\n        var cleanHref = window.location.href.split(\"#\")[0];\r\n        window.history.replaceState(null, null, cleanHref);\r\n      } else {\r\n        window.location.hash = \"\";\r\n      }\r\n    }\r\n    if (!isAuthenticated) {\r\n      setWaitForResponse(true);\r\n      const { user, sessionID } = await callAPI(\"GET\", \"/\", null);\r\n      setWaitForResponse(false);\r\n      if (user) {\r\n        authenticateUser(dispatch, user, sessionID);\r\n      }\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  return (\r\n    <Container fluid className={waitForResponse ? \"loading\" : \"\"}>\r\n      {waitForResponse ? (\r\n        <Spinner\r\n          animation=\"border\"\r\n          variant=\"secondary\"\r\n          style={{\r\n            width: `${window.innerWidth / 5}px`,\r\n            height: `${window.innerWidth / 5}px`,\r\n            borderWidth: \"9px\",\r\n          }}\r\n        />\r\n      ) : (\r\n        <div>\r\n          <NavBar setWaitForResponse={setWaitForResponse} />\r\n          {isAuthenticated ? <Game /> : <EntryComponent />}\r\n        </div>\r\n      )}\r\n      {playerInfo && !playerInfo.guest && !playerInfo.email.verified ? (\r\n        <VerifyEmailNote />\r\n      ) : null}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\EntryComponent\\EntryComponent.jsx",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\NavBar\\NavBar.jsx",["201","202"],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Signup\\Signup.jsx",["203","204","205","206"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Container,\r\n  Form,\r\n  InputGroup,\r\n  Button,\r\n  Spinner,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AuthenticateUserContext } from \"../App/context.js\";\r\nimport callAPI from \"../App/callAPI.js\";\r\n\r\nconst Signup = () => {\r\n  const dispatch = useDispatch();\r\n  const isAuthenticated = useSelector(\r\n    (state) => state.appState.isAuthenticated\r\n  );\r\n  const authenticateUser = useContext(AuthenticateUserContext);\r\n  const [invalidUsernameMess, setInvalidUsernameMess] = useState(\"\");\r\n  const [invalidEmailMess, setInvalidEmailMess] = useState(\"\");\r\n  const [invalidPasswordMess, setInvalidPasswordMess] = useState(\"\");\r\n  const [waitForResponse, setWaitForResponse] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [firstname, setFirstname] = useState(\"\");\r\n  const [invalidFirstname, setInvalidFirstname] = useState(\"\");\r\n  const [invalidLastname, setInvalidLastname] = useState(\"\");\r\n  const [checkingSession, setCheckingSession] = useState(false);\r\n  const [lastname, setLastname] = useState(\"\");\r\n  const [successfullyLogin, setSuccessfullyLogin] = useState(false);\r\n\r\n  const handleUsernameChange = (event) => {\r\n    const value = event.target.value;\r\n    if (/[^_a-z0-9]/i.test(value) || value.length < 3 || value.length > 20) {\r\n      setInvalidUsernameMess(\r\n        \"Username must be between 3-20 characters long and use only Latin letters and numbers\"\r\n      );\r\n    } else setInvalidUsernameMess(\"\");\r\n    setUsername(value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    const value = event.target.value;\r\n    if (value.length < 6) {\r\n      setInvalidPasswordMess(\"Password must be atlest 6 characters\");\r\n    } else setInvalidPasswordMess(\"\");\r\n    setPassword(value);\r\n  };\r\n\r\n  const handleEmailChange = (event) => {\r\n    const value = event.target.value;\r\n    if (!/^[a-zA-Z0-9_.-]+@[a-zA-Z0-9_.\\-]+$/.test(value) || /\\.\\./.test(value))\r\n      setInvalidEmailMess(\"Invalid email address\");\r\n    else setInvalidEmailMess(\"\");\r\n    setEmail(value);\r\n  };\r\n\r\n  const handleFirstnameChange = (event) => {\r\n    const value = event.target.value;\r\n    if (/[^ _a-z]/i.test(value))\r\n      setInvalidFirstname(\"Firstname can only contain letter, space and _\");\r\n    else setInvalidFirstname(\"\");\r\n    setFirstname(value);\r\n  };\r\n  const handleLastnameChange = (event) => {\r\n    const value = event.target.value;\r\n    if (/[^ _a-z]/i.test(value) || /[^a-z]/i.test(value[0])) {\r\n      if (/[^a-z]/i.test(value[0]))\r\n        setInvalidLastname(\"First letter must be letter\");\r\n      else setInvalidLastname(\"Lastname can only contain letter, space and _\");\r\n    } else setInvalidLastname(\"\");\r\n    setLastname(value);\r\n  };\r\n\r\n  const handleMissingField = () => {\r\n    let count = 0;\r\n    if (!username) {\r\n      count += 1;\r\n      setInvalidUsernameMess(\"Please fill out this field\");\r\n    }\r\n    if (!password) {\r\n      count += 1;\r\n      setInvalidPasswordMess(\"Please fill out this field\");\r\n    }\r\n    if (!firstname) {\r\n      count += 1;\r\n      setInvalidFirstname(\"Please fill out this field\");\r\n    }\r\n    if (!lastname) {\r\n      count += 1;\r\n      setInvalidLastname(\"Please fill out this field\");\r\n    }\r\n    if (!email) {\r\n      count += 1;\r\n      setInvalidEmailMess(\"Please fill out this field\");\r\n    }\r\n    return count !== 0;\r\n  };\r\n\r\n  const handleError = (ok, message) => {\r\n    if (!ok) {\r\n      setError(message);\r\n    } else if (/Email/.test(message)) {\r\n      setInvalidEmailMess(message);\r\n    } else if (/User/.test(message)) {\r\n      setInvalidUsernameMess(message);\r\n    } else setError(message);\r\n  };\r\n\r\n  const handleSignUp = async (event) => {\r\n    event.preventDefault();\r\n    const missingField = handleMissingField();\r\n    if (\r\n      !missingField &&\r\n      !invalidEmailMess &&\r\n      !invalidPasswordMess &&\r\n      !invalidUsernameMess &&\r\n      !invalidFirstname &&\r\n      !invalidLastname\r\n    ) {\r\n      setWaitForResponse(true);\r\n      setError(null);\r\n      const { message, user, ok, sessionID } = await callAPI(\r\n        \"POST\",\r\n        \"/signup\",\r\n        {\r\n          email: email,\r\n          firstname: firstname,\r\n          username: username,\r\n          password: password,\r\n          lastname: lastname,\r\n        }\r\n      );\r\n      setWaitForResponse(false);\r\n      if (user) {\r\n        authenticateUser(dispatch, user, sessionID);\r\n      } else handleError(ok, message);\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    setCheckingSession(true);\r\n    const { user, sessionID, message, ok } = await callAPI(\"GET\", \"/\", null);\r\n    setCheckingSession(false);\r\n    if (user) {\r\n      authenticateUser(dispatch, user, sessionID);\r\n    } else handleError(ok, message);\r\n  }, [isAuthenticated]);\r\n\r\n  if (isAuthenticated) {\r\n    if (isAuthenticated !== \"guest\") return <Redirect to=\"/\" />;\r\n    else if (successfullyLogin) return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <h1>Xiangqi</h1>\r\n      {checkingSession ? (\r\n        <Spinner\r\n          animation=\"border\"\r\n          variant=\"secondary\"\r\n          style={{\r\n            width: `${window.innerWidth / 5}px`,\r\n            height: `${window.innerWidth / 5}px`,\r\n            borderWidth: \"9px\",\r\n          }}\r\n        />\r\n      ) : (\r\n        <Row className=\"justify-content-center\">\r\n          <Col\r\n            md={{ span: 4 }}\r\n            sm={{ span: 6 }}\r\n            xs={{ span: 10 }}\r\n            className=\"login-component d-flex flex-column  align-items-center\"\r\n          >\r\n            {error ? <p className=\"error-message\">{error}</p> : null}\r\n            <Form onSubmit={handleSignUp} method=\"POST\">\r\n              <Form.Group controlId=\"username\">\r\n                <Form.Label style={{ float: \"left\" }}>Username</Form.Label>\r\n                <InputGroup hasValidation>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    isInvalid={invalidUsernameMess !== \"\"}\r\n                    onChange={handleUsernameChange}\r\n                    value={username}\r\n                  />\r\n                  <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                    style={{ textAlign: \"left\" }}\r\n                  >\r\n                    {invalidUsernameMess}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"firstname\">\r\n                <Form.Label style={{ float: \"left\" }}>Firstname</Form.Label>\r\n                <InputGroup hasValidation>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    isInvalid={invalidFirstname !== \"\"}\r\n                    onChange={handleFirstnameChange}\r\n                    value={firstname}\r\n                  />\r\n                  <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                    style={{ textAlign: \"left\" }}\r\n                  >\r\n                    {invalidFirstname}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"lastname\">\r\n                <Form.Label style={{ float: \"left\" }}>Lastname</Form.Label>\r\n                <InputGroup hasValidation>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    isInvalid={invalidLastname !== \"\"}\r\n                    onChange={handleLastnameChange}\r\n                    value={lastname}\r\n                  />\r\n                  <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                    style={{ textAlign: \"left\" }}\r\n                  >\r\n                    {invalidLastname}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"email\">\r\n                <Form.Label style={{ float: \"left\" }}>Email</Form.Label>\r\n                <InputGroup hasValidation>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    isInvalid={invalidEmailMess !== \"\"}\r\n                    onChange={handleEmailChange}\r\n                    value={email}\r\n                  />\r\n                  <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                    style={{ textAlign: \"left\" }}\r\n                  >\r\n                    {invalidEmailMess}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              <Form.Group controlId=\"password\">\r\n                <Form.Label style={{ float: \"left\" }}>Password</Form.Label>\r\n                <InputGroup hasValidation>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    isInvalid={invalidPasswordMess !== \"\"}\r\n                    onChange={handlePasswordChange}\r\n                    value={password}\r\n                  />\r\n                  <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                    style={{ textAlign: \"left\" }}\r\n                  >\r\n                    {invalidPasswordMess}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n\r\n              <Button type=\"submit\">\r\n                {waitForResponse ? (\r\n                  <Spinner animation=\"border\" variant=\"dark\" />\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </Button>\r\n            </Form>\r\n            <p className=\"seperator\">\r\n              <span></span>\r\n              <span className=\"seperator-text\">or connect with</span>\r\n              <span></span>\r\n            </p>\r\n            <div className=\"social-login\">\r\n              <a className=\"google\" href=\"http://localhost:8080/auth/google\">\r\n                <i className=\"fab fa-google\"></i> Google\r\n              </a>\r\n              <a\r\n                className=\"facebook\"\r\n                href=\"http://localhost:8080/auth/facebook\"\r\n              >\r\n                <i className=\"fab fa-facebook \"></i> Facebook\r\n              </a>\r\n              <a className=\"github\" href=\"http://localhost:8080/auth/github\">\r\n                <i className=\"fab fa-github \"></i> Github\r\n              </a>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\App\\App.jsx",["207"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./App.scss\";\r\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\r\nimport Login from \"../Login/Login.jsx\";\r\nimport Main from \"../Main/Main.jsx\";\r\nimport Signup from \"../Signup/Signup.jsx\";\r\nimport VerifyEmail from \"../VerifyEmail/VerifyEmail.jsx\";\r\nimport {\r\n  SocketContext,\r\n  SetMoveTimerContext,\r\n  setMoveTimer,\r\n  AuthenticateUserContext,\r\n  authenticateUser,\r\n  socket,\r\n} from \"./context.js\";\r\n\r\nfunction App(props) {\r\n  useEffect(() => {\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      <SetMoveTimerContext.Provider value={setMoveTimer}>\r\n        <AuthenticateUserContext.Provider value={authenticateUser}>\r\n          <Router>\r\n            <Switch>\r\n              <Route path=\"/login\">\r\n                <Login />\r\n              </Route>\r\n              <Route path=\"/signup\">\r\n                <Signup />\r\n              </Route>\r\n              <Route path=\"/verify-email\">\r\n                <VerifyEmail />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Main />\r\n              </Route>\r\n            </Switch>\r\n          </Router>\r\n        </AuthenticateUserContext.Provider>\r\n      </SetMoveTimerContext.Provider>\r\n    </SocketContext.Provider>\r\n  );\r\n}\r\n\r\nexport { App };\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Game.jsx",["208"],"import React, { useState, useEffect, useContext, useRef } from \"react\";\r\nimport \"./Game.scss\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport GameController from \"./GameController/GameController.jsx\";\r\nimport GamePlayArea from \"./GamePlayArea/GamePlayArea.jsx\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport GameBar from \"./GameBar/GameBar.jsx\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../App/context.js\";\r\n\r\nconst Game = () => {\r\n  const dispatch = useDispatch();\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n  const [timeSelectorDisplay, setTimeSelectorDisplay] = useState(\"none\");\r\n  const foundMatch = useSelector((state) => state.gameState.foundMatch);\r\n  const foundMatchRef = useRef();\r\n\r\n  const handleToggle = () => {\r\n    setTimeSelectorDisplay(timeSelectorDisplay === \"none\" ? \"flex\" : \"none\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    foundMatchRef.current = foundMatch;\r\n  }, [foundMatch]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (foundMatchRef.current) {\r\n        const listItemRef = React.createRef();\r\n        dispatch({ type: \"setGameResult\", value: \"Lose\" });\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            type: \"game result message\",\r\n            winner: \"Opponent Won - \",\r\n            reason: \"Game Abandoned\",\r\n            className: \"game-message\",\r\n            ref: listItemRef,\r\n          },\r\n        });\r\n        setMoveTimer(null, true, dispatch);\r\n        socket.emit(\"gameFinish\", [\"Won\", \"Game Abandoned\"]);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Row md={{ cols: 1 }} className=\"mt-5 pb-5\">\r\n      <GamePlayArea />\r\n      {!foundMatch ? (\r\n        <GameController\r\n          timeSelectorDisplay={timeSelectorDisplay}\r\n          handleToggle={handleToggle}\r\n        />\r\n      ) : (\r\n        <GameBar />\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\Board.jsx",["209","210"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport Piece from \"./Piece/Piece.jsx\";\r\nimport \"./Board.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getSVGLocation from \"./getSVGLocation.js\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../../App/context.js\";\r\nimport PieceClass from \"../../../../pieces/piece.js\";\r\n\r\nfunction Board() {\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => state.boardState.board);\r\n  const targetDisplay = useSelector((state) => state.boardState.targetDisplay);\r\n  const boardSize = useSelector((state) => state.boardState.boardSize);\r\n  const currentPiece = useSelector((state) => state.boardState.currentPiece);\r\n  const getClicked = useSelector((state) => state.boardState.getClicked);\r\n  const draggable = useSelector((state) => state.boardState.draggable);\r\n  const [warningDisplay, setWarningDisplay] = useState(\"none\");\r\n  const [warningTranslate, setWarningTranslate] = useState(\"translate(0, 0)\");\r\n  const side = useSelector((state) => state.boardState.side);\r\n  const svgRef = useRef();\r\n  const targetTranslate = useSelector(\r\n    (state) => state.boardState.targetTranslate\r\n  );\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) {\r\n          dispatch({ type: \"setGetClicked\", value: false });\r\n        }\r\n      }\r\n      dispatch({ type: \"setTargetDisplay\", value: \"inline\" });\r\n      dispatch({ type: \"setDraggable\", value: true });\r\n      dispatch({ type: \"setTargetTranslate\", value: translate });\r\n      dispatch({ type: \"setCurrentPiece\", value: board[row][col] });\r\n    }\r\n  };\r\n\r\n  const updateBoard = (moveResult, [curRow, curCol]) => {\r\n    if (moveResult && !/translate/.test(moveResult)) {\r\n      const [capture, newRow, newCol] = moveResult;\r\n      if (capture) {\r\n        dispatch({ type: \"setCapturedPieces\", value: board[newRow][newCol] });\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    } else if (moveResult) {\r\n      setTimeout(() => {\r\n        setWarningDisplay(\"none\");\r\n      }, 400);\r\n      setWarningDisplay(\"inline\");\r\n      setWarningTranslate(moveResult);\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\r\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\r\n      setMoveTimer(true, false, dispatch);\r\n    }\r\n  };\r\n\r\n  const updateCurrentPiece = (moveResult) => {\r\n    if ((moveResult && !/translate/.test(moveResult)) || getClicked) {\r\n      dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n      dispatch({ type: \"setCurrentPiece\", value: null });\r\n      dispatch({ type: \"setGetClicked\", value: false });\r\n    } else {\r\n      dispatch({ type: \"setGetClicked\", value: true });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      let moveResult = null;\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      const newCol = Math.floor(x / currentPiece.width);\r\n      const newRow = Math.floor(y / currentPiece.width);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const canMove = currentPiece.canMoveToNewPosition(newRow, newCol, board);\r\n      if (turnToMove && canMove && !/translate/.test(canMove))\r\n        moveResult = currentPiece.setPosition(canMove, newRow, newCol);\r\n      else if (/translate/.test(canMove)) moveResult = canMove;\r\n      updateBoard(moveResult, [curRow, curCol]);\r\n      dispatch({ type: \"setDraggable\", value: false });\r\n      updateCurrentPiece(moveResult);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      if (moveResult && !/translate/.test(moveResult)) {\r\n        dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n        setMoveTimer(false, false, dispatch);\r\n        socket.emit(\"opponentMove\", moveResult, [curRow, curCol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const svg = svgRef.current;\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    let moveResult = null;\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newCol = Math.floor(x / currentPiece.width);\r\n    const newRow = Math.floor(y / currentPiece.width);\r\n    const canMove = currentPiece.canMoveToNewPosition(newRow, newCol, board);\r\n    if (turnToMove && canMove && !/translate/.test(canMove))\r\n      moveResult = currentPiece.setPosition(canMove, newRow, newCol);\r\n    updateBoard(moveResult, [curRow, curCol]);\r\n    dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n    dispatch({ type: \"setCurrentPiece\", value: null });\r\n    dispatch({ type: \"setBoard\", value: [...board] });\r\n    if (moveResult && !/translate/.test(moveResult)) {\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      setMoveTimer(false, false, dispatch);\r\n      socket.emit(\"opponentMove\", moveResult, [curRow, curCol]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  const constructNewBoard = (width) => {\r\n    const newBoard = board.map((row) => {\r\n      const newRow = row.map((piece) => {\r\n        if (piece) {\r\n          const [row, col] = piece.position;\r\n          piece.width = width;\r\n          piece.translate = `translate(${width * col}, ${width * row})`;\r\n          return piece;\r\n        }\r\n        return 0;\r\n      });\r\n      return newRow;\r\n    });\r\n    return newBoard;\r\n  };\r\n\r\n  const handleResize = () => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: constructNewBoard(width / 9),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({ type: \"setBoardSize\", value: [width, width / (521 / 577)] });\r\n    dispatch({ type: \"setBoard\", value: constructNewBoard(width / 9) });\r\n\r\n    window.ondragstart = () => false;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    window.onresize = handleResize;\r\n    socket.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n\r\n    return () => {\r\n      window.onmouseup = null;\r\n      window.onmousemove = null;\r\n      window.onresize = null;\r\n      socket.removeAllListeners(\"move\");\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (turnToMove) {\r\n      const lostReason = PieceClass.isLost(board, side[1]);\r\n      if (lostReason) {\r\n        const listItemRef = React.createRef();\r\n        dispatch({ type: \"setGameResult\", value: \"Lose\" });\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            type: \"game result message\",\r\n            winner: \"Opponent Won - \",\r\n            reason: lostReason,\r\n            className: \"game-message\",\r\n            ref: listItemRef,\r\n          },\r\n        });\r\n        setMoveTimer(null, true, dispatch);\r\n        socket.emit(\"gameFinish\", [\"Won\", lostReason]);\r\n      }\r\n    }\r\n  }, [turnToMove]);\r\n\r\n  return (\r\n    <svg\r\n      width={boardSize[0]}\r\n      height={boardSize[1]}\r\n      onClick={handleClick}\r\n      style={{\r\n        backgroundImage: \"url(/images/Board/board.jpg)\",\r\n      }}\r\n      ref={svgRef}\r\n    >\r\n      <image\r\n        href=\"/images/Target_Icon/target.gif\"\r\n        width={boardSize[0] / 9 - 3}\r\n        height={boardSize[0] / 9 - 3}\r\n        style={{ display: targetDisplay }}\r\n        transform={targetTranslate}\r\n      ></image>\r\n      <rect\r\n        width={boardSize[0] / 9 - 3}\r\n        height={boardSize[0] / 9 - 3}\r\n        style={{ display: warningDisplay }}\r\n        transform={warningTranslate}\r\n        fill=\"brown\"\r\n      ></rect>\r\n      <Piece board={board} handleMouseDown={handleMouseDown} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default React.memo(Board);\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Timer\\Timer.jsx",["211"],"import React, { useEffect, useContext } from \"react\";\r\nimport \"./Timer.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../../App/context.js\";\r\n\r\nconst Timer = (props) => {\r\n  const dispatch = useDispatch();\r\n  const minute = Math.floor(props.timeLeftToMove / 60);\r\n  const second = props.timeLeftToMove % 60;\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n\r\n  useEffect(() => {\r\n    if (props.timeLeftToMove === 0 && turnToMove) {\r\n      const listItemRef = React.createRef();\r\n      dispatch({ type: \"setGameResult\", value: \"Lose\" });\r\n      dispatch({\r\n        type: \"setMessage\",\r\n        value: {\r\n          type: \"game result message\",\r\n          winner: \"Opponent Won - \",\r\n          reason: \"Game Abandoned\",\r\n          className: \"game-message\",\r\n          ref: listItemRef,\r\n        },\r\n      });\r\n      setMoveTimer(null, true, dispatch);\r\n      socket.emit(\"gameFinish\", [\"Won\", \"Game Abandoned\"]);\r\n    }\r\n  }, [props.timeLeftToMove]);\r\n\r\n  return (\r\n    <div className={`clock ${props.turnToMove ? \"turn-to-move\" : \"\"}`}>\r\n      <span>\r\n        {(minute < 10 ? \"0\" + minute : minute) +\r\n          \":\" +\r\n          (second < 10 ? \"0\" + second : second)}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\initializeBoard.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\getSVGLocation.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\appReducer.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\reducer\\gameReducer.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\Board\\Piece\\Piece.jsx",["212","213"],"import React, { createRef, useRef } from \"react\";\r\n\r\nfunction Piece(props) {\r\n  const pieces = [];\r\n  for (let i = 0; i < 10; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (props.board[i][j]) {\r\n        const [row, col] = props.board[i][j].position;\r\n        pieces.push(\r\n          <image\r\n            id={`p${row}${col}`}\r\n            href={`/images/Pieces/${props.board[i][j].name}.png`}\r\n            width={props.board[i][j].width - 3}\r\n            height={props.board[i][j].width - 3}\r\n            transform={props.board[i][j].translate}\r\n            key={`${i}${j}`}\r\n            onMouseDown={props.handleMouseDown}\r\n          ></image>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return <g>{pieces}</g>;\r\n}\r\n\r\nexport default Piece;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameController\\GameController.jsx",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GamePlayArea\\GamePlayArea.jsx",["214","215"],"import React from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport Timer from \"../Timer/Timer.jsx\";\r\nimport Board from \"../Board/Board\";\r\nimport \"./GamePlayArea.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport GameResult from \"./GameResult/GameResult.jsx\";\r\nimport Pause from \"./Pause/Pause.jsx\";\r\n\r\nconst GamePlayArea = (props) => {\r\n  const opponentTimeLeftToMove = useSelector(\r\n    (state) => state.gameState.opponentTimeLeftToMove\r\n  );\r\n  const playerTimeLeftToMove = useSelector(\r\n    (state) => state.gameState.playerTimeLeftToMove\r\n  );\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const gameResult = useSelector((state) => state.gameState.gameResult);\r\n  const foundMatch = useSelector((state) => state.gameState.foundMatch);\r\n  const capturedPieces = useSelector(\r\n    (state) => state.boardState.capturedPieces\r\n  );\r\n  const playerInfo = useSelector((state) => state.appState.playerInfo);\r\n  const opponentInfo = useSelector((state) => state.gameState.opponentInfo);\r\n\r\n  return (\r\n    <Col\r\n      md={{ span: 4 }}\r\n      sm={{ span: 11 }}\r\n      xs={{ span: 11 }}\r\n      className=\"board-container pb-3\"\r\n    >\r\n      <div className=\"player-area\">\r\n        <div className=\"avatar-and-name\">\r\n          <img src={opponentInfo.photo} alt=\"\" />\r\n          <p className=\"user-name\">{opponentInfo.playername}</p>\r\n        </div>\r\n        <div className=\"captured-pieces\">\r\n          {capturedPieces.map((element, index) => {\r\n            if (element.side === element.choosenSide[1])\r\n              return (\r\n                <img\r\n                  src={`/images/Pieces/${element.name}.png`}\r\n                  style={{ width: \"27px\" }}\r\n                  key={`c${index}`}\r\n                ></img>\r\n              );\r\n            return null;\r\n          })}\r\n        </div>\r\n        <Timer\r\n          timeLeftToMove={opponentTimeLeftToMove}\r\n          turnToMove={foundMatch && !gameResult ? !turnToMove : turnToMove}\r\n        />\r\n      </div>\r\n      <Board />\r\n      <div className=\"player-area\">\r\n        <div className=\"avatar-and-name\">\r\n          <div className=\"avatar-and-name\">\r\n            <img src={playerInfo.photo} alt=\"\" />\r\n            <p className=\"user-name\">{playerInfo.username}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"captured-pieces\">\r\n          {capturedPieces.map((element, index) => {\r\n            if (element.side === element.choosenSide[0])\r\n              return (\r\n                <img\r\n                  src={`/images/Pieces/${element.name}.png`}\r\n                  style={{ width: \"27px\" }}\r\n                  key={`c${index}`}\r\n                ></img>\r\n              );\r\n            return null;\r\n          })}\r\n        </div>\r\n        <Timer timeLeftToMove={playerTimeLeftToMove} turnToMove={turnToMove} />\r\n      </div>\r\n      <GameResult />\r\n      <Pause />\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default GamePlayArea;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\GameBar.jsx",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\ChatSection\\ChatSection.jsx",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GamePlayArea\\GameResult\\GameResult.jsx",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\ChatSection\\DrawOffer\\DrawOffer.jsx",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GameBar\\ChatSection\\renderMessages.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\Game\\GamePlayArea\\Pause\\Pause.jsx",["216","217"],"import React, { useContext, useEffect } from \"react\";\r\nimport \"./Pause.scss\";\r\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../../../App/context.js\";\r\n\r\nconst Timer = (props) => {\r\n  const dispatch = useDispatch();\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n  const time = useSelector((state) => state.gameState.pauseTime);\r\n  const minute = Math.floor(time / 60);\r\n  const second = time % 60;\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  useEffect(() => {\r\n    if (time === 0) {\r\n      if (/Paused/.test(props.pause)) {\r\n        socket.emit(\"startTimer\", true);\r\n        dispatch({ type: \"setPauseTime\", value: \"timeout\" });\r\n        dispatch({ type: \"setPause\", value: \"Timeout\" });\r\n      } else {\r\n        socket.emit(\"startTimer\", false);\r\n        dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n        dispatch({ type: \"setPause\", value: null });\r\n        setMoveTimer(turnToMove, false, dispatch);\r\n        socket.emit(\"startGame\");\r\n      }\r\n    }\r\n\r\n    socket.on(\"pauseOver\", () => {\r\n      const listItemRef = React.createRef();\r\n      dispatch({ type: \"setPause\", value: \"Timeout\" });\r\n      dispatch({ type: \"setPauseTime\", value: \"timeout\" });\r\n      socket.emit(\"starTimer\", true);\r\n      dispatch({\r\n        type: \"setMessage\",\r\n        value: {\r\n          from: \"\",\r\n          message: \"Pause Timeout\",\r\n          className: \"game-message\",\r\n          ref: listItemRef,\r\n        },\r\n      });\r\n    });\r\n\r\n    socket.on(\"gameStarted\", () => {\r\n      socket.emit(\"startTimer\", false);\r\n      dispatch({ type: \"setPause\", value: null });\r\n      dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n      setMoveTimer(turnToMove, false, dispatch);\r\n    });\r\n\r\n    return () => {\r\n      socket.removeAllListeners(\"pauseOver\");\r\n      socket.removeAllListeners(\"gameStarted\");\r\n    };\r\n  }, [time]);\r\n\r\n  return (\r\n    <p className=\"pause-timer\">\r\n      {/Paused/.test(props.pause) ? \"Resume In\" : \"Game Will Start In\"}:{\" \"}\r\n      <span>\r\n        {(minute < 10 ? \"0\" + minute : minute) +\r\n          \":\" +\r\n          (second < 10 ? \"0\" + second : second)}\r\n      </span>\r\n    </p>\r\n  );\r\n};\r\n\r\nconst Pause = () => {\r\n  const dispatch = useDispatch();\r\n  const pause = useSelector((state) => state.gameState.pause);\r\n  const [boardWidth, boardHeight] = useSelector(\r\n    (state) => state.boardState.boardSize\r\n  );\r\n  const store = useStore();\r\n  const socket = useContext(SocketContext);\r\n\r\n  useEffect(() => {\r\n    if (pause) {\r\n      if (/Paused/.test(pause)) {\r\n        socket.removeAllListeners(\"oneSecondPass\");\r\n        socket.emit(\"startTimer\", true);\r\n        socket.on(\"oneSecondPass\", () => {\r\n          dispatch({ type: \"setPauseTime\", value: null });\r\n        });\r\n      } else if (/Resumed/.test(pause)) {\r\n        socket.emit(\"startTimer\", true);\r\n        dispatch({ type: \"setPauseTime\", value: \"timeout\" });\r\n      }\r\n    }\r\n\r\n    const handleOpponentPauseOrResumeGame = (pause) => {\r\n      const opponentInfo = store.getState().gameState.opponentInfo;\r\n      const listItemRef = React.createRef();\r\n      const message = {\r\n        from: `${opponentInfo.playername}`,\r\n        message: `${pause ? \"Paused\" : \"Resumed\"} Game`,\r\n        className: \"game-message\",\r\n        ref: listItemRef,\r\n      };\r\n      dispatch({ type: \"setMessage\", value: message });\r\n      dispatch({\r\n        type: \"setPause\",\r\n        value: `${opponentInfo.playername} ${\r\n          pause ? \"Paused\" : \"Resumed\"\r\n        } Game`,\r\n      });\r\n    };\r\n\r\n    socket.on(\"opponentPauseGame\", () => {\r\n      handleOpponentPauseOrResumeGame(true);\r\n    });\r\n\r\n    socket.on(\"opponentResumeGame\", () => {\r\n      handleOpponentPauseOrResumeGame(false);\r\n    });\r\n\r\n    return () => {\r\n      socket.removeAllListeners(\"opponentPauseGame\");\r\n      socket.removeAllListeners(\"opponentResumeGame\");\r\n    };\r\n  }, [pause]);\r\n\r\n  if (!pause) return null;\r\n  return (\r\n    <div\r\n      className=\"pause\"\r\n      style={{\r\n        width: `${boardWidth}px`,\r\n        height: `${boardHeight}px`,\r\n      }}\r\n    >\r\n      <div>\r\n        <p className=\"pause-announce\">{pause}</p>\r\n        <Timer pause={pause} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Pause);\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\App\\context.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\App\\callAPI.js",[],"F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\VerifyEmail\\VerifyEmail.jsx",["218"],"import React, { useState, useRef } from \"react\";\r\nimport {\r\n  Container,\r\n  Form,\r\n  InputGroup,\r\n  Button,\r\n  Spinner,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport callAPI from \"../App/callAPI.js\";\r\n\r\nconst VerifyEmail = () => {\r\n  const dispatch = useDispatch();\r\n  const [verified, setVerified] = useState(false);\r\n  const [waitForResponse, setWaitForResponse] = useState(false);\r\n  const [resend, setResend] = useState(false);\r\n  const [verificationCode, setVerficationCode] = useState(\"\");\r\n  const [invalidCodeMess, setInvalidCodeMess] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [waitForSendingCode, setWaitForSendingCode] = useState(false);\r\n  const codeRef = useRef();\r\n  const playerInfo = useSelector((state) => state.appState.playerInfo);\r\n  const isAuthenticated = useSelector(\r\n    (state) => state.appState.isAuthenticated\r\n  );\r\n\r\n  const handleVerificationCodeChange = (event) => {\r\n    const value = event.target.value;\r\n    if (/[^0-9]/.test(value) || value.length > 5)\r\n      setInvalidCodeMess(\"Invalid verification code\");\r\n    else setInvalidCodeMess(\"\");\r\n    setVerficationCode(value);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (!verificationCode) setInvalidCodeMess(\"Please fill in this field\");\r\n    else if (!invalidCodeMess) {\r\n      setWaitForResponse(true);\r\n      const { message, ok, user } = await callAPI(\r\n        \"POST\",\r\n        \"/verify-email/code\",\r\n        {\r\n          username: playerInfo.username,\r\n          correct: +codeRef.current === +verificationCode,\r\n        }\r\n      );\r\n      setWaitForResponse(false);\r\n      if (!ok) setError(message);\r\n      else if (user) {\r\n        setVerified(true);\r\n        dispatch({ type: \"setPlayerInfo\", value: user });\r\n      } else if (+codeRef.current === +verificationCode)\r\n        setInvalidCodeMess(\"Incorrect Code\");\r\n      else setError(message);\r\n    }\r\n  };\r\n\r\n  const sendVerificationCode = async () => {\r\n    if (!resend) setResend(true);\r\n    setWaitForSendingCode(true);\r\n    setError(\"\");\r\n    const { message, code, ok } = await callAPI(\"POST\", \"/verify-email\", {\r\n      email: playerInfo.email.value,\r\n      lastname: playerInfo.name.lastname,\r\n    });\r\n    setWaitForSendingCode(false);\r\n    if (!ok) setError(message);\r\n    else codeRef.current = code;\r\n  };\r\n\r\n  if (!playerInfo || verified) return <Redirect to=\"/\" />;\r\n\r\n  return (\r\n    <Container fluid>\r\n      <h1>Xiangqi</h1>\r\n      <Row className=\"justify-content-center\">\r\n        <Col\r\n          md={{ span: 3 }}\r\n          xs={{ span: 10 }}\r\n          className=\"login-component d-flex flex-column  align-items-center\"\r\n        >\r\n          {error ? <p className=\"error-message\">{error}</p> : null}\r\n          <Form onSubmit={handleSubmit} method=\"POST\">\r\n            <Form.Group controlId=\"verificationCode\">\r\n              <Form.Label style={{ float: \"left\" }}>\r\n                Enter your verification code\r\n              </Form.Label>\r\n              <InputGroup hasValidation>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"verificationCode\"\r\n                  isInvalid={invalidCodeMess !== \"\"}\r\n                  onChange={handleVerificationCodeChange}\r\n                  value={verificationCode}\r\n                  placeholder=\"Verification Code\"\r\n                />\r\n                <Form.Control.Feedback\r\n                  type=\"invalid\"\r\n                  style={{ textAlign: \"left\" }}\r\n                >\r\n                  {invalidCodeMess}\r\n                </Form.Control.Feedback>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\">\r\n              {waitForResponse ? (\r\n                <Spinner animation=\"border\" variant=\"dark\" />\r\n              ) : (\r\n                \"Submit\"\r\n              )}\r\n            </Button>\r\n            <Button\r\n              onClick={sendVerificationCode}\r\n              style={{ marginTop: \"10px\" }}\r\n            >\r\n              {waitForSendingCode ? (\r\n                <Spinner animation=\"border\" variant=\"dark\" />\r\n              ) : resend ? (\r\n                \"Resend Verification Code\"\r\n              ) : (\r\n                \"Send Verification Code\"\r\n              )}\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default VerifyEmail;\r\n","F:\\Web\\Cờ Tướng\\front_end\\src\\Components\\Main\\VerifyEmailNote\\VerifyEmailNote.jsx",[],{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":95,"column":13,"nodeType":"225","endLine":102,"endColumn":4},{"ruleId":"223","severity":1,"message":"226","line":102,"column":6,"nodeType":"227","endLine":102,"endColumn":23,"suggestions":"228"},{"ruleId":"223","severity":1,"message":"224","line":22,"column":13,"nodeType":"225","endLine":39,"endColumn":4},{"ruleId":"229","severity":1,"message":"230","line":23,"column":30,"nodeType":"231","messageId":"232","endLine":23,"endColumn":32},{"ruleId":"223","severity":1,"message":"226","line":39,"column":6,"nodeType":"227","endLine":39,"endColumn":23,"suggestions":"233"},{"ruleId":"234","severity":1,"message":"235","line":3,"column":36,"nodeType":"236","messageId":"237","endLine":3,"endColumn":42},{"ruleId":"223","severity":1,"message":"238","line":38,"column":6,"nodeType":"227","endLine":38,"endColumn":8,"suggestions":"239"},{"ruleId":"234","severity":1,"message":"240","line":35,"column":29,"nodeType":"236","messageId":"237","endLine":35,"endColumn":49},{"ruleId":"241","severity":1,"message":"242","line":57,"column":40,"nodeType":"243","messageId":"244","endLine":57,"endColumn":41,"suggestions":"245"},{"ruleId":"223","severity":1,"message":"224","line":146,"column":13,"nodeType":"225","endLine":153,"endColumn":4},{"ruleId":"223","severity":1,"message":"226","line":153,"column":6,"nodeType":"227","endLine":153,"endColumn":23,"suggestions":"246"},{"ruleId":"234","severity":1,"message":"247","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":25},{"ruleId":"223","severity":1,"message":"248","line":45,"column":6,"nodeType":"227","endLine":45,"endColumn":8,"suggestions":"249"},{"ruleId":"223","severity":1,"message":"250","line":174,"column":6,"nodeType":"227","endLine":174,"endColumn":8,"suggestions":"251"},{"ruleId":"223","severity":1,"message":"252","line":212,"column":6,"nodeType":"227","endLine":212,"endColumn":18,"suggestions":"253"},{"ruleId":"223","severity":1,"message":"254","line":31,"column":6,"nodeType":"227","endLine":31,"endColumn":28,"suggestions":"255"},{"ruleId":"234","severity":1,"message":"256","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":26},{"ruleId":"234","severity":1,"message":"257","line":1,"column":28,"nodeType":"236","messageId":"237","endLine":1,"endColumn":34},{"ruleId":"258","severity":1,"message":"259","line":42,"column":17,"nodeType":"260","endLine":46,"endColumn":18},{"ruleId":"258","severity":1,"message":"259","line":68,"column":17,"nodeType":"260","endLine":72,"endColumn":18},{"ruleId":"223","severity":1,"message":"261","line":56,"column":6,"nodeType":"227","endLine":56,"endColumn":12,"suggestions":"262"},{"ruleId":"223","severity":1,"message":"263","line":123,"column":6,"nodeType":"227","endLine":123,"endColumn":13,"suggestions":"264"},{"ruleId":"234","severity":1,"message":"265","line":26,"column":9,"nodeType":"236","messageId":"237","endLine":26,"endColumn":24},"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'authenticateUser' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["268"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["269"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'handleLogout' and 'socket'. Either include them or remove the dependency array.",["270"],"'setSuccessfullyLogin' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["271","272"],["273"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'setMoveTimer', and 'socket'. Either include them or remove the dependency array.",["274"],"React Hook useEffect has missing dependencies: 'constructNewBoard' and 'dispatch'. Either include them or remove the dependency array.",["275"],"React Hook useEffect has missing dependencies: 'board', 'dispatch', 'setMoveTimer', 'side', and 'socket'. Either include them or remove the dependency array.",["276"],"React Hook useEffect has missing dependencies: 'dispatch', 'setMoveTimer', 'socket', and 'turnToMove'. Either include them or remove the dependency array.",["277"],"'createRef' is defined but never used.","'useRef' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'dispatch', 'props.pause', 'setMoveTimer', 'socket', and 'turnToMove'. Either include them or remove the dependency array.",["278"],"React Hook useEffect has missing dependencies: 'dispatch', 'socket', and 'store'. Either include them or remove the dependency array.",["279"],"'isAuthenticated' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"280","fix":"281"},{"desc":"280","fix":"282"},{"desc":"283","fix":"284"},{"messageId":"285","fix":"286","desc":"287"},{"messageId":"288","fix":"289","desc":"290"},{"desc":"280","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},"Update the dependencies array to be: [authenticateUser, dispatch, isAuthenticated]",{"range":"304","text":"305"},{"range":"306","text":"305"},"Update the dependencies array to be: [handleLogout, socket]",{"range":"307","text":"308"},"removeEscape",{"range":"309","text":"310"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"311","text":"312"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"313","text":"305"},"Update the dependencies array to be: [dispatch, setMoveTimer, socket]",{"range":"314","text":"315"},"Update the dependencies array to be: [constructNewBoard, dispatch]",{"range":"316","text":"317"},"Update the dependencies array to be: [board, dispatch, setMoveTimer, side, socket, turnToMove]",{"range":"318","text":"319"},"Update the dependencies array to be: [dispatch, props.timeLeftToMove, setMoveTimer, socket, turnToMove]",{"range":"320","text":"321"},"Update the dependencies array to be: [dispatch, props.pause, setMoveTimer, socket, time, turnToMove]",{"range":"322","text":"323"},"Update the dependencies array to be: [dispatch, pause, socket, store]",{"range":"324","text":"325"},[3294,3311],"[authenticateUser, dispatch, isAuthenticated]",[1471,1488],[1265,1267],"[handleLogout, socket]",[2180,2181],"",[2180,2180],"\\",[4992,5009],[1600,1602],"[dispatch, setMoveTimer, socket]",[7033,7035],"[constructNewBoard, dispatch]",[8142,8154],"[board, dispatch, setMoveTimer, side, socket, turnToMove]",[1126,1148],"[dispatch, props.timeLeftToMove, setMoveTimer, socket, turnToMove]",[1982,1988],"[dispatch, props.pause, setMoveTimer, socket, time, turnToMove]",[3985,3992],"[dispatch, pause, socket, store]"]