{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\Board\\\\Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useReducer } from \"react\";\nimport initializeBoard from \"./initializeBoard.js\";\nimport Piece from \"./Piece/Piece.jsx\";\nimport \"./Board.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport getSVGLocation from \"./getSVGLocation.js\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.boardState.board);\n  const targetDisplay = useSelector(state => state.boardState.targetDisplay);\n  const boardSize = useSelector(state => state.boardState.boardSize);\n  const currentPiece = useSelector(state => state.boardState.currentPiece);\n  const getClicked = useSelector(state => state.boardState.getClicked);\n  const draggable = useSelector(state => state.boardState.draggable);\n  const capturedPiece = useSelector(state => state.boardState.capturedPiece);\n  const turnToMove = useSelector(state => state.boardState.turnToMove);\n  const findingMatch = useSelector(state => state.gameState.findingMatch);\n  const side = useSelector(state => state.boardState.side);\n  const socketRef = useRef();\n  const svgRef = useRef();\n  const timerRef = useRef();\n  const targetTranslate = useSelector(state => state.boardState.targetTranslate);\n\n  const setTimer = () => {\n    console.log(turnToMove);\n\n    if (turnToMove) {\n      console.log(\"set timer\");\n      clearInterval(timerRef.current);\n      dispatch({\n        type: \"setPlayerTimeLeftToMove\",\n        value: \"restart\"\n      });\n      timerRef.current = setInterval(() => {\n        dispatch({\n          type: \"setPlayerTimeLeftToMove\"\n        });\n      });\n    } else {\n      clearInterval(timerRef.current);\n      dispatch({\n        type: \"setOpponentTimeLeftToMove\",\n        value: \"restart\"\n      });\n      timerRef.current = setInterval(() => {\n        dispatch({\n          type: \"setOpponentTimeLeftToMove\"\n        });\n      });\n    }\n  };\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n\n        if (row !== curRow || curCol !== col) {\n          dispatch({\n            type: \"setGetClicked\",\n            value: false\n          });\n        }\n      }\n\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"inline\"\n      });\n      dispatch({\n        type: \"setDraggable\",\n        value: true\n      });\n      dispatch({\n        type: \"setTargetTranslate\",\n        value: translate\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: board[row][col]\n      });\n    }\n  };\n\n  const updateBoard = (newPostion, [curRow, curCol]) => {\n    if (newPostion) {\n      const [capture, newRow, newCol] = newPostion;\n\n      if (capture) {\n        capturedPiece.push(board[newRow][newCol]);\n        dispatch({\n          type: \"setCapturedPiece\",\n          value: [...capturedPiece]\n        });\n      }\n\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    }\n  };\n\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      });\n      setTimer(true);\n    }\n  };\n\n  const updateCurrentPiece = newPosition => {\n    if (newPosition || getClicked) {\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"none\"\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: null\n      });\n      dispatch({\n        type: \"setGetClicked\",\n        value: false\n      });\n    } else {\n      dispatch({\n        type: \"setGetClicked\",\n        value: true\n      });\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      const [curRow, curCol] = currentPiece.position;\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n      updateBoard(newPosition, [curRow, curCol]);\n      dispatch({\n        type: \"setDraggable\",\n        value: false\n      });\n      updateCurrentPiece(newPosition);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n\n      if (newPosition) {\n        dispatch({\n          type: \"setTurnToMove\",\n          value: !turnToMove\n        });\n        setTimer();\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n      }\n    }\n  };\n\n  const handleMouseMove = event => {\n    const svg = svgRef.current;\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    const [curRow, curCol] = currentPiece.position;\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n    updateBoard(newPosition, [curRow, curCol]);\n    dispatch({\n      type: \"setTargetDisplay\",\n      value: \"none\"\n    });\n    dispatch({\n      type: \"setCurrentPiece\",\n      value: null\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: [...board]\n    });\n\n    if (newPosition) {\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      });\n      setTimer();\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n    }\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  const handleResize = () => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: initializeBoard(width / 9, side)\n    });\n  };\n\n  useEffect(() => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: initializeBoard(width / 9, side)\n    });\n\n    window.ondragstart = () => false;\n\n    socketRef.current = io(\"http://localhost:8080/play\");\n  }, []);\n  useEffect(() => {\n    if (findingMatch) {\n      console.log(\"finding\");\n      socketRef.current.emit(\"findMatch\", side);\n    }\n\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    window.onresize = handleResize;\n    socketRef.current.on(\"foundMatch\", (opponentID, firstMove) => {\n      socketRef.current.opponentID = opponentID;\n      dispatch({\n        type: \"setFindingMatch\",\n        value: false\n      });\n      dispatch({\n        type: \"setTurnToMove\",\n        value: firstMove\n      });\n      dispatch({\n        type: \"setFoundMatch\",\n        value: true\n      });\n      setTimer();\n    });\n    socketRef.current.on(\"timeout\", () => {\n      dispatch({\n        type: \"setFindingMatch\",\n        value: null\n      });\n    });\n    socketRef.current.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\n    });\n    return () => {\n      window.onmouseup = null;\n      window.onmousemove = null;\n      window.onresize = null;\n      socketRef.current.removeAllListeners();\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: boardSize[0],\n    height: boardSize[1],\n    onClick: handleClick,\n    style: {\n      backgroundImage: \"url(/images/Board/board.jpg)\"\n    },\n    ref: svgRef,\n    children: [/*#__PURE__*/_jsxDEV(\"image\", {\n      href: \"/images/Target_Icon/target.gif\",\n      width: boardSize[0] / 9,\n      height: boardSize[0] / 9,\n      style: {\n        display: targetDisplay\n      },\n      transform: targetTranslate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Piece, {\n      board: board,\n      handleMouseDown: handleMouseDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"7rM3CsouczoPlkdK4Gm+s1hahbc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Board/Board.jsx"],"names":["React","useState","useEffect","useRef","useReducer","initializeBoard","Piece","useSelector","useDispatch","getSVGLocation","io","Board","props","dispatch","board","state","boardState","targetDisplay","boardSize","currentPiece","getClicked","draggable","capturedPiece","turnToMove","findingMatch","gameState","side","socketRef","svgRef","timerRef","targetTranslate","setTimer","console","log","clearInterval","current","type","value","setInterval","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","curRow","curCol","position","updateBoard","newPostion","capture","newRow","newCol","push","handleOpponentMove","animateMove","updateCurrentPiece","newPosition","handleMouseUp","svg","x","y","clientX","clientY","setNewPosition","emit","handleMouseMove","move","moveOnClick","handleClick","target","handleResize","width","document","querySelector","offsetWidth","window","ondragstart","onmousemove","onmouseup","onresize","on","opponentID","firstMove","removeAllListeners","backgroundImage","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useReducer } from \"react\";\r\nimport initializeBoard from \"./initializeBoard.js\";\r\nimport Piece from \"./Piece/Piece.jsx\";\r\nimport \"./Board.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getSVGLocation from \"./getSVGLocation.js\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nfunction Board(props) {\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => state.boardState.board);\r\n  const targetDisplay = useSelector((state) => state.boardState.targetDisplay);\r\n  const boardSize = useSelector((state) => state.boardState.boardSize);\r\n  const currentPiece = useSelector((state) => state.boardState.currentPiece);\r\n  const getClicked = useSelector((state) => state.boardState.getClicked);\r\n  const draggable = useSelector((state) => state.boardState.draggable);\r\n  const capturedPiece = useSelector((state) => state.boardState.capturedPiece);\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const findingMatch = useSelector((state) => state.gameState.findingMatch);\r\n  const side = useSelector((state) => state.boardState.side);\r\n  const socketRef = useRef();\r\n  const svgRef = useRef();\r\n  const timerRef = useRef();\r\n  const targetTranslate = useSelector(\r\n    (state) => state.boardState.targetTranslate\r\n  );\r\n\r\n  const setTimer = () => {\r\n    console.log(turnToMove);\r\n    if (turnToMove) {\r\n      console.log(\"set timer\");\r\n      clearInterval(timerRef.current);\r\n      dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n      timerRef.current = setInterval(() => {\r\n        dispatch({ type: \"setPlayerTimeLeftToMove\" });\r\n      });\r\n    } else {\r\n      clearInterval(timerRef.current);\r\n      dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n      timerRef.current = setInterval(() => {\r\n        dispatch({ type: \"setOpponentTimeLeftToMove\" });\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) {\r\n          dispatch({ type: \"setGetClicked\", value: false });\r\n        }\r\n      }\r\n      dispatch({ type: \"setTargetDisplay\", value: \"inline\" });\r\n      dispatch({ type: \"setDraggable\", value: true });\r\n      dispatch({ type: \"setTargetTranslate\", value: translate });\r\n      dispatch({ type: \"setCurrentPiece\", value: board[row][col] });\r\n    }\r\n  };\r\n\r\n  const updateBoard = (newPostion, [curRow, curCol]) => {\r\n    if (newPostion) {\r\n      const [capture, newRow, newCol] = newPostion;\r\n      if (capture) {\r\n        capturedPiece.push(board[newRow][newCol]);\r\n        dispatch({ type: \"setCapturedPiece\", value: [...capturedPiece] });\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\r\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      setTimer(true);\r\n    }\r\n  };\r\n\r\n  const updateCurrentPiece = (newPosition) => {\r\n    if (newPosition || getClicked) {\r\n      dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n      dispatch({ type: \"setCurrentPiece\", value: null });\r\n      dispatch({ type: \"setGetClicked\", value: false });\r\n    } else {\r\n      dispatch({ type: \"setGetClicked\", value: true });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n      updateBoard(newPosition, [curRow, curCol]);\r\n      dispatch({ type: \"setDraggable\", value: false });\r\n      updateCurrentPiece(newPosition);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      if (newPosition) {\r\n        dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n        setTimer();\r\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const svg = svgRef.current;\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n    updateBoard(newPosition, [curRow, curCol]);\r\n    dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n    dispatch({ type: \"setCurrentPiece\", value: null });\r\n    dispatch({ type: \"setBoard\", value: [...board] });\r\n    if (newPosition) {\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      setTimer();\r\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  const handleResize = () => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: initializeBoard(width / 9, side),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: initializeBoard(width / 9, side),\r\n    });\r\n\r\n    window.ondragstart = () => false;\r\n    socketRef.current = io(\"http://localhost:8080/play\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (findingMatch) {\r\n      console.log(\"finding\");\r\n      socketRef.current.emit(\"findMatch\", side);\r\n    }\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    window.onresize = handleResize;\r\n    socketRef.current.on(\"foundMatch\", (opponentID, firstMove) => {\r\n      socketRef.current.opponentID = opponentID;\r\n      dispatch({ type: \"setFindingMatch\", value: false });\r\n      dispatch({ type: \"setTurnToMove\", value: firstMove });\r\n      dispatch({ type: \"setFoundMatch\", value: true });\r\n      setTimer();\r\n    });\r\n\r\n    socketRef.current.on(\"timeout\", () => {\r\n      dispatch({ type: \"setFindingMatch\", value: null });\r\n    });\r\n\r\n    socketRef.current.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n\r\n    return () => {\r\n      window.onmouseup = null;\r\n      window.onmousemove = null;\r\n      window.onresize = null;\r\n      socketRef.current.removeAllListeners();\r\n    };\r\n  });\r\n\r\n  return (\r\n    <svg\r\n      width={boardSize[0]}\r\n      height={boardSize[1]}\r\n      onClick={handleClick}\r\n      style={{\r\n        backgroundImage: \"url(/images/Board/board.jpg)\",\r\n      }}\r\n      ref={svgRef}\r\n    >\r\n      <image\r\n        href=\"/images/Target_Icon/target.gif\"\r\n        width={boardSize[0] / 9}\r\n        height={boardSize[0] / 9}\r\n        style={{ display: targetDisplay }}\r\n        transform={targetTranslate}\r\n      ></image>\r\n      <Piece board={board} handleMouseDown={handleMouseDown} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}