{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport callAPI from \"./callAPI\";\nimport { authenticateUser } from \"./context.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst useFetchData = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const isAuthenticated = useSelector(state => state.appState.isAuthenticated);\n  const [waitForResponse, setWaitForResponse] = useState(true);\n  useEffect(async () => {\n    try {\n      if (!isAuthenticated) {\n        const {\n          user,\n          message,\n          opponentID\n        } = await callAPI(\"GET\", \"api/user\", null);\n\n        if (user) {\n          authenticateUser(dispatch, user, opponentID);\n        } else if (message) dispatch({\n          type: \"setLoginError\",\n          value: message\n        });\n\n        setWaitForResponse(false);\n      } else setWaitForResponse(false);\n    } catch (err) {\n      dispatch({\n        type: \"setLoginError\",\n        value: err.message\n      });\n    }\n  }, [isAuthenticated]);\n  return [waitForResponse, setWaitForResponse];\n};\n\n_s(useFetchData, \"OMqhKt+jbNLRiPqDWzBfhK1vXxk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport default useFetchData;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/useFetchData.js"],"names":["useEffect","useState","callAPI","authenticateUser","useDispatch","useSelector","useFetchData","dispatch","isAuthenticated","state","appState","waitForResponse","setWaitForResponse","user","message","opponentID","type","value","err"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMI,eAAe,GAAGH,WAAW,CAChCI,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeF,eADO,CAAnC;AAGA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,IAAD,CAAtD;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAI;AACF,UAAI,CAACQ,eAAL,EAAsB;AACpB,cAAM;AAAEK,UAAAA,IAAF;AAAQC,UAAAA,OAAR;AAAiBC,UAAAA;AAAjB,YAAgC,MAAMb,OAAO,CACjD,KADiD,EAEjD,UAFiD,EAGjD,IAHiD,CAAnD;;AAMA,YAAIW,IAAJ,EAAU;AACRV,UAAAA,gBAAgB,CAACI,QAAD,EAAWM,IAAX,EAAiBE,UAAjB,CAAhB;AACD,SAFD,MAEO,IAAID,OAAJ,EAAaP,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,KAAK,EAAEH;AAAhC,SAAD,CAAR;;AACpBF,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,OAXD,MAWOA,kBAAkB,CAAC,KAAD,CAAlB;AACR,KAbD,CAaE,OAAOM,GAAP,EAAY;AACZX,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,KAAK,EAAEC,GAAG,CAACJ;AAApC,OAAD,CAAR;AACD;AACF,GAjBQ,EAiBN,CAACN,eAAD,CAjBM,CAAT;AAmBA,SAAO,CAACG,eAAD,EAAkBC,kBAAlB,CAAP;AACD,CA3BD;;GAAMN,Y;UACaF,W,EACOC,W;;;AA2B1B,eAAeC,YAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport callAPI from \"./callAPI\";\r\nimport { authenticateUser } from \"./context.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst useFetchData = () => {\r\n  const dispatch = useDispatch();\r\n  const isAuthenticated = useSelector(\r\n    (state) => state.appState.isAuthenticated\r\n  );\r\n  const [waitForResponse, setWaitForResponse] = useState(true);\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      if (!isAuthenticated) {\r\n        const { user, message, opponentID } = await callAPI(\r\n          \"GET\",\r\n          \"api/user\",\r\n          null\r\n        );\r\n\r\n        if (user) {\r\n          authenticateUser(dispatch, user, opponentID);\r\n        } else if (message) dispatch({ type: \"setLoginError\", value: message });\r\n        setWaitForResponse(false);\r\n      } else setWaitForResponse(false);\r\n    } catch (err) {\r\n      dispatch({ type: \"setLoginError\", value: err.message });\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  return [waitForResponse, setWaitForResponse];\r\n};\r\n\r\nexport default useFetchData;\r\n"]},"metadata":{},"sourceType":"module"}