{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\Board\\\\Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useContext, useState } from \"react\";\nimport Piece from \"./Piece/Piece.jsx\";\nimport \"./Board.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport getSVGLocation from \"./getSVGLocation.js\";\nimport { SocketContext, SetMoveTimerContext } from \"../../../App/context.js\";\nimport PieceClass from \"../../../../pieces/piece.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.boardState.board);\n  const targetDisplay = useSelector(state => state.boardState.targetDisplay);\n  const boardSize = useSelector(state => state.boardState.boardSize);\n  const currentPiece = useSelector(state => state.boardState.currentPiece);\n  const getClicked = useSelector(state => state.boardState.getClicked);\n  const draggable = useSelector(state => state.boardState.draggable);\n  const [warningDisplay, setWarningDisplay] = useState(\"none\");\n  const [warningTranslate, setWarningTranslate] = useState(\"translate(0, 0)\");\n  const side = useSelector(state => state.boardState.side);\n  const svgRef = useRef();\n  const targetTranslate = useSelector(state => state.boardState.targetTranslate);\n  const turnToMove = useSelector(state => state.boardState.turnToMove);\n  const socket = useContext(SocketContext);\n  const setMoveTimer = useContext(SetMoveTimerContext);\n  const opponentInfo = useSelector(state => state.gameState.opponentInfo);\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n\n        if (row !== curRow || curCol !== col) {\n          dispatch({\n            type: \"setGetClicked\",\n            value: false\n          });\n        }\n      }\n\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"inline\"\n      });\n      dispatch({\n        type: \"setDraggable\",\n        value: true\n      });\n      dispatch({\n        type: \"setTargetTranslate\",\n        value: translate\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: board[row][col]\n      });\n    }\n  };\n\n  const updateBoard = (moveResult, [curRow, curCol]) => {\n    if (moveResult && !/translate/.test(moveResult)) {\n      const [capture, newRow, newCol] = moveResult;\n\n      if (capture) {\n        dispatch({\n          type: \"setCapturedPieces\",\n          value: board[newRow][newCol]\n        });\n      }\n\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    } else if (moveResult) {\n      setTimeout(() => {\n        setWarningDisplay(\"none\");\n      }, 400);\n      setWarningDisplay(\"inline\");\n      setWarningTranslate(moveResult);\n    }\n  };\n\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\n      setMoveTimer(true, false, dispatch);\n    }\n  };\n\n  const updateCurrentPiece = moveResult => {\n    if (moveResult && !/translate/.test(moveResult) || getClicked) {\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"none\"\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: null\n      });\n      dispatch({\n        type: \"setGetClicked\",\n        value: false\n      });\n    } else {\n      dispatch({\n        type: \"setGetClicked\",\n        value: true\n      });\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      let moveResult = null;\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      const newCol = Math.floor(x / currentPiece.width);\n      const newRow = Math.floor(y / currentPiece.width);\n      const [curRow, curCol] = currentPiece.position;\n      const canMove = currentPiece.canMoveToNewPosition(newRow, newCol, board);\n      if (turnToMove && canMove && !/translate/.test(canMove)) moveResult = currentPiece.setPosition(canMove, newRow, newCol);else if (/translate/.test(canMove)) moveResult = canMove;\n      updateBoard(moveResult, [curRow, curCol]);\n      dispatch({\n        type: \"setDraggable\",\n        value: false\n      });\n      updateCurrentPiece(moveResult);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n\n      if (moveResult && !/translate/.test(moveResult)) {\n        dispatch({\n          type: \"setTurnToMove\",\n          value: !turnToMove\n        });\n        socket.emit(\"opponentMove\", moveResult, [curRow, curCol]);\n        setMoveTimer(false, false, dispatch);\n      }\n    }\n  };\n\n  const handleMouseMove = event => {\n    const svg = svgRef.current;\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    let moveResult = null;\n    const [curRow, curCol] = currentPiece.position;\n    const newCol = Math.floor(x / currentPiece.width);\n    const newRow = Math.floor(y / currentPiece.width);\n    const canMove = currentPiece.canMoveToNewPosition(newRow, newCol, board);\n    if (turnToMove && canMove && !/translate/.test(canMove)) moveResult = currentPiece.setPosition(canMove, newRow, newCol);\n    updateBoard(moveResult, [curRow, curCol]);\n    dispatch({\n      type: \"setTargetDisplay\",\n      value: \"none\"\n    });\n    dispatch({\n      type: \"setCurrentPiece\",\n      value: null\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: [...board]\n    });\n\n    if (moveResult && !/translate/.test(moveResult)) {\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      });\n      socket.emit(\"opponentMove\", moveResult, [curRow, curCol]);\n      setMoveTimer(false, false, dispatch);\n    }\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  const constructNewPiecesWidth = width => {\n    const newBoard = board.map(row => {\n      const newRow = row.map(piece => {\n        if (piece) {\n          const [row, col] = piece.position;\n          piece.width = width;\n          piece.translate = `translate(${width * col}, ${width * row})`;\n          return piece;\n        }\n\n        return 0;\n      });\n      return newRow;\n    });\n    return newBoard;\n  };\n\n  const handleResize = () => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: constructNewPiecesWidth(width / 9)\n    });\n  };\n\n  useEffect(() => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: constructNewPiecesWidth(width / 9)\n    });\n\n    window.ondragstart = () => false;\n  }, []);\n  useEffect(() => {\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    window.onresize = handleResize;\n    socket.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\n    });\n    return () => {\n      window.onmouseup = null;\n      window.onmousemove = null;\n      window.onresize = null;\n      socket.removeAllListeners(\"move\");\n    };\n  });\n  useEffect(() => {\n    if (turnToMove) {\n      const lostReason = PieceClass.isLost(board, side[1]);\n\n      if (lostReason) {\n        const listItemRef = /*#__PURE__*/React.createRef();\n        dispatch({\n          type: \"setGameResult\",\n          value: \"Lose\"\n        });\n        dispatch({\n          type: \"setMessage\",\n          value: {\n            type: \"game result message\",\n            winner: `${opponentInfo.playername} Won - `,\n            reason: lostReason,\n            className: \"game-message\",\n            ref: listItemRef\n          }\n        });\n        setMoveTimer(null, true, dispatch);\n        socket.emit(\"gameFinish\", [\"Won\", lostReason]);\n      }\n    }\n  }, [turnToMove]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: boardSize[0],\n    height: boardSize[1],\n    onClick: handleClick,\n    style: {\n      backgroundImage: 'url(\"/images/Board/board.jpg\")'\n    },\n    ref: svgRef,\n    children: [/*#__PURE__*/_jsxDEV(\"image\", {\n      href: \"/images/Target_Icon/target.gif\",\n      width: boardSize[0] / 9 - 3,\n      height: boardSize[0] / 9 - 3,\n      style: {\n        display: targetDisplay\n      },\n      transform: targetTranslate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      width: boardSize[0] / 9 - 3,\n      height: boardSize[0] / 9 - 3,\n      style: {\n        display: warningDisplay\n      },\n      transform: warningTranslate,\n      fill: \"brown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Piece, {\n      board: board,\n      handleMouseDown: handleMouseDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"6HZ5O7CjwutqKAnyT0gNQicYRNM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Board;\nexport default _c2 = /*#__PURE__*/React.memo(Board);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Board/Board.jsx"],"names":["React","useEffect","useRef","useContext","useState","Piece","useSelector","useDispatch","getSVGLocation","SocketContext","SetMoveTimerContext","PieceClass","Board","dispatch","board","state","boardState","targetDisplay","boardSize","currentPiece","getClicked","draggable","warningDisplay","setWarningDisplay","warningTranslate","setWarningTranslate","side","svgRef","targetTranslate","turnToMove","socket","setMoveTimer","opponentInfo","gameState","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","curRow","curCol","position","type","value","updateBoard","moveResult","test","capture","newRow","newCol","setTimeout","handleOpponentMove","animateMove","updateCurrentPiece","handleMouseUp","svg","current","x","y","clientX","clientY","Math","floor","width","canMove","canMoveToNewPosition","setPosition","emit","handleMouseMove","move","moveOnClick","handleClick","target","constructNewPiecesWidth","newBoard","map","piece","handleResize","document","querySelector","offsetWidth","window","ondragstart","onmousemove","onmouseup","onresize","on","removeAllListeners","lostReason","isLost","listItemRef","createRef","winner","playername","reason","className","ref","backgroundImage","display","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport Piece from \"./Piece/Piece.jsx\";\r\nimport \"./Board.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getSVGLocation from \"./getSVGLocation.js\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../../App/context.js\";\r\nimport PieceClass from \"../../../../pieces/piece.js\";\r\n\r\nfunction Board() {\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => state.boardState.board);\r\n  const targetDisplay = useSelector((state) => state.boardState.targetDisplay);\r\n  const boardSize = useSelector((state) => state.boardState.boardSize);\r\n  const currentPiece = useSelector((state) => state.boardState.currentPiece);\r\n  const getClicked = useSelector((state) => state.boardState.getClicked);\r\n  const draggable = useSelector((state) => state.boardState.draggable);\r\n  const [warningDisplay, setWarningDisplay] = useState(\"none\");\r\n  const [warningTranslate, setWarningTranslate] = useState(\"translate(0, 0)\");\r\n  const side = useSelector((state) => state.boardState.side);\r\n  const svgRef = useRef();\r\n  const targetTranslate = useSelector(\r\n    (state) => state.boardState.targetTranslate\r\n  );\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n\r\n  const opponentInfo = useSelector((state) => state.gameState.opponentInfo);\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) {\r\n          dispatch({ type: \"setGetClicked\", value: false });\r\n        }\r\n      }\r\n      dispatch({ type: \"setTargetDisplay\", value: \"inline\" });\r\n      dispatch({ type: \"setDraggable\", value: true });\r\n      dispatch({ type: \"setTargetTranslate\", value: translate });\r\n      dispatch({ type: \"setCurrentPiece\", value: board[row][col] });\r\n    }\r\n  };\r\n\r\n  const updateBoard = (moveResult, [curRow, curCol]) => {\r\n    if (moveResult && !/translate/.test(moveResult)) {\r\n      const [capture, newRow, newCol] = moveResult;\r\n      if (capture) {\r\n        dispatch({ type: \"setCapturedPieces\", value: board[newRow][newCol] });\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    } else if (moveResult) {\r\n      setTimeout(() => {\r\n        setWarningDisplay(\"none\");\r\n      }, 400);\r\n      setWarningDisplay(\"inline\");\r\n      setWarningTranslate(moveResult);\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\r\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\r\n      setMoveTimer(true, false, dispatch);\r\n    }\r\n  };\r\n\r\n  const updateCurrentPiece = (moveResult) => {\r\n    if ((moveResult && !/translate/.test(moveResult)) || getClicked) {\r\n      dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n      dispatch({ type: \"setCurrentPiece\", value: null });\r\n      dispatch({ type: \"setGetClicked\", value: false });\r\n    } else {\r\n      dispatch({ type: \"setGetClicked\", value: true });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      let moveResult = null;\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      const newCol = Math.floor(x / currentPiece.width);\r\n      const newRow = Math.floor(y / currentPiece.width);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const canMove = currentPiece.canMoveToNewPosition(newRow, newCol, board);\r\n      if (turnToMove && canMove && !/translate/.test(canMove))\r\n        moveResult = currentPiece.setPosition(canMove, newRow, newCol);\r\n      else if (/translate/.test(canMove)) moveResult = canMove;\r\n      updateBoard(moveResult, [curRow, curCol]);\r\n      dispatch({ type: \"setDraggable\", value: false });\r\n      updateCurrentPiece(moveResult);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      if (moveResult && !/translate/.test(moveResult)) {\r\n        dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n        socket.emit(\"opponentMove\", moveResult, [curRow, curCol]);\r\n        setMoveTimer(false, false, dispatch);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const svg = svgRef.current;\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    let moveResult = null;\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newCol = Math.floor(x / currentPiece.width);\r\n    const newRow = Math.floor(y / currentPiece.width);\r\n    const canMove = currentPiece.canMoveToNewPosition(newRow, newCol, board);\r\n    if (turnToMove && canMove && !/translate/.test(canMove))\r\n      moveResult = currentPiece.setPosition(canMove, newRow, newCol);\r\n    updateBoard(moveResult, [curRow, curCol]);\r\n    dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n    dispatch({ type: \"setCurrentPiece\", value: null });\r\n    dispatch({ type: \"setBoard\", value: [...board] });\r\n    if (moveResult && !/translate/.test(moveResult)) {\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      socket.emit(\"opponentMove\", moveResult, [curRow, curCol]);\r\n      setMoveTimer(false, false, dispatch);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  const constructNewPiecesWidth = (width) => {\r\n    const newBoard = board.map((row) => {\r\n      const newRow = row.map((piece) => {\r\n        if (piece) {\r\n          const [row, col] = piece.position;\r\n          piece.width = width;\r\n          piece.translate = `translate(${width * col}, ${width * row})`;\r\n          return piece;\r\n        }\r\n        return 0;\r\n      });\r\n      return newRow;\r\n    });\r\n    return newBoard;\r\n  };\r\n\r\n  const handleResize = () => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: constructNewPiecesWidth(width / 9),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({ type: \"setBoardSize\", value: [width, width / (521 / 577)] });\r\n    dispatch({ type: \"setBoard\", value: constructNewPiecesWidth(width / 9) });\r\n    window.ondragstart = () => false;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    window.onresize = handleResize;\r\n    socket.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n\r\n    return () => {\r\n      window.onmouseup = null;\r\n      window.onmousemove = null;\r\n      window.onresize = null;\r\n      socket.removeAllListeners(\"move\");\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (turnToMove) {\r\n      const lostReason = PieceClass.isLost(board, side[1]);\r\n      if (lostReason) {\r\n        const listItemRef = React.createRef();\r\n        dispatch({ type: \"setGameResult\", value: \"Lose\" });\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            type: \"game result message\",\r\n            winner: `${opponentInfo.playername} Won - `,\r\n            reason: lostReason,\r\n            className: \"game-message\",\r\n            ref: listItemRef,\r\n          },\r\n        });\r\n        setMoveTimer(null, true, dispatch);\r\n        socket.emit(\"gameFinish\", [\"Won\", lostReason]);\r\n      }\r\n    }\r\n  }, [turnToMove]);\r\n\r\n  return (\r\n    <svg\r\n      width={boardSize[0]}\r\n      height={boardSize[1]}\r\n      onClick={handleClick}\r\n      style={{\r\n        backgroundImage: 'url(\"/images/Board/board.jpg\")',\r\n      }}\r\n      ref={svgRef}\r\n    >\r\n      <image\r\n        href=\"/images/Target_Icon/target.gif\"\r\n        width={boardSize[0] / 9 - 3}\r\n        height={boardSize[0] / 9 - 3}\r\n        style={{ display: targetDisplay }}\r\n        transform={targetTranslate}\r\n      ></image>\r\n      <rect\r\n        width={boardSize[0] / 9 - 3}\r\n        height={boardSize[0] / 9 - 3}\r\n        style={{ display: warningDisplay }}\r\n        transform={warningTranslate}\r\n        fill=\"brown\"\r\n      ></rect>\r\n      <Piece board={board} handleMouseDown={handleMouseDown} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default React.memo(Board);\r\n"]},"metadata":{},"sourceType":"module"}