{"ast":null,"code":"import React from \"react\";\nimport { io } from \"socket.io-client\";\nconst socket = io(\"http://localhost:8080/play\", {\n  autoConnect: false\n});\nconst SocketContext = /*#__PURE__*/React.createContext();\nconst SetMoveTimerContext = /*#__PURE__*/React.createContext();\nconst AuthenticateUserContext = /*#__PURE__*/React.createContext();\n\nconst authenticateUser = (dispatch, user) => {\n  if (user.guest) socket.disconnect();\n  dispatch({\n    type: \"setPlayerInfo\",\n    value: user\n  });\n  dispatch({\n    type: \"setIsAuthenticated\",\n    value: !user.guest ? true : \"guest\"\n  });\n  socket.auth = {\n    player: {\n      playername: user.username,\n      guest: user.guest,\n      photo: user.photo\n    }\n  };\n  socket.connect();\n};\n\nconst setMoveTimer = (playerTurn, gameFinish, dispatch) => {\n  socket.removeAllListeners(\"oneSecondPass\");\n\n  if (gameFinish) {\n    socket.emit(\"setTimer\", false, () => {});\n    dispatch({\n      type: \"setPause\",\n      value: null\n    });\n    dispatch({\n      type: \"setPauseTime\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setTurnToMove\",\n      value: false\n    });\n    return;\n  }\n\n  if (playerTurn) dispatch({\n    type: \"setOpponentTimeLeftToMove\",\n    value: \"restart\"\n  });else dispatch({\n    type: \"setPlayerTimeLeftToMove\",\n    value: \"restart\"\n  });\n  socket.emit(\"startTimer\", true, () => {\n    console.log(\"callback is called\");\n    if (playerTurn) dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: null\n    });else dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: null\n    });\n  }); // socket.on(\"oneSecondPass\", () => {\n  //   if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\n  //   else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\n  // });\n};\n\nexport { SocketContext, SetMoveTimerContext, setMoveTimer, socket, AuthenticateUserContext, authenticateUser };","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/context.js"],"names":["React","io","socket","autoConnect","SocketContext","createContext","SetMoveTimerContext","AuthenticateUserContext","authenticateUser","dispatch","user","guest","disconnect","type","value","auth","player","playername","username","photo","connect","setMoveTimer","playerTurn","gameFinish","removeAllListeners","emit","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:8080/play\", { autoConnect: false });\r\nconst SocketContext = React.createContext();\r\nconst SetMoveTimerContext = React.createContext();\r\nconst AuthenticateUserContext = React.createContext();\r\n\r\nconst authenticateUser = (dispatch, user) => {\r\n  if (user.guest) socket.disconnect();\r\n  dispatch({ type: \"setPlayerInfo\", value: user });\r\n  dispatch({ type: \"setIsAuthenticated\", value: !user.guest ? true : \"guest\" });\r\n  socket.auth = {\r\n    player: {\r\n      playername: user.username,\r\n      guest: user.guest,\r\n      photo: user.photo,\r\n    },\r\n  };\r\n  socket.connect();\r\n};\r\n\r\nconst setMoveTimer = (playerTurn, gameFinish, dispatch) => {\r\n  socket.removeAllListeners(\"oneSecondPass\");\r\n  if (gameFinish) {\r\n    socket.emit(\"setTimer\", false, () => {});\r\n    dispatch({ type: \"setPause\", value: null });\r\n    dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setTurnToMove\", value: false });\r\n    return;\r\n  }\r\n  if (playerTurn)\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n  else dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n  socket.emit(\"startTimer\", true, () => {\r\n    console.log(\"callback is called\");\r\n    if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n    else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n  });\r\n\r\n  // socket.on(\"oneSecondPass\", () => {\r\n  //   if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n  //   else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n  // });\r\n};\r\n\r\nexport {\r\n  SocketContext,\r\n  SetMoveTimerContext,\r\n  setMoveTimer,\r\n  socket,\r\n  AuthenticateUserContext,\r\n  authenticateUser,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}