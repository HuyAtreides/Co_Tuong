{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport initializeBoard from \"../initializeBoard\";\nimport Piece from \"./piece.jsx\";\nimport \"./board.scss\";\nimport getSVGLocation from \"../getSVGLocation.js\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const [board, setBoard] = useState(initializeBoard(520 / 9, props.side));\n  const [targetDisplay, setTargetDisplay] = useState(\"none\");\n  const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\n  const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [getClicked, setGetClicked] = useState(false);\n  const [draggable, setDraggable] = useState(false);\n  const [capturedPiece, setCapturedPiece] = useState([]);\n  const [findMatch, setFindMatch] = useState();\n  const socketRef = useRef();\n  const [turnToMove, setTurnToMove] = useState(false);\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    console.log([row, col]);\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n        if (row !== curRow || curCol !== col) setGetClicked(false);\n      }\n\n      setTargetDisplay(\"inline\");\n      setDraggable(true);\n      setTargetTranslate(translate);\n      setCurrentPiece(board[row][col]);\n    }\n  };\n\n  const updateBoard = (newPostion, [curRow, curCol]) => {\n    if (newPostion) {\n      const [capture, newRow, newCol] = newPostion;\n\n      if (capture) {\n        capturedPiece.push(board[newRow][newCol]);\n        setCapturedPiece([...capturedPiece]);\n      }\n\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    }\n  };\n\n  const handleOpponentMove = async ([curRow, curCol], [newRow, newCol]) => {\n    if (board[curRow][curCol]) {\n      const finished = await board[curRow][curCol].animateMove([newRow, newCol], board, setBoard);\n\n      if (finished) {\n        const tmp = board[curRow][curCol];\n        board[curRow][curCol] = 0;\n        board[newRow][newCol] = tmp;\n        setBoard([...board]);\n      } // board.forEach((row) => {\n      //   const t = row.map((e) => (e === 0 ? 0 : 1));\n      //   console.log(...t);\n      // });\n      // console.log();\n\n\n      setTurnToMove(!turnToMove);\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n      const [curRow, curCol] = currentPiece.position;\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n      updateBoard(newPosition, [curRow, curCol]);\n      setDraggable(false);\n\n      if (!getClicked) {\n        setGetClicked(true);\n      } else {\n        setTargetDisplay(\"none\");\n        setCurrentPiece(null);\n        setGetClicked(false);\n      }\n\n      setBoard([...board]);\n\n      if (newPosition) {\n        setTurnToMove(!turnToMove);\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n      }\n    }\n  };\n\n  const handleMouseMove = event => {\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      setBoard([...board]);\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    const [curRow, curCol] = currentPiece.position;\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n    updateBoard(newPosition, [curRow, curCol]);\n    setTargetDisplay(\"none\");\n    setCurrentPiece(null);\n    setBoard([...board]);\n\n    if (newPosition) {\n      setTurnToMove(!turnToMove);\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n    }\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  useEffect(() => {\n    const width = +window.innerWidth;\n    const boardWidth = width * (90 / 100);\n\n    if (width < 525) {\n      setBoardSize([boardWidth, boardWidth / (521 / 577)]);\n      setBoard(initializeBoard(boardWidth / 9, props.side));\n    } else {\n      setBoardSize([520, 520 / (521 / 577)]);\n      setBoard(initializeBoard(520 / 9, props.side));\n    }\n\n    window.ondragstart = () => false;\n\n    socketRef.current = io(\"http://localhost:8080/play\");\n  }, []);\n  useEffect(() => {\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    socketRef.current.on(\"foundMatch\", (opponentId, firstMove) => {\n      setTurnToMove(firstMove);\n      socketRef.current.opponentId = opponentId;\n      setFindMatch(`foundMatch ${opponentId}`);\n    });\n    socketRef.current.on(\"timeout\", () => {\n      setFindMatch(`no players online`);\n    });\n    socketRef.current.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\n    });\n  });\n\n  const startPlay = () => {\n    setFindMatch(\"finding\");\n    socketRef.current.emit(\"findMatch\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: boardSize[0],\n      height: boardSize[1],\n      onClick: handleClick,\n      style: {\n        backgroundImage: \"url(/images/Board/board.jpg)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"image\", {\n        href: \"/images/Target_Icon/target.gif\",\n        width: boardSize[0] / 9,\n        height: boardSize[0] / 9,\n        style: {\n          display: targetDisplay\n        },\n        transform: targetTranslate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Piece, {\n        board: board,\n        handleMouseDown: handleMouseDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: findMatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startPlay,\n      children: \"play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"1aK/WuPf3Zxnz7vYvfA2UE7sLcM=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/board.jsx"],"names":["React","useState","useEffect","useRef","initializeBoard","Piece","getSVGLocation","io","Board","props","board","setBoard","side","targetDisplay","setTargetDisplay","targetTranslate","setTargetTranslate","boardSize","setBoardSize","currentPiece","setCurrentPiece","getClicked","setGetClicked","draggable","setDraggable","capturedPiece","setCapturedPiece","findMatch","setFindMatch","socketRef","turnToMove","setTurnToMove","handleMouseDown","event","elementId","currentTarget","id","row","col","console","log","translate","curRow","curCol","position","updateBoard","newPostion","capture","newRow","newCol","push","handleOpponentMove","finished","animateMove","tmp","handleMouseUp","x","y","clientX","clientY","newPosition","setNewPosition","current","emit","handleMouseMove","move","moveOnClick","handleClick","target","width","window","innerWidth","boardWidth","ondragstart","onmousemove","onmouseup","on","opponentId","firstMove","startPlay","backgroundImage","display"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,cAAP;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,SAASC,EAAT,QAAmB,kBAAnB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACG,eAAe,CAAC,MAAM,CAAP,EAAUK,KAAK,CAACG,IAAhB,CAAhB,CAAlC;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,MAAD,CAAlD;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,iBAAD,CAAtD;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,CAAC,GAAD,EAAM,OAAO,MAAM,GAAb,CAAN,CAAD,CAA1C;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACwB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,EAA1C;AACA,QAAM4B,SAAS,GAAG1B,MAAM,EAAxB;AACA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAM+B,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,SAAS,GAAGD,KAAK,CAACE,aAAN,CAAoBC,EAAtC;AACA,UAAM,CAACC,GAAD,EAAMC,GAAN,IAAa,CAAC,CAACJ,SAAS,CAAC,CAAD,CAAX,EAAgB,CAACA,SAAS,CAAC,CAAD,CAA1B,CAAnB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACH,GAAD,EAAMC,GAAN,CAAZ;AACA,UAAMG,SAAS,GAAG/B,KAAK,CAAC2B,GAAD,CAAL,CAAWC,GAAX,EAAgBG,SAAlC;;AACA,QAAI,CAACtB,YAAD,IAAiBT,KAAK,CAAC2B,GAAD,CAAL,CAAWC,GAAX,EAAgB1B,IAAhB,KAAyBO,YAAY,CAACP,IAA3D,EAAiE;AAC/D,UAAIO,YAAJ,EAAkB;AAChB,cAAM,CAACuB,MAAD,EAASC,MAAT,IAAmBxB,YAAY,CAACyB,QAAtC;AACA,YAAIP,GAAG,KAAKK,MAAR,IAAkBC,MAAM,KAAKL,GAAjC,EAAsChB,aAAa,CAAC,KAAD,CAAb;AACvC;;AACDR,MAAAA,gBAAgB,CAAC,QAAD,CAAhB;AACAU,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAR,MAAAA,kBAAkB,CAACyB,SAAD,CAAlB;AACArB,MAAAA,eAAe,CAACV,KAAK,CAAC2B,GAAD,CAAL,CAAWC,GAAX,CAAD,CAAf;AACD;AACF,GAfD;;AAiBA,QAAMO,WAAW,GAAG,CAACC,UAAD,EAAa,CAACJ,MAAD,EAASC,MAAT,CAAb,KAAkC;AACpD,QAAIG,UAAJ,EAAgB;AACd,YAAM,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,IAA4BH,UAAlC;;AACA,UAAIC,OAAJ,EAAa;AACXtB,QAAAA,aAAa,CAACyB,IAAd,CAAmBxC,KAAK,CAACsC,MAAD,CAAL,CAAcC,MAAd,CAAnB;AACAvB,QAAAA,gBAAgB,CAAC,CAAC,GAAGD,aAAJ,CAAD,CAAhB;AACD;;AACDf,MAAAA,KAAK,CAACgC,MAAD,CAAL,CAAcC,MAAd,IAAwB,CAAxB;AACAjC,MAAAA,KAAK,CAACsC,MAAD,CAAL,CAAcC,MAAd,IAAwB9B,YAAxB;AACD;AACF,GAVD;;AAYA,QAAMgC,kBAAkB,GAAG,OAAO,CAACT,MAAD,EAASC,MAAT,CAAP,EAAyB,CAACK,MAAD,EAASC,MAAT,CAAzB,KAA8C;AACvE,QAAIvC,KAAK,CAACgC,MAAD,CAAL,CAAcC,MAAd,CAAJ,EAA2B;AACzB,YAAMS,QAAQ,GAAG,MAAM1C,KAAK,CAACgC,MAAD,CAAL,CAAcC,MAAd,EAAsBU,WAAtB,CACrB,CAACL,MAAD,EAASC,MAAT,CADqB,EAErBvC,KAFqB,EAGrBC,QAHqB,CAAvB;;AAKA,UAAIyC,QAAJ,EAAc;AACZ,cAAME,GAAG,GAAG5C,KAAK,CAACgC,MAAD,CAAL,CAAcC,MAAd,CAAZ;AACAjC,QAAAA,KAAK,CAACgC,MAAD,CAAL,CAAcC,MAAd,IAAwB,CAAxB;AACAjC,QAAAA,KAAK,CAACsC,MAAD,CAAL,CAAcC,MAAd,IAAwBK,GAAxB;AACA3C,QAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD,OAXwB,CAazB;AACA;AACA;AACA;AACA;;;AACAqB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD;AACF,GArBD;;AAuBA,QAAMyB,aAAa,GAAItB,KAAD,IAAW;AAC/B,QAAId,YAAJ,EAAkB;AAChB,YAAM,CAACqC,CAAD,EAAIC,CAAJ,IAASnD,cAAc,CAAC,CAAC2B,KAAK,CAACyB,OAAR,EAAiB,CAACzB,KAAK,CAAC0B,OAAxB,CAA7B;AACA,YAAM,CAACjB,MAAD,EAASC,MAAT,IAAmBxB,YAAY,CAACyB,QAAtC;AACA,YAAMgB,WAAW,GAAGzC,YAAY,CAAC0C,cAAb,CAA4BL,CAA5B,EAA+BC,CAA/B,EAAkC/C,KAAlC,EAAyCoB,UAAzC,CAApB;AACAe,MAAAA,WAAW,CAACe,WAAD,EAAc,CAAClB,MAAD,EAASC,MAAT,CAAd,CAAX;AACAnB,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAI,CAACH,UAAL,EAAiB;AACfC,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAFD,MAEO;AACLR,QAAAA,gBAAgB,CAAC,MAAD,CAAhB;AACAM,QAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;;AACDX,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;;AAEA,UAAIkD,WAAJ,EAAiB;AACf7B,QAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAD,QAAAA,SAAS,CAACiC,OAAV,CAAkBC,IAAlB,CAAuB,cAAvB,EAAuCH,WAAvC,EAAoD,CAAClB,MAAD,EAASC,MAAT,CAApD;AACD;AACF;AACF,GArBD;;AAuBA,QAAMqB,eAAe,GAAI/B,KAAD,IAAW;AACjC,UAAM,CAACuB,CAAD,EAAIC,CAAJ,IAASnD,cAAc,CAAC,CAAC2B,KAAK,CAACyB,OAAR,EAAiB,CAACzB,KAAK,CAAC0B,OAAxB,CAA7B;;AACA,QAAIH,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGvC,SAAS,CAAC,CAAD,CAAvB,IAA8BwC,CAAC,IAAI,CAAnC,IAAwCA,CAAC,GAAGxC,SAAS,CAAC,CAAD,CAArD,IAA4DM,SAAhE,EAA2E;AACzEJ,MAAAA,YAAY,CAAC8C,IAAb,CAAkBT,CAAlB,EAAqBC,CAArB,EAAwB/C,KAAxB;AACAC,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD;AACF,GAND;;AAQA,QAAMwD,WAAW,GAAG,CAAC/C,YAAD,EAAeqC,CAAf,EAAkBC,CAAlB,KAAwB;AAC1C,UAAM,CAACf,MAAD,EAASC,MAAT,IAAmBxB,YAAY,CAACyB,QAAtC;AACA,UAAMgB,WAAW,GAAGzC,YAAY,CAAC0C,cAAb,CAA4BL,CAA5B,EAA+BC,CAA/B,EAAkC/C,KAAlC,EAAyCoB,UAAzC,CAApB;AACAe,IAAAA,WAAW,CAACe,WAAD,EAAc,CAAClB,MAAD,EAASC,MAAT,CAAd,CAAX;AACA7B,IAAAA,gBAAgB,CAAC,MAAD,CAAhB;AACAM,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAT,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;;AACA,QAAIkD,WAAJ,EAAiB;AACf7B,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAD,MAAAA,SAAS,CAACiC,OAAV,CAAkBC,IAAlB,CAAuB,cAAvB,EAAuCH,WAAvC,EAAoD,CAAClB,MAAD,EAASC,MAAT,CAApD;AACD;AACF,GAXD;;AAaA,QAAMwB,WAAW,GAAIlC,KAAD,IAAW;AAC7B,QAAId,YAAJ,EAAkB;AAChB,YAAM,CAACqC,CAAD,EAAIC,CAAJ,IAASnD,cAAc,CAAC,CAAC2B,KAAK,CAACyB,OAAR,EAAiB,CAACzB,KAAK,CAAC0B,OAAxB,CAA7B;AAEA,UAAI,CAAC1B,KAAK,CAACmC,MAAN,CAAahC,EAAlB,EAAsB8B,WAAW,CAAC/C,YAAD,EAAeqC,CAAf,EAAkBC,CAAlB,CAAX;AACvB;AACF,GAND;;AAQAvD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmE,KAAK,GAAG,CAACC,MAAM,CAACC,UAAtB;AACA,UAAMC,UAAU,GAAGH,KAAK,IAAI,KAAK,GAAT,CAAxB;;AACA,QAAIA,KAAK,GAAG,GAAZ,EAAiB;AACfnD,MAAAA,YAAY,CAAC,CAACsD,UAAD,EAAaA,UAAU,IAAI,MAAM,GAAV,CAAvB,CAAD,CAAZ;AACA7D,MAAAA,QAAQ,CAACP,eAAe,CAACoE,UAAU,GAAG,CAAd,EAAiB/D,KAAK,CAACG,IAAvB,CAAhB,CAAR;AACD,KAHD,MAGO;AACLM,MAAAA,YAAY,CAAC,CAAC,GAAD,EAAM,OAAO,MAAM,GAAb,CAAN,CAAD,CAAZ;AACAP,MAAAA,QAAQ,CAACP,eAAe,CAAC,MAAM,CAAP,EAAUK,KAAK,CAACG,IAAhB,CAAhB,CAAR;AACD;;AACD0D,IAAAA,MAAM,CAACG,WAAP,GAAqB,MAAM,KAA3B;;AACA5C,IAAAA,SAAS,CAACiC,OAAV,GAAoBvD,EAAE,CAAC,4BAAD,CAAtB;AACD,GAZQ,EAYN,EAZM,CAAT;AAcAL,EAAAA,SAAS,CAAC,MAAM;AACdoE,IAAAA,MAAM,CAACI,WAAP,GAAqBV,eAArB;AACAM,IAAAA,MAAM,CAACK,SAAP,GAAmBpB,aAAnB;AACA1B,IAAAA,SAAS,CAACiC,OAAV,CAAkBc,EAAlB,CAAqB,YAArB,EAAmC,CAACC,UAAD,EAAaC,SAAb,KAA2B;AAC5D/C,MAAAA,aAAa,CAAC+C,SAAD,CAAb;AACAjD,MAAAA,SAAS,CAACiC,OAAV,CAAkBe,UAAlB,GAA+BA,UAA/B;AACAjD,MAAAA,YAAY,CAAE,cAAaiD,UAAW,EAA1B,CAAZ;AACD,KAJD;AAMAhD,IAAAA,SAAS,CAACiC,OAAV,CAAkBc,EAAlB,CAAqB,SAArB,EAAgC,MAAM;AACpChD,MAAAA,YAAY,CAAE,mBAAF,CAAZ;AACD,KAFD;AAIAC,IAAAA,SAAS,CAACiC,OAAV,CAAkBc,EAAlB,CAAqB,MAArB,EAA6B,CAAC,CAAClC,MAAD,EAASC,MAAT,CAAD,EAAmB,CAACK,MAAD,EAASC,MAAT,CAAnB,KAAwC;AACnEE,MAAAA,kBAAkB,CAAC,CAACT,MAAD,EAASC,MAAT,CAAD,EAAmB,CAACK,MAAD,EAASC,MAAT,CAAnB,CAAlB;AACD,KAFD;AAGD,GAhBQ,CAAT;;AAkBA,QAAM8B,SAAS,GAAG,MAAM;AACtBnD,IAAAA,YAAY,CAAC,SAAD,CAAZ;AACAC,IAAAA,SAAS,CAACiC,OAAV,CAAkBC,IAAlB,CAAuB,WAAvB;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE;AACE,MAAA,KAAK,EAAE9C,SAAS,CAAC,CAAD,CADlB;AAEE,MAAA,MAAM,EAAEA,SAAS,CAAC,CAAD,CAFnB;AAGE,MAAA,OAAO,EAAEkD,WAHX;AAIE,MAAA,KAAK,EAAE;AACLa,QAAAA,eAAe,EAAE;AADZ,OAJT;AAAA,8BAQE;AACE,QAAA,IAAI,EAAC,gCADP;AAEE,QAAA,KAAK,EAAE/D,SAAS,CAAC,CAAD,CAAT,GAAe,CAFxB;AAGE,QAAA,MAAM,EAAEA,SAAS,CAAC,CAAD,CAAT,GAAe,CAHzB;AAIE,QAAA,KAAK,EAAE;AAAEgE,UAAAA,OAAO,EAAEpE;AAAX,SAJT;AAKE,QAAA,SAAS,EAAEE;AALb;AAAA;AAAA;AAAA;AAAA,cARF,eAeE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEL,KAAd;AAAqB,QAAA,eAAe,EAAEsB;AAAtC;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAkBE;AAAA,gBAAOL;AAAP;AAAA;AAAA;AAAA;AAAA,YAlBF,eAmBE;AAAQ,MAAA,OAAO,EAAEoD,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAjLQvE,K;;KAAAA,K;AAmLT,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport initializeBoard from \"../initializeBoard\";\r\nimport Piece from \"./piece.jsx\";\r\nimport \"./board.scss\";\r\nimport getSVGLocation from \"../getSVGLocation.js\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nfunction Board(props) {\r\n  const [board, setBoard] = useState(initializeBoard(520 / 9, props.side));\r\n  const [targetDisplay, setTargetDisplay] = useState(\"none\");\r\n  const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\r\n  const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\r\n  const [currentPiece, setCurrentPiece] = useState(null);\r\n  const [getClicked, setGetClicked] = useState(false);\r\n  const [draggable, setDraggable] = useState(false);\r\n  const [capturedPiece, setCapturedPiece] = useState([]);\r\n  const [findMatch, setFindMatch] = useState();\r\n  const socketRef = useRef();\r\n  const [turnToMove, setTurnToMove] = useState(false);\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    console.log([row, col]);\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) setGetClicked(false);\r\n      }\r\n      setTargetDisplay(\"inline\");\r\n      setDraggable(true);\r\n      setTargetTranslate(translate);\r\n      setCurrentPiece(board[row][col]);\r\n    }\r\n  };\r\n\r\n  const updateBoard = (newPostion, [curRow, curCol]) => {\r\n    if (newPostion) {\r\n      const [capture, newRow, newCol] = newPostion;\r\n      if (capture) {\r\n        capturedPiece.push(board[newRow][newCol]);\r\n        setCapturedPiece([...capturedPiece]);\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = async ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol]) {\r\n      const finished = await board[curRow][curCol].animateMove(\r\n        [newRow, newCol],\r\n        board,\r\n        setBoard\r\n      );\r\n      if (finished) {\r\n        const tmp = board[curRow][curCol];\r\n        board[curRow][curCol] = 0;\r\n        board[newRow][newCol] = tmp;\r\n        setBoard([...board]);\r\n      }\r\n\r\n      // board.forEach((row) => {\r\n      //   const t = row.map((e) => (e === 0 ? 0 : 1));\r\n      //   console.log(...t);\r\n      // });\r\n      // console.log();\r\n      setTurnToMove(!turnToMove);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n      updateBoard(newPosition, [curRow, curCol]);\r\n      setDraggable(false);\r\n      if (!getClicked) {\r\n        setGetClicked(true);\r\n      } else {\r\n        setTargetDisplay(\"none\");\r\n        setCurrentPiece(null);\r\n        setGetClicked(false);\r\n      }\r\n      setBoard([...board]);\r\n\r\n      if (newPosition) {\r\n        setTurnToMove(!turnToMove);\r\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      setBoard([...board]);\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n    updateBoard(newPosition, [curRow, curCol]);\r\n    setTargetDisplay(\"none\");\r\n    setCurrentPiece(null);\r\n    setBoard([...board]);\r\n    if (newPosition) {\r\n      setTurnToMove(!turnToMove);\r\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = +window.innerWidth;\r\n    const boardWidth = width * (90 / 100);\r\n    if (width < 525) {\r\n      setBoardSize([boardWidth, boardWidth / (521 / 577)]);\r\n      setBoard(initializeBoard(boardWidth / 9, props.side));\r\n    } else {\r\n      setBoardSize([520, 520 / (521 / 577)]);\r\n      setBoard(initializeBoard(520 / 9, props.side));\r\n    }\r\n    window.ondragstart = () => false;\r\n    socketRef.current = io(\"http://localhost:8080/play\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    socketRef.current.on(\"foundMatch\", (opponentId, firstMove) => {\r\n      setTurnToMove(firstMove);\r\n      socketRef.current.opponentId = opponentId;\r\n      setFindMatch(`foundMatch ${opponentId}`);\r\n    });\r\n\r\n    socketRef.current.on(\"timeout\", () => {\r\n      setFindMatch(`no players online`);\r\n    });\r\n\r\n    socketRef.current.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n  });\r\n\r\n  const startPlay = () => {\r\n    setFindMatch(\"finding\");\r\n    socketRef.current.emit(\"findMatch\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <svg\r\n        width={boardSize[0]}\r\n        height={boardSize[1]}\r\n        onClick={handleClick}\r\n        style={{\r\n          backgroundImage: \"url(/images/Board/board.jpg)\",\r\n        }}\r\n      >\r\n        <image\r\n          href=\"/images/Target_Icon/target.gif\"\r\n          width={boardSize[0] / 9}\r\n          height={boardSize[0] / 9}\r\n          style={{ display: targetDisplay }}\r\n          transform={targetTranslate}\r\n        ></image>\r\n        <Piece board={board} handleMouseDown={handleMouseDown} />\r\n      </svg>\r\n      <span>{findMatch}</span>\r\n      <button onClick={startPlay}>play</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}