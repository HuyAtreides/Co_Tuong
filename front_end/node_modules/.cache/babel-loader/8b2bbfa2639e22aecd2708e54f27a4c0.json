{"ast":null,"code":"import Piece from \"./piece.js\";\nimport advisorRules from \"./move_rules/advisorRules.js\";\n\nclass Advisor extends Piece {\n  constructor(width, row, col, name, side) {\n    super(width, row, col, name);\n    this.moves = advisorRules;\n    this.choosenSide = side;\n  }\n\n  checkValidMove(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\n    const maxRow = this.side === this.choosenSide[0] ? 3 : 10;\n    const minRow = this.side === this.choosenSide[0] ? 0 : 7;\n    const valid = newCol >= 3 && newCol < 6 && newRow >= minRow && newRow < maxRow;\n    const existMove = this.moves.some(move => {\n      return move[0] === moveRow && move[1] === moveCol;\n    });\n    const generalInDanger = this.putGeneralInDanger(newRow, newCol, board);\n    return valid && existMove && !generalInDanger;\n  }\n\n  setNewPosition(x, y, board) {\n    const newCol = Math.floor(x / this.width);\n    const newRow = Math.floor(y / this.width);\n    const [curRow, curCol] = this.position;\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n    this.translate = `translate(${translateX}, ${translateY})`;\n\n    if (this.checkValidMove(newRow - curRow, newCol - curCol)) {\n      if (!board[newRow][newCol].side) {\n        return this.setPosition(false, newRow, newCol);\n      } else if (board[newRow][newCol].side !== board[curRow][curCol].side) {\n        return this.setPosition(true, newRow, newCol);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nexport default Advisor;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/advisor.js"],"names":["Piece","advisorRules","Advisor","constructor","width","row","col","name","side","moves","choosenSide","checkValidMove","newRow","newCol","board","curRow","curCol","position","moveRow","moveCol","maxRow","minRow","valid","existMove","some","move","generalInDanger","putGeneralInDanger","setNewPosition","x","y","Math","floor","translateX","translateY","translate","setPosition"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,MAAMC,OAAN,SAAsBF,KAAtB,CAA4B;AAC1BG,EAAAA,WAAW,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AACvC,UAAMJ,KAAN,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB;AACA,SAAKE,KAAL,GAAaR,YAAb;AACA,SAAKS,WAAL,GAAmBF,IAAnB;AACD;;AAEDG,EAAAA,cAAc,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACpC,UAAM,CAACC,MAAD,EAASC,MAAT,IAAmB,KAAKC,QAA9B;AACA,UAAM,CAACC,OAAD,EAAUC,OAAV,IAAqB,CAACP,MAAM,GAAGG,MAAV,EAAkBF,MAAM,GAAGG,MAA3B,CAA3B;AACA,UAAMI,MAAM,GAAG,KAAKZ,IAAL,KAAc,KAAKE,WAAL,CAAiB,CAAjB,CAAd,GAAoC,CAApC,GAAwC,EAAvD;AACA,UAAMW,MAAM,GAAG,KAAKb,IAAL,KAAc,KAAKE,WAAL,CAAiB,CAAjB,CAAd,GAAoC,CAApC,GAAwC,CAAvD;AACA,UAAMY,KAAK,GACTT,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAG,CAAxB,IAA6BD,MAAM,IAAIS,MAAvC,IAAiDT,MAAM,GAAGQ,MAD5D;AAEA,UAAMG,SAAS,GAAG,KAAKd,KAAL,CAAWe,IAAX,CAAiBC,IAAD,IAAU;AAC1C,aAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYP,OAAZ,IAAuBO,IAAI,CAAC,CAAD,CAAJ,KAAYN,OAA1C;AACD,KAFiB,CAAlB;AAGA,UAAMO,eAAe,GAAG,KAAKC,kBAAL,CAAwBf,MAAxB,EAAgCC,MAAhC,EAAwCC,KAAxC,CAAxB;AACA,WAAOQ,KAAK,IAAIC,SAAT,IAAsB,CAACG,eAA9B;AACD;;AAEDE,EAAAA,cAAc,CAACC,CAAD,EAAIC,CAAJ,EAAOhB,KAAP,EAAc;AAC1B,UAAMD,MAAM,GAAGkB,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,KAAKzB,KAApB,CAAf;AACA,UAAMQ,MAAM,GAAGmB,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,KAAK1B,KAApB,CAAf;AACA,UAAM,CAACW,MAAD,EAASC,MAAT,IAAmB,KAAKC,QAA9B;AACA,UAAM,CAACgB,UAAD,EAAaC,UAAb,IAA2B,CAAClB,MAAM,GAAG,KAAKZ,KAAf,EAAsBW,MAAM,GAAG,KAAKX,KAApC,CAAjC;AACA,SAAK+B,SAAL,GAAkB,aAAYF,UAAW,KAAIC,UAAW,GAAxD;;AAEA,QAAI,KAAKvB,cAAL,CAAoBC,MAAM,GAAGG,MAA7B,EAAqCF,MAAM,GAAGG,MAA9C,CAAJ,EAA2D;AACzD,UAAI,CAACF,KAAK,CAACF,MAAD,CAAL,CAAcC,MAAd,EAAsBL,IAA3B,EAAiC;AAC/B,eAAO,KAAK4B,WAAL,CAAiB,KAAjB,EAAwBxB,MAAxB,EAAgCC,MAAhC,CAAP;AACD,OAFD,MAEO,IAAIC,KAAK,CAACF,MAAD,CAAL,CAAcC,MAAd,EAAsBL,IAAtB,KAA+BM,KAAK,CAACC,MAAD,CAAL,CAAcC,MAAd,EAAsBR,IAAzD,EAA+D;AACpE,eAAO,KAAK4B,WAAL,CAAiB,IAAjB,EAAuBxB,MAAvB,EAA+BC,MAA/B,CAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AArCyB;;AAwC5B,eAAeX,OAAf","sourcesContent":["import Piece from \"./piece.js\";\r\nimport advisorRules from \"./move_rules/advisorRules.js\";\r\n\r\nclass Advisor extends Piece {\r\n  constructor(width, row, col, name, side) {\r\n    super(width, row, col, name);\r\n    this.moves = advisorRules;\r\n    this.choosenSide = side;\r\n  }\r\n\r\n  checkValidMove(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\r\n    const maxRow = this.side === this.choosenSide[0] ? 3 : 10;\r\n    const minRow = this.side === this.choosenSide[0] ? 0 : 7;\r\n    const valid =\r\n      newCol >= 3 && newCol < 6 && newRow >= minRow && newRow < maxRow;\r\n    const existMove = this.moves.some((move) => {\r\n      return move[0] === moveRow && move[1] === moveCol;\r\n    });\r\n    const generalInDanger = this.putGeneralInDanger(newRow, newCol, board);\r\n    return valid && existMove && !generalInDanger;\r\n  }\r\n\r\n  setNewPosition(x, y, board) {\r\n    const newCol = Math.floor(x / this.width);\r\n    const newRow = Math.floor(y / this.width);\r\n    const [curRow, curCol] = this.position;\r\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n    this.translate = `translate(${translateX}, ${translateY})`;\r\n\r\n    if (this.checkValidMove(newRow - curRow, newCol - curCol)) {\r\n      if (!board[newRow][newCol].side) {\r\n        return this.setPosition(false, newRow, newCol);\r\n      } else if (board[newRow][newCol].side !== board[curRow][curCol].side) {\r\n        return this.setPosition(true, newRow, newCol);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default Advisor;\r\n"]},"metadata":{},"sourceType":"module"}