{"ast":null,"code":"import horseRules from \"./move_rules/horseRules.js\";\nimport Piece from \"./piece.js\";\n\nclass Horse extends Piece {\n  constructor(width, row, col, name) {\n    super(width, row, col, name);\n    this.moves = horseRules;\n  }\n\n  setNewPosition(x, y, board, turnToMove) {\n    const newCol = Math.floor(x / this.width);\n    const newRow = Math.floor(y / this.width);\n    const [curRow, curCol] = this.position;\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n    this.translate = `translate(${translateX}, ${translateY})`;\n\n    if (turnToMove) {\n      if (this.checkValidMove(newRow, newCol, board)) {\n        if (!this.isBlocked(newRow, newCol, board)) {\n          if (!board[newRow][newCol].side) return this.setPosition(false, newRow, newCol);else if (board[newRow][newCol].side !== board[curRow][curCol].side) return this.setPosition(true, newRow, newCol);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  isBlocked(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\n\n    if (Math.abs(moveRow) === 2) {\n      return board[curRow + moveRow / 2][curCol] !== 0;\n    } else {\n      return board[curRow][curCol + moveCol / 2] !== 0;\n    }\n  }\n\n  canCaptureGeneral(board) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\n        if (board[newRow][newCol].side) if (board[newRow][newCol].side !== board[curRow][curCol].side) if (!this.isBlocked(newRow, newCol, board)) if (board[newRow][newCol].name.split(\"-\")[0] === \"general\") return true;\n      }\n    }\n  }\n\n}\n\nexport default Horse;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/horse.js"],"names":["horseRules","Piece","Horse","constructor","width","row","col","name","moves","setNewPosition","x","y","board","turnToMove","newCol","Math","floor","newRow","curRow","curCol","position","translateX","translateY","translate","checkValidMove","isBlocked","side","setPosition","moveRow","moveCol","abs","canCaptureGeneral","move","split"],"mappings":"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","sourcesContent":["import horseRules from \"./move_rules/horseRules.js\";\r\nimport Piece from \"./piece.js\";\r\n\r\nclass Horse extends Piece {\r\n  constructor(width, row, col, name) {\r\n    super(width, row, col, name);\r\n    this.moves = horseRules;\r\n  }\r\n\r\n  setNewPosition(x, y, board, turnToMove) {\r\n    const newCol = Math.floor(x / this.width);\r\n    const newRow = Math.floor(y / this.width);\r\n    const [curRow, curCol] = this.position;\r\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n    this.translate = `translate(${translateX}, ${translateY})`;\r\n    if (turnToMove) {\r\n      if (this.checkValidMove(newRow, newCol, board)) {\r\n        if (!this.isBlocked(newRow, newCol, board)) {\r\n          if (!board[newRow][newCol].side)\r\n            return this.setPosition(false, newRow, newCol);\r\n          else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n            return this.setPosition(true, newRow, newCol);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  isBlocked(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\r\n    if (Math.abs(moveRow) === 2) {\r\n      return board[curRow + moveRow / 2][curCol] !== 0;\r\n    } else {\r\n      return board[curRow][curCol + moveCol / 2] !== 0;\r\n    }\r\n  }\r\n\r\n  canCaptureGeneral(board) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\r\n        if (board[newRow][newCol].side)\r\n          if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n            if (!this.isBlocked(newRow, newCol, board))\r\n              if (board[newRow][newCol].name.split(\"-\")[0] === \"general\")\r\n                return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Horse;\r\n"]},"metadata":{},"sourceType":"module"}