{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\Board\\\\Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport Piece from \"./Piece/Piece.jsx\";\nimport \"./Board.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport getSVGLocation from \"./getSVGLocation.js\";\nimport { SocketContext, TimerContext } from \"../../../App/App.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.boardState.board);\n  const targetDisplay = useSelector(state => state.boardState.targetDisplay);\n  const boardSize = useSelector(state => state.boardState.boardSize);\n  const currentPiece = useSelector(state => state.boardState.currentPiece);\n  const getClicked = useSelector(state => state.boardState.getClicked);\n  const draggable = useSelector(state => state.boardState.draggable);\n  const turnToMove = useSelector(state => state.boardState.turnToMove);\n  const pause = useSelector(state => state.gameState.pause);\n  const side = useSelector(state => state.boardState.side);\n  const svgRef = useRef();\n  const timer = useContext(TimerContext);\n  const targetTranslate = useSelector(state => state.boardState.targetTranslate);\n  const sendGameResult = useSelector(state => state.gameState.sendGameResult);\n  const socket = useContext(SocketContext);\n  const gameResult = useSelector(state => state.gameState.gameResult);\n\n  const setTimer = (playerTurn, gameFinish) => {\n    if (gameFinish) {\n      timer.postMessage(false);\n      dispatch({\n        type: \"setOpponentTimeLeftToMove\",\n        value: \"restart\"\n      });\n      dispatch({\n        type: \"setPlayerTimeLeftToMove\",\n        value: \"restart\"\n      });\n      dispatch({\n        type: \"setTurnToMove\",\n        value: false\n      });\n      return;\n    }\n\n    if (playerTurn) dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: \"restart\"\n    });else dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: \"restart\"\n    });\n    timer.postMessage(true);\n\n    timer.onmessage = _ => {\n      if (playerTurn) dispatch({\n        type: \"setPlayerTimeLeftToMove\",\n        value: null\n      });else dispatch({\n        type: \"setOpponentTimeLeftToMove\",\n        value: null\n      });\n    };\n  };\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n\n        if (row !== curRow || curCol !== col) {\n          dispatch({\n            type: \"setGetClicked\",\n            value: false\n          });\n        }\n      }\n\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"inline\"\n      });\n      dispatch({\n        type: \"setDraggable\",\n        value: true\n      });\n      dispatch({\n        type: \"setTargetTranslate\",\n        value: translate\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: board[row][col]\n      });\n    }\n  };\n\n  const updateBoard = (newPostion, [curRow, curCol]) => {\n    if (newPostion) {\n      const [capture, newRow, newCol] = newPostion;\n\n      if (capture) {\n        dispatch({\n          type: \"setCapturedPieces\",\n          value: board[newRow][newCol]\n        });\n      }\n\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    }\n  };\n\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\n      setTimer(true, false);\n    }\n  };\n\n  const updateCurrentPiece = newPosition => {\n    if (newPosition || getClicked) {\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"none\"\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: null\n      });\n      dispatch({\n        type: \"setGetClicked\",\n        value: false\n      });\n    } else {\n      dispatch({\n        type: \"setGetClicked\",\n        value: true\n      });\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      const [curRow, curCol] = currentPiece.position;\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n      updateBoard(newPosition, [curRow, curCol]);\n      dispatch({\n        type: \"setDraggable\",\n        value: false\n      });\n      updateCurrentPiece(newPosition);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n\n      if (newPosition) {\n        dispatch({\n          type: \"setTurnToMove\",\n          value: !turnToMove\n        });\n        setTimer(false, false);\n        socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n      }\n    }\n  };\n\n  const handleMouseMove = event => {\n    const svg = svgRef.current;\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    const [curRow, curCol] = currentPiece.position;\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n    updateBoard(newPosition, [curRow, curCol]);\n    dispatch({\n      type: \"setTargetDisplay\",\n      value: \"none\"\n    });\n    dispatch({\n      type: \"setCurrentPiece\",\n      value: null\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: [...board]\n    });\n\n    if (newPosition) {\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      });\n      setTimer(false, false);\n      socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n    }\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  const constructNewBoard = width => {\n    const newBoard = board.map(row => {\n      const newRow = row.map(piece => {\n        if (piece) {\n          const [row, col] = piece.position;\n          piece.width = width;\n          piece.translate = `translate(${width * col}, ${width * row})`;\n          return piece;\n        }\n\n        return 0;\n      });\n      return newRow;\n    });\n    return newBoard;\n  };\n\n  const handleResize = () => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: constructNewBoard(width / 9)\n    });\n  };\n\n  const registerEventHandler = () => {\n    socket.on(\"foundMatch\", (opponentID, firstMove) => {\n      socket.opponentID = opponentID;\n      dispatch({\n        type: \"setTurnToMove\",\n        value: firstMove\n      });\n      dispatch({\n        type: \"setFoundMatch\",\n        value: true\n      });\n      setTimer(firstMove);\n    });\n    socket.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\n    });\n    socket.on(\"gameResumed\", () => {\n      console.log(turnToMove);\n      dispatch({\n        type: \"setPause\",\n        value: null\n      });\n      dispatch({\n        type: \"setPauseTime\",\n        value: \"restart\"\n      });\n      setTimer(turnToMove, false);\n    });\n    socket.on(\"gameOver\", (result, reason) => {\n      if (gameResult !== null) return;\n      const listItemRef = /*#__PURE__*/React.createRef();\n\n      if (result === \"Draw\") {\n        dispatch({\n          type: \"setGameResult\",\n          value: \"Draw\"\n        });\n        dispatch({\n          type: \"setMessage\",\n          value: {\n            type: \"game result message\",\n            winner: \"\",\n            reason: \"Game Draw By Agreement\",\n            className: \"game-message\",\n            ref: listItemRef\n          }\n        });\n      } else {\n        dispatch({\n          type: \"setGameResult\",\n          value: result\n        });\n        dispatch({\n          type: \"setMessage\",\n          value: {\n            type: \"game result message\",\n            winner: `${result === \"Won\" ? \"Phan Gia Huy\" : \"Opponent\"} Won - `,\n            reason: reason,\n            className: \"game-message\",\n            ref: listItemRef\n          }\n        });\n      }\n\n      setTimer(null, true);\n    });\n  };\n\n  useEffect(() => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: constructNewBoard(width / 9)\n    });\n\n    window.ondragstart = () => false; // if (currentIntervalID) ref.current = currentIntervalID;\n\n  }, []);\n  useEffect(() => {\n    if (sendGameResult) {\n      socket.emit(\"gameFinish\", sendGameResult);\n      setTimer(null, true);\n      dispatch({\n        type: \"setSendGameResult\",\n        value: false\n      });\n    } else if (pause === \"resume game\") {\n      setTimer(turnToMove, false);\n      dispatch({\n        type: \"setPause\",\n        value: null\n      });\n      socket.emit(\"resumeGame\");\n    }\n\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    window.onresize = handleResize;\n    registerEventHandler();\n    return () => {\n      window.onmouseup = null;\n      window.onmousemove = null;\n      window.onresize = null;\n      socket.removeAllListeners(\"foundMatch\");\n      socket.removeAllListeners(\"gameOver\");\n      socket.removeAllListeners(\"move\");\n      socket.removeAllListeners(\"gameResumed\");\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: boardSize[0],\n    height: boardSize[1],\n    onClick: handleClick,\n    style: {\n      backgroundImage: \"url(/images/Board/board.jpg)\"\n    },\n    ref: svgRef,\n    children: [/*#__PURE__*/_jsxDEV(\"image\", {\n      href: \"/images/Target_Icon/target.gif\",\n      width: boardSize[0] / 9 - 3,\n      height: boardSize[0] / 9 - 3,\n      style: {\n        display: targetDisplay\n      },\n      transform: targetTranslate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Piece, {\n      board: board,\n      handleMouseDown: handleMouseDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"dLtpai/JkfsuZXaGm+J579czSO8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Board;\nexport default _c2 = /*#__PURE__*/React.memo(Board);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Board/Board.jsx"],"names":["React","useEffect","useRef","useContext","Piece","useSelector","useDispatch","getSVGLocation","SocketContext","TimerContext","Board","dispatch","board","state","boardState","targetDisplay","boardSize","currentPiece","getClicked","draggable","turnToMove","pause","gameState","side","svgRef","timer","targetTranslate","sendGameResult","socket","gameResult","setTimer","playerTurn","gameFinish","postMessage","type","value","onmessage","_","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","curRow","curCol","position","updateBoard","newPostion","capture","newRow","newCol","handleOpponentMove","animateMove","updateCurrentPiece","newPosition","handleMouseUp","svg","current","x","y","clientX","clientY","setNewPosition","emit","handleMouseMove","move","moveOnClick","handleClick","target","constructNewBoard","width","newBoard","map","piece","handleResize","document","querySelector","offsetWidth","registerEventHandler","on","opponentID","firstMove","console","log","result","reason","listItemRef","createRef","winner","className","ref","window","ondragstart","onmousemove","onmouseup","onresize","removeAllListeners","backgroundImage","display","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useContext } from \"react\";\r\nimport Piece from \"./Piece/Piece.jsx\";\r\nimport \"./Board.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getSVGLocation from \"./getSVGLocation.js\";\r\nimport { SocketContext, TimerContext } from \"../../../App/App.jsx\";\r\n\r\nfunction Board() {\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => state.boardState.board);\r\n  const targetDisplay = useSelector((state) => state.boardState.targetDisplay);\r\n  const boardSize = useSelector((state) => state.boardState.boardSize);\r\n  const currentPiece = useSelector((state) => state.boardState.currentPiece);\r\n  const getClicked = useSelector((state) => state.boardState.getClicked);\r\n  const draggable = useSelector((state) => state.boardState.draggable);\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const pause = useSelector((state) => state.gameState.pause);\r\n  const side = useSelector((state) => state.boardState.side);\r\n  const svgRef = useRef();\r\n  const timer = useContext(TimerContext);\r\n  const targetTranslate = useSelector(\r\n    (state) => state.boardState.targetTranslate\r\n  );\r\n  const sendGameResult = useSelector((state) => state.gameState.sendGameResult);\r\n  const socket = useContext(SocketContext);\r\n  const gameResult = useSelector((state) => state.gameState.gameResult);\r\n\r\n  const setTimer = (playerTurn, gameFinish) => {\r\n    if (gameFinish) {\r\n      timer.postMessage(false);\r\n      dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n      dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n      dispatch({ type: \"setTurnToMove\", value: false });\r\n      return;\r\n    }\r\n    if (playerTurn)\r\n      dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n    else dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n    timer.postMessage(true);\r\n    timer.onmessage = (_) => {\r\n      if (playerTurn)\r\n        dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n      else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n    };\r\n  };\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) {\r\n          dispatch({ type: \"setGetClicked\", value: false });\r\n        }\r\n      }\r\n      dispatch({ type: \"setTargetDisplay\", value: \"inline\" });\r\n      dispatch({ type: \"setDraggable\", value: true });\r\n      dispatch({ type: \"setTargetTranslate\", value: translate });\r\n      dispatch({ type: \"setCurrentPiece\", value: board[row][col] });\r\n    }\r\n  };\r\n\r\n  const updateBoard = (newPostion, [curRow, curCol]) => {\r\n    if (newPostion) {\r\n      const [capture, newRow, newCol] = newPostion;\r\n      if (capture) {\r\n        dispatch({ type: \"setCapturedPieces\", value: board[newRow][newCol] });\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\r\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\r\n      setTimer(true, false);\r\n    }\r\n  };\r\n\r\n  const updateCurrentPiece = (newPosition) => {\r\n    if (newPosition || getClicked) {\r\n      dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n      dispatch({ type: \"setCurrentPiece\", value: null });\r\n      dispatch({ type: \"setGetClicked\", value: false });\r\n    } else {\r\n      dispatch({ type: \"setGetClicked\", value: true });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n      updateBoard(newPosition, [curRow, curCol]);\r\n      dispatch({ type: \"setDraggable\", value: false });\r\n      updateCurrentPiece(newPosition);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      if (newPosition) {\r\n        dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n        setTimer(false, false);\r\n        socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const svg = svgRef.current;\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n    updateBoard(newPosition, [curRow, curCol]);\r\n    dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n    dispatch({ type: \"setCurrentPiece\", value: null });\r\n    dispatch({ type: \"setBoard\", value: [...board] });\r\n    if (newPosition) {\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      setTimer(false, false);\r\n      socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  const constructNewBoard = (width) => {\r\n    const newBoard = board.map((row) => {\r\n      const newRow = row.map((piece) => {\r\n        if (piece) {\r\n          const [row, col] = piece.position;\r\n          piece.width = width;\r\n          piece.translate = `translate(${width * col}, ${width * row})`;\r\n          return piece;\r\n        }\r\n        return 0;\r\n      });\r\n      return newRow;\r\n    });\r\n    return newBoard;\r\n  };\r\n\r\n  const handleResize = () => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: constructNewBoard(width / 9),\r\n    });\r\n  };\r\n\r\n  const registerEventHandler = () => {\r\n    socket.on(\"foundMatch\", (opponentID, firstMove) => {\r\n      socket.opponentID = opponentID;\r\n      dispatch({ type: \"setTurnToMove\", value: firstMove });\r\n      dispatch({ type: \"setFoundMatch\", value: true });\r\n      setTimer(firstMove);\r\n    });\r\n\r\n    socket.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n\r\n    socket.on(\"gameResumed\", () => {\r\n      console.log(turnToMove);\r\n      dispatch({ type: \"setPause\", value: null });\r\n      dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n      setTimer(turnToMove, false);\r\n    });\r\n\r\n    socket.on(\"gameOver\", (result, reason) => {\r\n      if (gameResult !== null) return;\r\n      const listItemRef = React.createRef();\r\n      if (result === \"Draw\") {\r\n        dispatch({ type: \"setGameResult\", value: \"Draw\" });\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            type: \"game result message\",\r\n            winner: \"\",\r\n            reason: \"Game Draw By Agreement\",\r\n            className: \"game-message\",\r\n            ref: listItemRef,\r\n          },\r\n        });\r\n      } else {\r\n        dispatch({ type: \"setGameResult\", value: result });\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            type: \"game result message\",\r\n            winner: `${result === \"Won\" ? \"Phan Gia Huy\" : \"Opponent\"} Won - `,\r\n            reason: reason,\r\n            className: \"game-message\",\r\n            ref: listItemRef,\r\n          },\r\n        });\r\n      }\r\n      setTimer(null, true);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({ type: \"setBoardSize\", value: [width, width / (521 / 577)] });\r\n    dispatch({ type: \"setBoard\", value: constructNewBoard(width / 9) });\r\n\r\n    window.ondragstart = () => false;\r\n\r\n    // if (currentIntervalID) ref.current = currentIntervalID;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (sendGameResult) {\r\n      socket.emit(\"gameFinish\", sendGameResult);\r\n      setTimer(null, true);\r\n      dispatch({ type: \"setSendGameResult\", value: false });\r\n    } else if (pause === \"resume game\") {\r\n      setTimer(turnToMove, false);\r\n      dispatch({ type: \"setPause\", value: null });\r\n      socket.emit(\"resumeGame\");\r\n    }\r\n\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    window.onresize = handleResize;\r\n    registerEventHandler();\r\n\r\n    return () => {\r\n      window.onmouseup = null;\r\n      window.onmousemove = null;\r\n      window.onresize = null;\r\n      socket.removeAllListeners(\"foundMatch\");\r\n      socket.removeAllListeners(\"gameOver\");\r\n      socket.removeAllListeners(\"move\");\r\n      socket.removeAllListeners(\"gameResumed\");\r\n    };\r\n  });\r\n\r\n  return (\r\n    <svg\r\n      width={boardSize[0]}\r\n      height={boardSize[1]}\r\n      onClick={handleClick}\r\n      style={{\r\n        backgroundImage: \"url(/images/Board/board.jpg)\",\r\n      }}\r\n      ref={svgRef}\r\n    >\r\n      <image\r\n        href=\"/images/Target_Icon/target.gif\"\r\n        width={boardSize[0] / 9 - 3}\r\n        height={boardSize[0] / 9 - 3}\r\n        style={{ display: targetDisplay }}\r\n        transform={targetTranslate}\r\n      ></image>\r\n      <Piece board={board} handleMouseDown={handleMouseDown} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default React.memo(Board);\r\n"]},"metadata":{},"sourceType":"module"}