{"ast":null,"code":"class Piece {\n  constructor(width, row, col, name, choosenSide) {\n    this.width = width;\n    this.position = [row, col];\n    this.name = name;\n    this.side = name.split(\"-\")[1];\n    this.choosenSide = choosenSide;\n    this.minCol = 0;\n    this.maxCol = 8;\n    this.minRow = 0;\n    this.maxRow = 9;\n    this.translate = `translate(${width * col}, ${width * row})`;\n  }\n\n  move(x, y) {\n    const translate = `translate(${x - this.width / 2}, ${y - this.width / 2})`;\n    this.translate = translate;\n  }\n\n  checkValidMove(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\n    const valid = newCol >= this.minCol && newCol <= this.maxCol && newRow >= this.minRow && newRow <= this.maxRow;\n    const existMove = this.moves.some(move => {\n      return move[0] === moveRow && move[1] === moveCol;\n    });\n\n    if (valid && existMove) {\n      const generalTranslate = this.putGeneralInDanger(newRow, newCol, board);\n      if (generalTranslate) return generalTranslate;\n      return true;\n    }\n\n    return false;\n  }\n\n  setPosition(capture, newRow, newCol) {\n    const [translateX, translateY] = [newCol * this.width, newRow * this.width];\n    const translate = `translate(${translateX}, ${translateY})`;\n    this.position = [newRow, newCol];\n    this.translate = translate;\n    return [capture === \"capture\", newRow, newCol];\n  }\n\n  canMoveToNewPosition(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n    this.translate = `translate(${translateX}, ${translateY})`;\n\n    if (this.side === this.choosenSide[1]) {\n      const isValid = this.checkValidMove(newRow, newCol, board);\n\n      if (isValid && !/translate/.test(isValid)) {\n        if (!board[newRow][newCol].side) {\n          if (this.countPiecesBetween(newRow, newCol, board) === 0) return true;\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, board) === 1) return \"capture\";\n      } else if (isValid) return isValid;\n    }\n\n    return false;\n  }\n\n  countPiecesBetween(newRow, newCol, board) {\n    let [curRow, curCol] = this.position;\n    let count = 0;\n\n    if (newRow === curRow) {\n      do {\n        curCol += curCol > newCol ? -1 : 1;\n        if (board[curRow][curCol]) count++;\n      } while (curCol !== newCol);\n    } else {\n      do {\n        curRow += curRow > newRow ? -1 : 1;\n        if (board[curRow][curCol]) count++;\n      } while (curRow !== newRow);\n    }\n\n    return count;\n  }\n\n  static isGeneralInDanger(board, side) {\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (board[i][j] && board[i][j].side !== side) {\n          const canCapture = board[i][j].canCaptureGeneral(board);\n          if (/translate/.test(canCapture)) return canCapture;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  putGeneralInDanger(newRow, newCol, board) {\n    const tmpBoard = board.reduce((acc, row) => {\n      acc.push([...row]);\n      return acc;\n    }, []);\n    this.updateTmpBoard(newRow, newCol, tmpBoard);\n    return Piece.isGeneralInDanger(tmpBoard, this.side);\n  }\n\n  static isLost(board, side) {\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (board[i][j] && board[i][j].side === side) {\n          const [curRow, curCol] = board[i][j].position;\n\n          for (let move of board[i][j].moves) {\n            const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n            const tmp = board[i][j].canMoveToNewPosition(newRow, newCol, board);\n            if (tmp && !/translate/.test(tmp)) return null;\n          }\n        }\n      }\n    }\n\n    if (Piece.isGeneralInDanger(board, side)) {\n      return \"Checkmate\";\n    }\n\n    return \"Stalemate\";\n  }\n\n  updateTmpBoard(newRow, newCol, tmpBoard) {\n    const [curRow, curCol] = this.position;\n    const tmp = tmpBoard[curRow][curCol];\n    tmpBoard[curRow][curCol] = 0;\n    tmpBoard[newRow][newCol] = tmp;\n  }\n\n  canCaptureGeneral(tmpBoard) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\n        if (tmpBoard[newRow][newCol].side) if (tmpBoard[newRow][newCol].side !== tmpBoard[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 1) if (tmpBoard[newRow][newCol].name.split(\"-\")[0] === \"general\") {\n          return tmpBoard[newRow][newCol].translate;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  animateMove([newRow, newCol], board, dispatch) {\n    const [curRow, curCol] = this.position;\n    this.DOMNode = document.querySelector(`#p${curRow}${curCol}`);\n\n    if (!this.DOMNode) {\n      this.setPosition(null, newRow, newCol);\n      const tmp = board[curRow][curCol];\n      if (board[newRow][newCol]) dispatch({\n        type: \"setCapturedPieces\",\n        value: board[newRow][newCol]\n      });\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = tmp;\n      dispatch({\n        type: \"setTurnToMove\",\n        value: true\n      });\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n    }\n\n    if (curCol === newCol) {\n      this.moveVertical([newRow, newCol], board, dispatch);\n    } else this.moveDiagonal([newRow, newCol], board, dispatch);\n  }\n\n  setTransform([xB, yB], board, dispatch) {\n    const [yA, xA] = this.position;\n    const translate = `translate(${xB * this.width}, ${yB * this.width})`;\n    this.DOMNode.setAttribute(\"transform\", translate);\n\n    if (board) {\n      this.setPosition(null, yB, xB);\n      const tmp = board[yA][xA];\n      if (board[yB][xB]) dispatch({\n        type: \"setCapturedPieces\",\n        value: board[yB][xB]\n      });\n      board[yA][xA] = 0;\n      board[yB][xB] = tmp;\n      dispatch({\n        type: \"setTurnToMove\",\n        value: true\n      });\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n    }\n  }\n\n  moveVertical([yB, xB], board, dispatch) {\n    const [yA, xA] = this.position;\n    let step = 0;\n\n    const animate = () => {\n      if (Math.abs(step) < Math.abs(yB - yA)) {\n        step += (yB - yA) / (0.25 * 60);\n        this.setTransform([xA, yA + step], null, null);\n        window.requestAnimationFrame(animate);\n      } else if (Math.abs(step) >= Math.abs(yB - yA)) {\n        this.setTransform([xB, yB], board, dispatch);\n      }\n    };\n\n    window.requestAnimationFrame(animate);\n  }\n\n  moveDiagonal([yB, xB], board, dispatch) {\n    const [yA, xA] = this.position;\n    let step = 0;\n\n    const animate = () => {\n      if (Math.abs(step) < Math.abs(xB - xA)) {\n        step += (xB - xA) / (0.25 * 60);\n        let y = step / (xB - xA) * (yB - yA) + yA;\n        this.setTransform([xA + step, y], null, null);\n        window.requestAnimationFrame(animate);\n      } else if (Math.abs(step) >= Math.abs(xB - xA)) {\n        this.setTransform([xB, yB], board, dispatch);\n      }\n    };\n\n    window.requestAnimationFrame(animate);\n  }\n\n}\n\nexport default Piece;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/piece.js"],"names":["Piece","constructor","width","row","col","name","choosenSide","position","side","split","minCol","maxCol","minRow","maxRow","translate","move","x","y","checkValidMove","newRow","newCol","board","curRow","curCol","moveRow","moveCol","valid","existMove","moves","some","generalTranslate","putGeneralInDanger","setPosition","capture","translateX","translateY","canMoveToNewPosition","isValid","test","countPiecesBetween","count","isGeneralInDanger","i","j","canCapture","canCaptureGeneral","tmpBoard","reduce","acc","push","updateTmpBoard","isLost","tmp","animateMove","dispatch","DOMNode","document","querySelector","type","value","moveVertical","moveDiagonal","setTransform","xB","yB","yA","xA","setAttribute","step","animate","Math","abs","window","requestAnimationFrame"],"mappings":"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","sourcesContent":["class Piece {\r\n  constructor(width, row, col, name, choosenSide) {\r\n    this.width = width;\r\n    this.position = [row, col];\r\n    this.name = name;\r\n    this.side = name.split(\"-\")[1];\r\n    this.choosenSide = choosenSide;\r\n    this.minCol = 0;\r\n    this.maxCol = 8;\r\n    this.minRow = 0;\r\n    this.maxRow = 9;\r\n    this.translate = `translate(${width * col}, ${width * row})`;\r\n  }\r\n\r\n  move(x, y) {\r\n    const translate = `translate(${x - this.width / 2}, ${y - this.width / 2})`;\r\n    this.translate = translate;\r\n  }\r\n\r\n  checkValidMove(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\r\n    const valid =\r\n      newCol >= this.minCol &&\r\n      newCol <= this.maxCol &&\r\n      newRow >= this.minRow &&\r\n      newRow <= this.maxRow;\r\n    const existMove = this.moves.some((move) => {\r\n      return move[0] === moveRow && move[1] === moveCol;\r\n    });\r\n    if (valid && existMove) {\r\n      const generalTranslate = this.putGeneralInDanger(newRow, newCol, board);\r\n      if (generalTranslate) return generalTranslate;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setPosition(capture, newRow, newCol) {\r\n    const [translateX, translateY] = [newCol * this.width, newRow * this.width];\r\n    const translate = `translate(${translateX}, ${translateY})`;\r\n    this.position = [newRow, newCol];\r\n    this.translate = translate;\r\n    return [capture === \"capture\", newRow, newCol];\r\n  }\r\n\r\n  canMoveToNewPosition(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n    this.translate = `translate(${translateX}, ${translateY})`;\r\n    if (this.side === this.choosenSide[1]) {\r\n      const isValid = this.checkValidMove(newRow, newCol, board);\r\n      if (isValid && !/translate/.test(isValid)) {\r\n        if (!board[newRow][newCol].side) {\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 0) return true;\r\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 1)\r\n            return \"capture\";\r\n      } else if (isValid) return isValid;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  countPiecesBetween(newRow, newCol, board) {\r\n    let [curRow, curCol] = this.position;\r\n    let count = 0;\r\n    if (newRow === curRow) {\r\n      do {\r\n        curCol += curCol > newCol ? -1 : 1;\r\n        if (board[curRow][curCol]) count++;\r\n      } while (curCol !== newCol);\r\n    } else {\r\n      do {\r\n        curRow += curRow > newRow ? -1 : 1;\r\n        if (board[curRow][curCol]) count++;\r\n      } while (curRow !== newRow);\r\n    }\r\n    return count;\r\n  }\r\n\r\n  static isGeneralInDanger(board, side) {\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (board[i][j] && board[i][j].side !== side) {\r\n          const canCapture = board[i][j].canCaptureGeneral(board);\r\n          if (/translate/.test(canCapture)) return canCapture;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  putGeneralInDanger(newRow, newCol, board) {\r\n    const tmpBoard = board.reduce((acc, row) => {\r\n      acc.push([...row]);\r\n      return acc;\r\n    }, []);\r\n    this.updateTmpBoard(newRow, newCol, tmpBoard);\r\n    return Piece.isGeneralInDanger(tmpBoard, this.side);\r\n  }\r\n\r\n  static isLost(board, side) {\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (board[i][j] && board[i][j].side === side) {\r\n          const [curRow, curCol] = board[i][j].position;\r\n          for (let move of board[i][j].moves) {\r\n            const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n            const tmp = board[i][j].canMoveToNewPosition(newRow, newCol, board);\r\n            if (tmp && !/translate/.test(tmp)) return null;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (Piece.isGeneralInDanger(board, side)) {\r\n      return \"Checkmate\";\r\n    }\r\n    return \"Stalemate\";\r\n  }\r\n\r\n  updateTmpBoard(newRow, newCol, tmpBoard) {\r\n    const [curRow, curCol] = this.position;\r\n    const tmp = tmpBoard[curRow][curCol];\r\n    tmpBoard[curRow][curCol] = 0;\r\n    tmpBoard[newRow][newCol] = tmp;\r\n  }\r\n\r\n  canCaptureGeneral(tmpBoard) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\r\n        if (tmpBoard[newRow][newCol].side)\r\n          if (tmpBoard[newRow][newCol].side !== tmpBoard[curRow][curCol].side)\r\n            if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 1)\r\n              if (tmpBoard[newRow][newCol].name.split(\"-\")[0] === \"general\") {\r\n                return tmpBoard[newRow][newCol].translate;\r\n              }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  animateMove([newRow, newCol], board, dispatch) {\r\n    const [curRow, curCol] = this.position;\r\n    this.DOMNode = document.querySelector(`#p${curRow}${curCol}`);\r\n    if (!this.DOMNode) {\r\n      this.setPosition(null, newRow, newCol);\r\n      const tmp = board[curRow][curCol];\r\n      if (board[newRow][newCol])\r\n        dispatch({ type: \"setCapturedPieces\", value: board[newRow][newCol] });\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = tmp;\r\n      dispatch({ type: \"setTurnToMove\", value: true });\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n    if (curCol === newCol) {\r\n      this.moveVertical([newRow, newCol], board, dispatch);\r\n    } else this.moveDiagonal([newRow, newCol], board, dispatch);\r\n  }\r\n\r\n  setTransform([xB, yB], board, dispatch) {\r\n    const [yA, xA] = this.position;\r\n    const translate = `translate(${xB * this.width}, ${yB * this.width})`;\r\n    this.DOMNode.setAttribute(\"transform\", translate);\r\n    if (board) {\r\n      this.setPosition(null, yB, xB);\r\n      const tmp = board[yA][xA];\r\n      if (board[yB][xB])\r\n        dispatch({ type: \"setCapturedPieces\", value: board[yB][xB] });\r\n      board[yA][xA] = 0;\r\n      board[yB][xB] = tmp;\r\n      dispatch({ type: \"setTurnToMove\", value: true });\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n  }\r\n\r\n  moveVertical([yB, xB], board, dispatch) {\r\n    const [yA, xA] = this.position;\r\n    let step = 0;\r\n\r\n    const animate = () => {\r\n      if (Math.abs(step) < Math.abs(yB - yA)) {\r\n        step += (yB - yA) / (0.25 * 60);\r\n        this.setTransform([xA, yA + step], null, null);\r\n        window.requestAnimationFrame(animate);\r\n      } else if (Math.abs(step) >= Math.abs(yB - yA)) {\r\n        this.setTransform([xB, yB], board, dispatch);\r\n      }\r\n    };\r\n\r\n    window.requestAnimationFrame(animate);\r\n  }\r\n\r\n  moveDiagonal([yB, xB], board, dispatch) {\r\n    const [yA, xA] = this.position;\r\n    let step = 0;\r\n\r\n    const animate = () => {\r\n      if (Math.abs(step) < Math.abs(xB - xA)) {\r\n        step += (xB - xA) / (0.25 * 60);\r\n        let y = (step / (xB - xA)) * (yB - yA) + yA;\r\n        this.setTransform([xA + step, y], null, null);\r\n        window.requestAnimationFrame(animate);\r\n      } else if (Math.abs(step) >= Math.abs(xB - xA)) {\r\n        this.setTransform([xB, yB], board, dispatch);\r\n      }\r\n    };\r\n\r\n    window.requestAnimationFrame(animate);\r\n  }\r\n}\r\n\r\nexport default Piece;\r\n"]},"metadata":{},"sourceType":"module"}