{"ast":null,"code":"import React from \"react\";\nimport { io } from \"socket.io-client\";\nconst socket = io(\"http://localhost:8080/play\");\nconst timer = new Worker(\"/web_worker_timer/webWorkerTimer.js\");\n\nconst setTimer = (playerTurn, gameFinish, dispatch) => {\n  socket.removeAllListeners(\"oneSecondPass\");\n\n  if (gameFinish) {\n    socket.emit(\"setTimer\", false);\n    dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setTurnToMove\",\n      value: false\n    });\n    return;\n  }\n\n  if (playerTurn) dispatch({\n    type: \"setOpponentTimeLeftToMove\",\n    value: \"restart\"\n  });else dispatch({\n    type: \"setPlayerTimeLeftToMove\",\n    value: \"restart\"\n  }); // timer.postMessage(true);\n\n  socket.emit(\"startTimer\", true);\n  socket.on(\"oneSecondPass\", () => {\n    if (playerTurn) dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: null\n    });else dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: null\n    });\n  }); // timer.onmessage = (_) => {\n  //   if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\n  //   else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\n  // };\n};\n\nconst SocketContext = /*#__PURE__*/React.createContext();\nconst TimerContext = /*#__PURE__*/React.createContext();\nconst SetTimerContext = /*#__PURE__*/React.createContext();\nexport { SocketContext, TimerContext, SetTimerContext, setTimer, socket, timer };","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/context.js"],"names":["React","io","socket","timer","Worker","setTimer","playerTurn","gameFinish","dispatch","removeAllListeners","emit","type","value","on","SocketContext","createContext","TimerContext","SetTimerContext"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,4BAAD,CAAjB;AACA,MAAME,KAAK,GAAG,IAAIC,MAAJ,CAAW,qCAAX,CAAd;;AAEA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,QAAzB,KAAsC;AACrDN,EAAAA,MAAM,CAACO,kBAAP,CAA0B,eAA1B;;AACA,MAAIF,UAAJ,EAAgB;AACdL,IAAAA,MAAM,CAACQ,IAAP,CAAY,UAAZ,EAAwB,KAAxB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,2BAAR;AAAqCC,MAAAA,KAAK,EAAE;AAA5C,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,yBAAR;AAAmCC,MAAAA,KAAK,EAAE;AAA1C,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,KAAK,EAAE;AAAhC,KAAD,CAAR;AACA;AACD;;AACD,MAAIN,UAAJ,EACEE,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,2BAAR;AAAqCC,IAAAA,KAAK,EAAE;AAA5C,GAAD,CAAR,CADF,KAEKJ,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,yBAAR;AAAmCC,IAAAA,KAAK,EAAE;AAA1C,GAAD,CAAR,CAXgD,CAYrD;;AACAV,EAAAA,MAAM,CAACQ,IAAP,CAAY,YAAZ,EAA0B,IAA1B;AACAR,EAAAA,MAAM,CAACW,EAAP,CAAU,eAAV,EAA2B,MAAM;AAC/B,QAAIP,UAAJ,EAAgBE,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,yBAAR;AAAmCC,MAAAA,KAAK,EAAE;AAA1C,KAAD,CAAR,CAAhB,KACKJ,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,2BAAR;AAAqCC,MAAAA,KAAK,EAAE;AAA5C,KAAD,CAAR;AACN,GAHD,EAdqD,CAkBrD;AACA;AACA;AACA;AACD,CAtBD;;AAwBA,MAAME,aAAa,gBAAGd,KAAK,CAACe,aAAN,EAAtB;AACA,MAAMC,YAAY,gBAAGhB,KAAK,CAACe,aAAN,EAArB;AACA,MAAME,eAAe,gBAAGjB,KAAK,CAACe,aAAN,EAAxB;AAEA,SACED,aADF,EAEEE,YAFF,EAGEC,eAHF,EAIEZ,QAJF,EAKEH,MALF,EAMEC,KANF","sourcesContent":["import React from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:8080/play\");\r\nconst timer = new Worker(\"/web_worker_timer/webWorkerTimer.js\");\r\n\r\nconst setTimer = (playerTurn, gameFinish, dispatch) => {\r\n  socket.removeAllListeners(\"oneSecondPass\");\r\n  if (gameFinish) {\r\n    socket.emit(\"setTimer\", false);\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setTurnToMove\", value: false });\r\n    return;\r\n  }\r\n  if (playerTurn)\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n  else dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n  // timer.postMessage(true);\r\n  socket.emit(\"startTimer\", true);\r\n  socket.on(\"oneSecondPass\", () => {\r\n    if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n    else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n  });\r\n  // timer.onmessage = (_) => {\r\n  //   if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n  //   else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n  // };\r\n};\r\n\r\nconst SocketContext = React.createContext();\r\nconst TimerContext = React.createContext();\r\nconst SetTimerContext = React.createContext();\r\n\r\nexport {\r\n  SocketContext,\r\n  TimerContext,\r\n  SetTimerContext,\r\n  setTimer,\r\n  socket,\r\n  timer,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}