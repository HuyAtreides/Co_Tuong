{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { SocketContext, SetMoveTimerContext } from \"../../App/context.js\";\nimport \"./Game.scss\";\nimport { Row } from \"react-bootstrap\";\nimport GameController from \"./GameController/GameController.jsx\";\nimport GamePlayArea from \"./GamePlayArea/GamePlayArea.jsx\";\nimport { useSelector, useStore, useDispatch } from \"react-redux\";\nimport GameBar from \"./GameBar/GameBar.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const gameResult = useSelector(state => state.gameState.gameResult);\n  const playerInfo = useSelector(state => state.appState.playerInfo);\n  const opponentInfo = useSelector(state => state.gameState.opponentInfo);\n  const [timeSelectorDisplay, setTimeSelectorDisplay] = useState(\"none\");\n  const foundMatch = useSelector(state => state.gameState.foundMatch);\n  const [centerBoard, setCenterBoard] = useState(false);\n  const socket = useContext(SocketContext);\n  const setMoveTimer = useContext(SetMoveTimerContext);\n\n  const handleCenterBoard = () => {\n    setCenterBoard(!centerBoard);\n  };\n\n  const handleToggle = () => {\n    setTimeSelectorDisplay(timeSelectorDisplay === \"none\" ? \"flex\" : \"none\");\n  };\n\n  const handleGameOver = (result, reason) => {\n    dispatch({\n      type: \"setGameResult\",\n      value: result\n    });\n    dispatch({\n      type: \"setMessage\",\n      value: {\n        type: \"game result message\",\n        winner: `${result === \"Won\" ? `${playerInfo.username}` : `${opponentInfo.playername}`} Won - `,\n        reason: reason,\n        className: \"game-message\"\n      }\n    });\n    setMoveTimer(null, true, dispatch);\n  };\n\n  const handleResign = () => {\n    handleGameOver(\"Lose\", `${playerInfo.username} Resign`);\n    socket.emit(\"gameFinish\", [\"Won\", `${playerInfo.username} Resign`]);\n  };\n\n  useEffect(() => {\n    socket.on(\"gameOver\", (result, reason) => {\n      if (gameResult !== null) return;\n      handleGameOver(result, reason);\n    });\n    socket.on(\"opponentLeftGame\", () => {\n      if (foundMatch) dispatch({\n        type: \"setMessage\",\n        value: {\n          from: `${opponentInfo.playername}`,\n          message: \"Left The Game\",\n          className: \"game-message\"\n        }\n      });\n    });\n    return () => {\n      socket.removeAllListeners(\"opponentLeftGame\");\n      socket.removeAllListeners(\"gameOver\");\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Row, {\n    md: {\n      cols: 1\n    },\n    className: \"mt-3 pb-3\",\n    children: [/*#__PURE__*/_jsxDEV(GamePlayArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100\",\n      style: {\n        display: centerBoard ? \"block\" : \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), !foundMatch ? /*#__PURE__*/_jsxDEV(GameController, {\n      timeSelectorDisplay: timeSelectorDisplay,\n      handleToggle: handleToggle,\n      handleCenterBoard: handleCenterBoard,\n      centerBoard: centerBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GameBar, {\n      handleCenterBoard: handleCenterBoard,\n      centerBoard: centerBoard,\n      handleResign: handleResign\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"LP9kjkjFLHfk/udsZvEjZau7wCE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Game.jsx"],"names":["React","useState","useContext","useEffect","SocketContext","SetMoveTimerContext","Row","GameController","GamePlayArea","useSelector","useStore","useDispatch","GameBar","Game","dispatch","gameResult","state","gameState","playerInfo","appState","opponentInfo","timeSelectorDisplay","setTimeSelectorDisplay","foundMatch","centerBoard","setCenterBoard","socket","setMoveTimer","handleCenterBoard","handleToggle","handleGameOver","result","reason","type","value","winner","username","playername","className","handleResign","emit","on","from","message","removeAllListeners","cols","display"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../App/context.js\";\r\nimport \"./Game.scss\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport GameController from \"./GameController/GameController.jsx\";\r\nimport GamePlayArea from \"./GamePlayArea/GamePlayArea.jsx\";\r\nimport { useSelector, useStore, useDispatch } from \"react-redux\";\r\nimport GameBar from \"./GameBar/GameBar.jsx\";\r\n\r\nconst Game = () => {\r\n  const dispatch = useDispatch();\r\n  const gameResult = useSelector((state) => state.gameState.gameResult);\r\n  const playerInfo = useSelector((state) => state.appState.playerInfo);\r\n  const opponentInfo = useSelector((state) => state.gameState.opponentInfo);\r\n  const [timeSelectorDisplay, setTimeSelectorDisplay] = useState(\"none\");\r\n  const foundMatch = useSelector((state) => state.gameState.foundMatch);\r\n  const [centerBoard, setCenterBoard] = useState(false);\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n\r\n  const handleCenterBoard = () => {\r\n    setCenterBoard(!centerBoard);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setTimeSelectorDisplay(timeSelectorDisplay === \"none\" ? \"flex\" : \"none\");\r\n  };\r\n\r\n  const handleGameOver = (result, reason) => {\r\n    dispatch({ type: \"setGameResult\", value: result });\r\n    dispatch({\r\n      type: \"setMessage\",\r\n      value: {\r\n        type: \"game result message\",\r\n        winner: `${\r\n          result === \"Won\"\r\n            ? `${playerInfo.username}`\r\n            : `${opponentInfo.playername}`\r\n        } Won - `,\r\n        reason: reason,\r\n        className: \"game-message\",\r\n      },\r\n    });\r\n    setMoveTimer(null, true, dispatch);\r\n  };\r\n\r\n  const handleResign = () => {\r\n    handleGameOver(\"Lose\", `${playerInfo.username} Resign`);\r\n    socket.emit(\"gameFinish\", [\"Won\", `${playerInfo.username} Resign`]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"gameOver\", (result, reason) => {\r\n      if (gameResult !== null) return;\r\n      handleGameOver(result, reason);\r\n    });\r\n\r\n    socket.on(\"opponentLeftGame\", () => {\r\n      if (foundMatch)\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            from: `${opponentInfo.playername}`,\r\n            message: \"Left The Game\",\r\n            className: \"game-message\",\r\n          },\r\n        });\r\n    });\r\n\r\n    return () => {\r\n      socket.removeAllListeners(\"opponentLeftGame\");\r\n      socket.removeAllListeners(\"gameOver\");\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Row md={{ cols: 1 }} className=\"mt-3 pb-3\">\r\n      <GamePlayArea />\r\n      <div\r\n        className=\"w-100\"\r\n        style={{ display: centerBoard ? \"block\" : \"none\" }}\r\n      ></div>\r\n      {!foundMatch ? (\r\n        <GameController\r\n          timeSelectorDisplay={timeSelectorDisplay}\r\n          handleToggle={handleToggle}\r\n          handleCenterBoard={handleCenterBoard}\r\n          centerBoard={centerBoard}\r\n        />\r\n      ) : (\r\n        <GameBar\r\n          handleCenterBoard={handleCenterBoard}\r\n          centerBoard={centerBoard}\r\n          handleResign={handleResign}\r\n        />\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}