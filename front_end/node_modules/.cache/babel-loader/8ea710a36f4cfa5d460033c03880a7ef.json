{"ast":null,"code":"import Piece from \"./piece.js\";\nimport cannonRules from \"./move_rules/cannonRules.js\";\n\nclass Cannon extends Piece {\n  constructor(width, row, col, name, choosenSide) {\n    super(width, row, col, name, choosenSide);\n    this.moves = cannonRules;\n  }\n\n  setNewPosition(x, y, board, turnToMove) {\n    const newCol = Math.floor(x / this.width);\n    const newRow = Math.floor(y / this.width);\n    const [curRow, curCol] = this.position;\n    this.translate = `translate(${curCol * this.width}, ${curRow * this.width})`;\n\n    if (turnToMove) {\n      if (this.checkValidMove(newRow, newCol, board)) {\n        if (!board[newRow][newCol].side) {\n          if (this.countPiecesBetween(newRow, newCol, board) === 0) return this.setPosition(false, newRow, newCol);\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, board) === 2) return this.setPosition(true, newRow, newCol);\n      }\n    }\n  }\n\n  canCaptureGeneral(board) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\n        if (board[newRow][newCol].side) if (board[newRow][newCol].side !== board[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, board) === 2) if (board[newRow][newCol].name.split(\"-\")[0] === \"general\") return true;\n      }\n    }\n  }\n\n}\n\nexport default Cannon;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/cannon.js"],"names":["Piece","cannonRules","Cannon","constructor","width","row","col","name","choosenSide","moves","setNewPosition","x","y","board","turnToMove","newCol","Math","floor","newRow","curRow","curCol","position","translate","checkValidMove","side","countPiecesBetween","setPosition","canCaptureGeneral","move","split"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;;AAEA,MAAMC,MAAN,SAAqBF,KAArB,CAA2B;AACzBG,EAAAA,WAAW,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAwBC,WAAxB,EAAqC;AAC9C,UAAMJ,KAAN,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,WAA7B;AACA,SAAKC,KAAL,GAAaR,WAAb;AACD;;AAEDS,EAAAA,cAAc,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,UAAd,EAA0B;AACtC,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,CAAC,GAAG,KAAKP,KAApB,CAAf;AACA,UAAMc,MAAM,GAAGF,IAAI,CAACC,KAAL,CAAWL,CAAC,GAAG,KAAKR,KAApB,CAAf;AACA,UAAM,CAACe,MAAD,EAASC,MAAT,IAAmB,KAAKC,QAA9B;AACA,SAAKC,SAAL,GAAkB,aAAYF,MAAM,GAAG,KAAKhB,KAAM,KAChDe,MAAM,GAAG,KAAKf,KACf,GAFD;;AAGA,QAAIU,UAAJ,EAAgB;AACd,UAAI,KAAKS,cAAL,CAAoBL,MAApB,EAA4BH,MAA5B,EAAoCF,KAApC,CAAJ,EAAgD;AAC9C,YAAI,CAACA,KAAK,CAACK,MAAD,CAAL,CAAcH,MAAd,EAAsBS,IAA3B,EAAiC;AAC/B,cAAI,KAAKC,kBAAL,CAAwBP,MAAxB,EAAgCH,MAAhC,EAAwCF,KAAxC,MAAmD,CAAvD,EACE,OAAO,KAAKa,WAAL,CAAiB,KAAjB,EAAwBR,MAAxB,EAAgCH,MAAhC,CAAP;AACH,SAHD,MAGO,IAAIF,KAAK,CAACK,MAAD,CAAL,CAAcH,MAAd,EAAsBS,IAAtB,KAA+BX,KAAK,CAACM,MAAD,CAAL,CAAcC,MAAd,EAAsBI,IAAzD,EACL,IAAI,KAAKC,kBAAL,CAAwBP,MAAxB,EAAgCH,MAAhC,EAAwCF,KAAxC,MAAmD,CAAvD,EACE,OAAO,KAAKa,WAAL,CAAiB,IAAjB,EAAuBR,MAAvB,EAA+BH,MAA/B,CAAP;AACL;AACF;AACF;;AAEDY,EAAAA,iBAAiB,CAACd,KAAD,EAAQ;AACvB,UAAM,CAACM,MAAD,EAASC,MAAT,IAAmB,KAAKC,QAA9B;;AACA,SAAK,IAAIO,IAAT,IAAiB,KAAKnB,KAAtB,EAA6B;AAC3B,YAAM,CAACS,MAAD,EAASH,MAAT,IAAmB,CAACI,MAAM,GAAGS,IAAI,CAAC,CAAD,CAAd,EAAmBR,MAAM,GAAGQ,IAAI,CAAC,CAAD,CAAhC,CAAzB;;AACA,UAAIb,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAG,CAAxB,IAA6BG,MAAM,IAAI,CAAvC,IAA4CA,MAAM,GAAG,EAAzD,EAA6D;AAC3D,YAAIL,KAAK,CAACK,MAAD,CAAL,CAAcH,MAAd,EAAsBS,IAA1B,EACE,IAAIX,KAAK,CAACK,MAAD,CAAL,CAAcH,MAAd,EAAsBS,IAAtB,KAA+BX,KAAK,CAACM,MAAD,CAAL,CAAcC,MAAd,EAAsBI,IAAzD,EACE,IAAI,KAAKC,kBAAL,CAAwBP,MAAxB,EAAgCH,MAAhC,EAAwCF,KAAxC,MAAmD,CAAvD,EACE,IAAIA,KAAK,CAACK,MAAD,CAAL,CAAcH,MAAd,EAAsBR,IAAtB,CAA2BsB,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,MAA6C,SAAjD,EACE,OAAO,IAAP;AACT;AACF;AACF;;AArCwB;;AAwC3B,eAAe3B,MAAf","sourcesContent":["import Piece from \"./piece.js\";\r\nimport cannonRules from \"./move_rules/cannonRules.js\";\r\n\r\nclass Cannon extends Piece {\r\n  constructor(width, row, col, name, choosenSide) {\r\n    super(width, row, col, name, choosenSide);\r\n    this.moves = cannonRules;\r\n  }\r\n\r\n  setNewPosition(x, y, board, turnToMove) {\r\n    const newCol = Math.floor(x / this.width);\r\n    const newRow = Math.floor(y / this.width);\r\n    const [curRow, curCol] = this.position;\r\n    this.translate = `translate(${curCol * this.width}, ${\r\n      curRow * this.width\r\n    })`;\r\n    if (turnToMove) {\r\n      if (this.checkValidMove(newRow, newCol, board)) {\r\n        if (!board[newRow][newCol].side) {\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 0)\r\n            return this.setPosition(false, newRow, newCol);\r\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 2)\r\n            return this.setPosition(true, newRow, newCol);\r\n      }\r\n    }\r\n  }\r\n\r\n  canCaptureGeneral(board) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\r\n        if (board[newRow][newCol].side)\r\n          if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n            if (this.countPiecesBetween(newRow, newCol, board) === 2)\r\n              if (board[newRow][newCol].name.split(\"-\")[0] === \"general\")\r\n                return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Cannon;\r\n"]},"metadata":{},"sourceType":"module"}