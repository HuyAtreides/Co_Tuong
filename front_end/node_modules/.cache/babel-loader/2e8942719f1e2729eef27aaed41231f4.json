{"ast":null,"code":"import Piece from \"./piece.js\";\nimport elephantRules from \"./move_rules/elephantRules.js\";\n\nclass Elephant extends Piece {\n  constructor(width, row, col, name, side) {\n    super(width, row, col, name);\n    this.moves = elephantRules;\n    this.choosenSide = side;\n  } // setNewPosition(x, y, board) {\n  //   const newCol = Math.floor(x / this.width);\n  //   const newRow = Math.floor(y / this.width);\n  //   const [curRow, curCol] = this.position;\n  //   const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n  //   this.translate = `translate(${translateX}, ${translateY})`;\n  //   const maxRow = this.side === this.choosenSide[0] ? 5 : 10;\n  //   const minRow = this.side === this.choosenSide[0] ? 0 : 5;\n  //   if (newCol >= 0 && newCol < 9 && newRow >= minRow && newRow < maxRow) {\n  //     if (this.checkValidMove(newRow - curRow, newCol - curCol, board)) {\n  //       if (!this.isBlocked(newRow, newCol, board)) {\n  //         if (!board[newRow][newCol].side)\n  //           return this.setPosition(false, newRow, newCol);\n  //         else if (board[newRow][newCol].side !== board[curRow][curCol].side)\n  //           return this.setPosition(true, newRow, newCol);\n  //       }\n  //     }\n  //   }\n  //   return null;\n  // }\n\n\n  isBlocked(newRow, newCol, board) {\n    let [curRow, curCol] = this.position;\n    let count = 0;\n\n    do {\n      curCol += curCol > newCol ? -1 : 1;\n      curRow += curRow > newRow ? -1 : 1;\n      if (board[curRow][curCol]) count++;\n    } while (curCol !== newCol && curRow !== newRow);\n\n    return count;\n  }\n\n}\n\nexport default Elephant;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/elephant.js"],"names":["Piece","elephantRules","Elephant","constructor","width","row","col","name","side","moves","choosenSide","isBlocked","newRow","newCol","board","curRow","curCol","position","count"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;AAEA,MAAMC,QAAN,SAAuBF,KAAvB,CAA6B;AAC3BG,EAAAA,WAAW,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AACvC,UAAMJ,KAAN,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB;AACA,SAAKE,KAAL,GAAaR,aAAb;AACA,SAAKS,WAAL,GAAmBF,IAAnB;AACD,GAL0B,CAO3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,EAAAA,SAAS,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwB;AAC/B,QAAI,CAACC,MAAD,EAASC,MAAT,IAAmB,KAAKC,QAA5B;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,OAAG;AACDF,MAAAA,MAAM,IAAIA,MAAM,GAAGH,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAAjC;AACAE,MAAAA,MAAM,IAAIA,MAAM,GAAGH,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAAjC;AACA,UAAIE,KAAK,CAACC,MAAD,CAAL,CAAcC,MAAd,CAAJ,EAA2BE,KAAK;AACjC,KAJD,QAISF,MAAM,KAAKH,MAAX,IAAqBE,MAAM,KAAKH,MAJzC;;AAMA,WAAOM,KAAP;AACD;;AAtC0B;;AAyC7B,eAAehB,QAAf","sourcesContent":["import Piece from \"./piece.js\";\r\nimport elephantRules from \"./move_rules/elephantRules.js\";\r\n\r\nclass Elephant extends Piece {\r\n  constructor(width, row, col, name, side) {\r\n    super(width, row, col, name);\r\n    this.moves = elephantRules;\r\n    this.choosenSide = side;\r\n  }\r\n\r\n  // setNewPosition(x, y, board) {\r\n  //   const newCol = Math.floor(x / this.width);\r\n  //   const newRow = Math.floor(y / this.width);\r\n  //   const [curRow, curCol] = this.position;\r\n  //   const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n  //   this.translate = `translate(${translateX}, ${translateY})`;\r\n  //   const maxRow = this.side === this.choosenSide[0] ? 5 : 10;\r\n  //   const minRow = this.side === this.choosenSide[0] ? 0 : 5;\r\n  //   if (newCol >= 0 && newCol < 9 && newRow >= minRow && newRow < maxRow) {\r\n  //     if (this.checkValidMove(newRow - curRow, newCol - curCol, board)) {\r\n  //       if (!this.isBlocked(newRow, newCol, board)) {\r\n  //         if (!board[newRow][newCol].side)\r\n  //           return this.setPosition(false, newRow, newCol);\r\n  //         else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n  //           return this.setPosition(true, newRow, newCol);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  isBlocked(newRow, newCol, board) {\r\n    let [curRow, curCol] = this.position;\r\n    let count = 0;\r\n    do {\r\n      curCol += curCol > newCol ? -1 : 1;\r\n      curRow += curRow > newRow ? -1 : 1;\r\n      if (board[curRow][curCol]) count++;\r\n    } while (curCol !== newCol && curRow !== newRow);\r\n\r\n    return count;\r\n  }\r\n}\r\n\r\nexport default Elephant;\r\n"]},"metadata":{},"sourceType":"module"}