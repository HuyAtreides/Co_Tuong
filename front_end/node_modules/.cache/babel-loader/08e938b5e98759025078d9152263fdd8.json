{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\Board\\\\Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useReducer } from \"react\";\nimport initializeBoard from \"./initializeBoard.js\";\nimport Piece from \"../../../Piece/Piece.jsx\";\nimport \"./Board.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport getSVGLocation from \"./getSVGLocation.js\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.boardState.board);\n  const targetDisplay = useSelector(state => state.boardState.targetDisplay);\n  const boardSize = useSelector(state => state.boardState.boardSize);\n  const currentPiece = useSelector(state => state.boardState.currentPiece);\n  const getClicked = useSelector(state => state.boardState.getClicked);\n  const draggable = useSelector(state => state.boardState.draggable);\n  const capturedPiece = useSelector(state => state.boardState.capturedPiece);\n  const turnToMove = useSelector(state => state.boardState.turnToMove);\n  const findingMatch = useSelector(state => state.gameState.findingMatch);\n  const side = useSelector(state => state.boardState.side);\n  const socketRef = useRef();\n  const svgRef = useRef();\n  const targetTranslate = useSelector(state => state.boardState.targetTranslate);\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n\n        if (row !== curRow || curCol !== col) {\n          dispatch({\n            type: \"setGetClicked\",\n            value: false\n          });\n        }\n      }\n\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"inline\"\n      });\n      dispatch({\n        type: \"setDraggable\",\n        value: true\n      });\n      dispatch({\n        type: \"setTargetTranslate\",\n        value: translate\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: board[row][col]\n      });\n    }\n  };\n\n  const updateBoard = (newPostion, [curRow, curCol]) => {\n    if (newPostion) {\n      const [capture, newRow, newCol] = newPostion;\n\n      if (capture) {\n        capturedPiece.push(board[newRow][newCol]);\n        dispatch({\n          type: \"setCapturedPiece\",\n          value: [...capturedPiece]\n        });\n      }\n\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    }\n  };\n\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      });\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      const [curRow, curCol] = currentPiece.position;\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n      updateBoard(newPosition, [curRow, curCol]);\n      dispatch({\n        type: \"setDraggable\",\n        value: false\n      });\n\n      if (!getClicked) {\n        dispatch({\n          type: \"setGetClicked\",\n          value: true\n        });\n      } else {\n        dispatch({\n          type: \"setTargetDisplay\",\n          value: \"none\"\n        });\n        dispatch({\n          type: \"setCurrentPiece\",\n          value: null\n        });\n        dispatch({\n          type: \"setGetClicked\",\n          value: false\n        });\n      }\n\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n\n      if (newPosition) {\n        dispatch({\n          type: \"setTurnToMove\",\n          value: !turnToMove\n        });\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n      }\n    }\n  };\n\n  const handleMouseMove = event => {\n    const svg = svgRef.current;\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    const [curRow, curCol] = currentPiece.position;\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n    updateBoard(newPosition, [curRow, curCol]);\n    dispatch({\n      type: \"setTargetDisplay\",\n      value: \"none\"\n    });\n    dispatch({\n      type: \"setCurrentPiece\",\n      value: null\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: [...board]\n    });\n\n    if (newPosition) {\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      });\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n    }\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  const handleResize = () => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: initializeBoard(width / 9, side)\n    });\n  };\n\n  useEffect(() => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: initializeBoard(width / 9, side)\n    });\n\n    window.ondragstart = () => false;\n\n    socketRef.current = io(\"http://localhost:8080/play\");\n  }, []);\n  useEffect(() => {\n    if (findingMatch) {\n      console.log(\"findMatch\");\n      socketRef.current.emit(\"findMatch\");\n    }\n\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    window.onresize = handleResize;\n    socketRef.current.on(\"foundMatch\", (opponentId, firstMove) => {\n      console.log(firstMove);\n      dispatch({\n        type: \"setTurnToMove\",\n        value: firstMove\n      });\n      socketRef.current.opponentId = opponentId;\n      dispatch({\n        type: \"setFindingMatch\",\n        value: false\n      });\n    });\n    socketRef.current.on(\"timeout\", () => {\n      dispatch({\n        type: \"setFindingMatch\",\n        value: null\n      });\n    });\n    socketRef.current.once(\"move\", ([curRow, curCol], [newRow, newCol]) => {\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\n    });\n    return () => {\n      window.onmouseup = null;\n      window.onmousemove = null;\n      socketRef.current.removeAllListeners();\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: boardSize[0],\n    height: boardSize[1],\n    onClick: handleClick,\n    style: {\n      backgroundImage: \"url(/images/Board/board.jpg)\"\n    },\n    ref: svgRef,\n    children: [/*#__PURE__*/_jsxDEV(\"image\", {\n      href: \"/images/Target_Icon/target.gif\",\n      width: boardSize[0] / 9,\n      height: boardSize[0] / 9,\n      style: {\n        display: targetDisplay\n      },\n      transform: targetTranslate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Piece, {\n      board: board,\n      handleMouseDown: handleMouseDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"PJj67ZV5EYKAmUzO3tx/87I9Ayk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Board/Board.jsx"],"names":["React","useState","useEffect","useRef","useReducer","initializeBoard","Piece","useSelector","useDispatch","getSVGLocation","io","Board","dispatch","board","state","boardState","targetDisplay","boardSize","currentPiece","getClicked","draggable","capturedPiece","turnToMove","findingMatch","gameState","side","socketRef","svgRef","targetTranslate","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","curRow","curCol","position","type","value","updateBoard","newPostion","capture","newRow","newCol","push","handleOpponentMove","animateMove","handleMouseUp","svg","current","x","y","clientX","clientY","newPosition","setNewPosition","emit","handleMouseMove","move","moveOnClick","handleClick","target","handleResize","width","document","querySelector","offsetWidth","window","ondragstart","console","log","onmousemove","onmouseup","onresize","on","opponentId","firstMove","once","removeAllListeners","backgroundImage","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useReducer } from \"react\";\r\nimport initializeBoard from \"./initializeBoard.js\";\r\nimport Piece from \"../../../Piece/Piece.jsx\";\r\nimport \"./Board.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getSVGLocation from \"./getSVGLocation.js\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nfunction Board() {\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => state.boardState.board);\r\n  const targetDisplay = useSelector((state) => state.boardState.targetDisplay);\r\n  const boardSize = useSelector((state) => state.boardState.boardSize);\r\n  const currentPiece = useSelector((state) => state.boardState.currentPiece);\r\n  const getClicked = useSelector((state) => state.boardState.getClicked);\r\n  const draggable = useSelector((state) => state.boardState.draggable);\r\n  const capturedPiece = useSelector((state) => state.boardState.capturedPiece);\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const findingMatch = useSelector((state) => state.gameState.findingMatch);\r\n  const side = useSelector((state) => state.boardState.side);\r\n  const socketRef = useRef();\r\n  const svgRef = useRef();\r\n  const targetTranslate = useSelector(\r\n    (state) => state.boardState.targetTranslate\r\n  );\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) {\r\n          dispatch({ type: \"setGetClicked\", value: false });\r\n        }\r\n      }\r\n      dispatch({ type: \"setTargetDisplay\", value: \"inline\" });\r\n      dispatch({ type: \"setDraggable\", value: true });\r\n      dispatch({ type: \"setTargetTranslate\", value: translate });\r\n      dispatch({ type: \"setCurrentPiece\", value: board[row][col] });\r\n    }\r\n  };\r\n\r\n  const updateBoard = (newPostion, [curRow, curCol]) => {\r\n    if (newPostion) {\r\n      const [capture, newRow, newCol] = newPostion;\r\n      if (capture) {\r\n        capturedPiece.push(board[newRow][newCol]);\r\n        dispatch({ type: \"setCapturedPiece\", value: [...capturedPiece] });\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\r\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n      updateBoard(newPosition, [curRow, curCol]);\r\n      dispatch({ type: \"setDraggable\", value: false });\r\n      if (!getClicked) {\r\n        dispatch({ type: \"setGetClicked\", value: true });\r\n      } else {\r\n        dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n        dispatch({ type: \"setCurrentPiece\", value: null });\r\n        dispatch({ type: \"setGetClicked\", value: false });\r\n      }\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      if (newPosition) {\r\n        dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const svg = svgRef.current;\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n    updateBoard(newPosition, [curRow, curCol]);\r\n    dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n    dispatch({ type: \"setCurrentPiece\", value: null });\r\n    dispatch({ type: \"setBoard\", value: [...board] });\r\n    if (newPosition) {\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  const handleResize = () => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: initializeBoard(width / 9, side),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: initializeBoard(width / 9, side),\r\n    });\r\n\r\n    window.ondragstart = () => false;\r\n    socketRef.current = io(\"http://localhost:8080/play\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (findingMatch) {\r\n      console.log(\"findMatch\");\r\n      socketRef.current.emit(\"findMatch\");\r\n    }\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    window.onresize = handleResize;\r\n    socketRef.current.on(\"foundMatch\", (opponentId, firstMove) => {\r\n      console.log(firstMove);\r\n      dispatch({ type: \"setTurnToMove\", value: firstMove });\r\n\r\n      socketRef.current.opponentId = opponentId;\r\n      dispatch({ type: \"setFindingMatch\", value: false });\r\n    });\r\n\r\n    socketRef.current.on(\"timeout\", () => {\r\n      dispatch({ type: \"setFindingMatch\", value: null });\r\n    });\r\n\r\n    socketRef.current.once(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n\r\n    return () => {\r\n      window.onmouseup = null;\r\n      window.onmousemove = null;\r\n      socketRef.current.removeAllListeners();\r\n    };\r\n  });\r\n\r\n  return (\r\n    <svg\r\n      width={boardSize[0]}\r\n      height={boardSize[1]}\r\n      onClick={handleClick}\r\n      style={{\r\n        backgroundImage: \"url(/images/Board/board.jpg)\",\r\n      }}\r\n      ref={svgRef}\r\n    >\r\n      <image\r\n        href=\"/images/Target_Icon/target.gif\"\r\n        width={boardSize[0] / 9}\r\n        height={boardSize[0] / 9}\r\n        style={{ display: targetDisplay }}\r\n        transform={targetTranslate}\r\n      ></image>\r\n      <Piece board={board} handleMouseDown={handleMouseDown} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}