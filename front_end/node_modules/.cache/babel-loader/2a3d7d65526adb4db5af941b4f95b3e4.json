{"ast":null,"code":"class Piece {\n  constructor(width, row, col, name) {\n    this.width = width;\n    this.position = [row, col];\n    this.name = name;\n    this.side = name.split(\"-\")[1];\n    this.translate = `translate(${width * col}, ${width * row})`;\n  }\n\n  move(x, y) {\n    const translate = `translate(${x - this.width / 2}, ${y - this.width / 2})`;\n    this.translate = translate;\n  }\n\n  checkValidMove(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\n    const valid = newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10;\n    const existMove = this.moves.some(move => {\n      return move[0] === moveRow && move[1] === moveCol;\n    });\n    return valid && existMove && !this.putGeneralInDanger(newRow, newCol, board);\n  }\n\n  setPosition(capture, newRow, newCol) {\n    const [translateX, translateY] = [newCol * this.width, newRow * this.width];\n    const translate = `translate(${translateX}, ${translateY})`;\n    this.position = [newRow, newCol];\n    this.translate = translate;\n    return [capture, newRow, newCol];\n  }\n\n  setNewPosition(x, y, board, turnToMove) {\n    const newCol = Math.floor(x / this.width);\n    const newRow = Math.floor(y / this.width);\n    const [curRow, curCol] = this.position;\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n    this.translate = `translate(${translateX}, ${translateY})`;\n\n    if (turnToMove) {\n      if (this.checkValidMove(newRow, newCol, board)) {\n        if (!board[newRow][newCol].side) {\n          if (this.countPiecesBetween(newRow, newCol, board) === 0) return this.setPosition(false, newRow, newCol);\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, board) === 1) return this.setPosition(true, newRow, newCol);\n      }\n    }\n\n    return null;\n  }\n\n  countPiecesBetween(newRow, newCol, board) {\n    let [curRow, curCol] = this.position;\n    let count = 0;\n\n    if (newRow === curRow) {\n      do {\n        curCol += curCol > newCol ? -1 : 1;\n        if (board[curRow][curCol]) count++;\n      } while (curCol !== newCol);\n    } else {\n      do {\n        curRow += curRow > newRow ? -1 : 1;\n        if (board[curRow][curCol]) count++;\n      } while (curRow !== newRow);\n    }\n\n    return count;\n  }\n\n  putGeneralInDanger(newRow, newCol, board) {\n    const tmpBoard = board.reduce((acc, row) => {\n      acc.push([...row]);\n      return acc;\n    }, []);\n    this.updateTmpBoard(newRow, newCol, tmpBoard);\n\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (tmpBoard[i][j] && tmpBoard[i][j].side !== this.side) if (tmpBoard[i][j].canCaptureGeneral(tmpBoard)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  updateTmpBoard(newRow, newCol, tmpBoard) {\n    const [curRow, curCol] = this.position;\n    const tmp = tmpBoard[curRow][curCol];\n    tmpBoard[curRow][curCol] = 0;\n    tmpBoard[newRow][newCol] = tmp;\n  }\n\n  canCaptureGeneral(tmpBoard) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\n        if (tmpBoard[newRow][newCol].side) if (tmpBoard[newRow][newCol].side !== tmpBoard[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 1) if (tmpBoard[newRow][newCol].name.split(\"-\")[0] === \"general\") return true;\n      }\n    }\n  }\n\n  animateMove([newRow, newCol]) {\n    const [curRow, curCol] = this.position;\n    const DOMNode = document.querySelector(`#p${curRow}${curCol}`);\n    if (curRow === newRow) this.moveVertical(newRow, DOMNode);else this.moveDiagonal([newRow, newCol], DOMNode);\n    this.setPosition(null, newRow, newCol);\n  }\n\n  moveVertical(yB, DOMNode) {\n    const [yA, xA] = this.position;\n    let step = 0;\n\n    const animate = () => {\n      console.log(\"animate\");\n      console.log([Math.abs(step) < Math.abs(yB - yA)]);\n\n      if (Math.abs(step) < Math.abs(yB - yA)) {\n        step += (yB - yA) / (0.3 * 60);\n        const translateX = xA * this.width;\n        const translateY = (yA + step) * this.width;\n        const translate = `translate(${translateX}, ${translateY})`;\n        DOMNode.setAttribute(\"transform\", translate);\n        window.requestAnimationFrame(animate);\n      } else if (Math.abs(step) > Math.abs(yB - yA)) {\n        const translate = `translate(${xA * this.width}, ${yB * this.width})`;\n        DOMNode.setAttribute(\"transform\", translate);\n      }\n    };\n\n    window.requestAnimationFrame(animate);\n  }\n\n  moveDiagonal([yB, xB], DOMNode) {\n    const [yA, xA] = this.position;\n    let step = 0;\n\n    const animate = () => {\n      console.log(\"animate\");\n\n      if (Math.abs(step) < Math.abs(xB - xA)) {\n        step += (xB - xA) / (0.3 * 60);\n        let y = step / (xB - xA) * (yB - yA) + yA;\n        const translateX = (xA + step) * this.width;\n        const translateY = yA * this.width;\n        const translate = `translate(${translateX}, ${translateY})`;\n        DOMNode.setAttribute(\"transform\", translate);\n        window.requestAnimationFrame(animate);\n      } else if (Math.abs(step) > Math.abs(xB - xA)) {\n        const translate = `translate(${xB * this.width}, ${yB * this.width})`;\n        DOMNode.setAttribute(\"transform\", translate);\n      }\n    };\n\n    window.requestAnimationFrame(animate);\n  }\n\n}\n\nexport default Piece;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/piece.js"],"names":["Piece","constructor","width","row","col","name","position","side","split","translate","move","x","y","checkValidMove","newRow","newCol","board","curRow","curCol","moveRow","moveCol","valid","existMove","moves","some","putGeneralInDanger","setPosition","capture","translateX","translateY","setNewPosition","turnToMove","Math","floor","countPiecesBetween","count","tmpBoard","reduce","acc","push","updateTmpBoard","i","j","canCaptureGeneral","tmp","animateMove","DOMNode","document","querySelector","moveVertical","moveDiagonal","yB","yA","xA","step","animate","console","log","abs","setAttribute","window","requestAnimationFrame","xB"],"mappings":"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","sourcesContent":["class Piece {\r\n  constructor(width, row, col, name) {\r\n    this.width = width;\r\n    this.position = [row, col];\r\n    this.name = name;\r\n    this.side = name.split(\"-\")[1];\r\n    this.translate = `translate(${width * col}, ${width * row})`;\r\n  }\r\n\r\n  move(x, y) {\r\n    const translate = `translate(${x - this.width / 2}, ${y - this.width / 2})`;\r\n    this.translate = translate;\r\n  }\r\n\r\n  checkValidMove(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\r\n    const valid = newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10;\r\n    const existMove = this.moves.some((move) => {\r\n      return move[0] === moveRow && move[1] === moveCol;\r\n    });\r\n    return (\r\n      valid && existMove && !this.putGeneralInDanger(newRow, newCol, board)\r\n    );\r\n  }\r\n\r\n  setPosition(capture, newRow, newCol) {\r\n    const [translateX, translateY] = [newCol * this.width, newRow * this.width];\r\n    const translate = `translate(${translateX}, ${translateY})`;\r\n    this.position = [newRow, newCol];\r\n    this.translate = translate;\r\n    return [capture, newRow, newCol];\r\n  }\r\n\r\n  setNewPosition(x, y, board, turnToMove) {\r\n    const newCol = Math.floor(x / this.width);\r\n    const newRow = Math.floor(y / this.width);\r\n    const [curRow, curCol] = this.position;\r\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n    this.translate = `translate(${translateX}, ${translateY})`;\r\n    if (turnToMove) {\r\n      if (this.checkValidMove(newRow, newCol, board)) {\r\n        if (!board[newRow][newCol].side) {\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 0)\r\n            return this.setPosition(false, newRow, newCol);\r\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 1)\r\n            return this.setPosition(true, newRow, newCol);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  countPiecesBetween(newRow, newCol, board) {\r\n    let [curRow, curCol] = this.position;\r\n    let count = 0;\r\n    if (newRow === curRow) {\r\n      do {\r\n        curCol += curCol > newCol ? -1 : 1;\r\n        if (board[curRow][curCol]) count++;\r\n      } while (curCol !== newCol);\r\n    } else {\r\n      do {\r\n        curRow += curRow > newRow ? -1 : 1;\r\n        if (board[curRow][curCol]) count++;\r\n      } while (curRow !== newRow);\r\n    }\r\n    return count;\r\n  }\r\n\r\n  putGeneralInDanger(newRow, newCol, board) {\r\n    const tmpBoard = board.reduce((acc, row) => {\r\n      acc.push([...row]);\r\n      return acc;\r\n    }, []);\r\n    this.updateTmpBoard(newRow, newCol, tmpBoard);\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (tmpBoard[i][j] && tmpBoard[i][j].side !== this.side)\r\n          if (tmpBoard[i][j].canCaptureGeneral(tmpBoard)) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateTmpBoard(newRow, newCol, tmpBoard) {\r\n    const [curRow, curCol] = this.position;\r\n    const tmp = tmpBoard[curRow][curCol];\r\n    tmpBoard[curRow][curCol] = 0;\r\n    tmpBoard[newRow][newCol] = tmp;\r\n  }\r\n\r\n  canCaptureGeneral(tmpBoard) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\r\n        if (tmpBoard[newRow][newCol].side)\r\n          if (tmpBoard[newRow][newCol].side !== tmpBoard[curRow][curCol].side)\r\n            if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 1)\r\n              if (tmpBoard[newRow][newCol].name.split(\"-\")[0] === \"general\")\r\n                return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  animateMove([newRow, newCol]) {\r\n    const [curRow, curCol] = this.position;\r\n    const DOMNode = document.querySelector(`#p${curRow}${curCol}`);\r\n    if (curRow === newRow) this.moveVertical(newRow, DOMNode);\r\n    else this.moveDiagonal([newRow, newCol], DOMNode);\r\n    this.setPosition(null, newRow, newCol);\r\n  }\r\n\r\n  moveVertical(yB, DOMNode) {\r\n    const [yA, xA] = this.position;\r\n    let step = 0;\r\n    const animate = () => {\r\n      console.log(\"animate\");\r\n      console.log([Math.abs(step) < Math.abs(yB - yA)]);\r\n      if (Math.abs(step) < Math.abs(yB - yA)) {\r\n        step += (yB - yA) / (0.3 * 60);\r\n        const translateX = xA * this.width;\r\n        const translateY = (yA + step) * this.width;\r\n        const translate = `translate(${translateX}, ${translateY})`;\r\n        DOMNode.setAttribute(\"transform\", translate);\r\n        window.requestAnimationFrame(animate);\r\n      } else if (Math.abs(step) > Math.abs(yB - yA)) {\r\n        const translate = `translate(${xA * this.width}, ${yB * this.width})`;\r\n        DOMNode.setAttribute(\"transform\", translate);\r\n      }\r\n    };\r\n    window.requestAnimationFrame(animate);\r\n  }\r\n\r\n  moveDiagonal([yB, xB], DOMNode) {\r\n    const [yA, xA] = this.position;\r\n    let step = 0;\r\n    const animate = () => {\r\n      console.log(\"animate\");\r\n      if (Math.abs(step) < Math.abs(xB - xA)) {\r\n        step += (xB - xA) / (0.3 * 60);\r\n        let y = (step / (xB - xA)) * (yB - yA) + yA;\r\n        const translateX = (xA + step) * this.width;\r\n        const translateY = yA * this.width;\r\n        const translate = `translate(${translateX}, ${translateY})`;\r\n        DOMNode.setAttribute(\"transform\", translate);\r\n        window.requestAnimationFrame(animate);\r\n      } else if (Math.abs(step) > Math.abs(xB - xA)) {\r\n        const translate = `translate(${xB * this.width}, ${yB * this.width})`;\r\n        DOMNode.setAttribute(\"transform\", translate);\r\n      }\r\n    };\r\n    window.requestAnimationFrame(animate);\r\n  }\r\n}\r\n\r\nexport default Piece;\r\n"]},"metadata":{},"sourceType":"module"}