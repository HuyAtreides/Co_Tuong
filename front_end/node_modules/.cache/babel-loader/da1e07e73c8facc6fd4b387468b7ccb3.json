{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport initializeBoard from \"../initializeBoard\";\nimport Piece from \"./piece.jsx\";\nimport \"./board.scss\";\nimport getSVGLocation from \"../getSVGLocation.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const [board, setBoard] = useState(initializeBoard(520 / 9));\n  const [targetDisplay, setTargetDisplay] = useState(\"none\");\n  const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\n  const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\n  const [currentPiece, setCurrentPiece] = useState(null);\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n    setTargetDisplay(\"inline\");\n    setTargetTranslate(translate);\n    setCurrentPiece(board[row][col]);\n  };\n\n  const handleMouseUp = event => {\n    console.log(currentPiece);\n    setTargetDisplay(\"none\");\n    setCurrentPiece(null);\n  };\n\n  const handleMouseMove = event => {\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n\n    if (currentPiece) {\n      currentPiece.move(x, y);\n    }\n  };\n\n  useEffect(() => {\n    const width = +window.innerWidth;\n    const boardWidth = width * (90 / 100);\n\n    if (width < 525) {\n      setBoardSize([boardWidth, boardWidth / (521 / 577)]);\n      setBoard(initializeBoard(boardWidth / 9));\n    }\n  }, []);\n  useEffect(() => {\n    window.onmousemove = handleMouseMove;\n  });\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: boardSize[0],\n    height: boardSize[1],\n    style: {\n      backgroundImage: \"url(/images/Board/board.jpg)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"image\", {\n      href: \"/images/target.gif\",\n      width: boardSize[0] / 9,\n      height: boardSize[0] / 9,\n      style: {\n        display: targetDisplay\n      },\n      id: \"target-icon\",\n      transform: targetTranslate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Piece, {\n      board: board,\n      handleMouseDown: handleMouseDown,\n      handleMouseMove: handleMouseMove,\n      handleMouseUp: handleMouseUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"UcZj+1rAZUemcpWuyLhay1RSt6U=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/board.jsx"],"names":["React","useState","useEffect","initializeBoard","Piece","getSVGLocation","Board","props","board","setBoard","targetDisplay","setTargetDisplay","targetTranslate","setTargetTranslate","boardSize","setBoardSize","currentPiece","setCurrentPiece","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","handleMouseUp","console","log","handleMouseMove","x","y","clientX","clientY","move","width","window","innerWidth","boardWidth","onmousemove","backgroundImage","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport initializeBoard from \"../initializeBoard\";\r\nimport Piece from \"./piece.jsx\";\r\nimport \"./board.scss\";\r\nimport getSVGLocation from \"../getSVGLocation.js\";\r\n\r\nfunction Board(props) {\r\n  const [board, setBoard] = useState(initializeBoard(520 / 9));\r\n  const [targetDisplay, setTargetDisplay] = useState(\"none\");\r\n  const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\r\n  const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\r\n  const [currentPiece, setCurrentPiece] = useState(null);\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    setTargetDisplay(\"inline\");\r\n    setTargetTranslate(translate);\r\n    setCurrentPiece(board[row][col]);\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    console.log(currentPiece);\r\n    setTargetDisplay(\"none\");\r\n    setCurrentPiece(null);\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n    if (currentPiece) {\r\n      currentPiece.move(x, y);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = +window.innerWidth;\r\n    const boardWidth = width * (90 / 100);\r\n    if (width < 525) {\r\n      setBoardSize([boardWidth, boardWidth / (521 / 577)]);\r\n      setBoard(initializeBoard(boardWidth / 9));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.onmousemove = handleMouseMove;\r\n  });\r\n\r\n  return (\r\n    <svg\r\n      width={boardSize[0]}\r\n      height={boardSize[1]}\r\n      style={{\r\n        backgroundImage: \"url(/images/Board/board.jpg)\",\r\n      }}\r\n    >\r\n      <image\r\n        href=\"/images/target.gif\"\r\n        width={boardSize[0] / 9}\r\n        height={boardSize[0] / 9}\r\n        style={{ display: targetDisplay }}\r\n        id=\"target-icon\"\r\n        transform={targetTranslate}\r\n      ></image>\r\n      <Piece\r\n        board={board}\r\n        handleMouseDown={handleMouseDown}\r\n        handleMouseMove={handleMouseMove}\r\n        handleMouseUp={handleMouseUp}\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}