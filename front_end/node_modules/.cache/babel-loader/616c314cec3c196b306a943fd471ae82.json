{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\Board\\\\Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport Piece from \"./Piece/Piece.jsx\";\nimport \"./Board.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport getSVGLocation from \"./getSVGLocation.js\";\nimport { SocketContext } from \"../../../App/App.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.boardState.board);\n  const targetDisplay = useSelector(state => state.boardState.targetDisplay);\n  const boardSize = useSelector(state => state.boardState.boardSize);\n  const currentPiece = useSelector(state => state.boardState.currentPiece);\n  const getClicked = useSelector(state => state.boardState.getClicked);\n  const draggable = useSelector(state => state.boardState.draggable);\n  const turnToMove = useSelector(state => state.boardState.turnToMove);\n  const side = useSelector(state => state.boardState.side);\n  const pause = useSelector(state => state.gameState.pause);\n  const svgRef = useRef();\n  const timerRef = useRef();\n  const ref = useRef();\n  const initialTimeRef = useRef();\n  const targetTranslate = useSelector(state => state.boardState.targetTranslate);\n  const sendGameResult = useSelector(state => state.gameState.sendGameResult);\n  const [socket, _] = useContext(SocketContext);\n  const currentIntervalID = useSelector(state => state.appState.currentIntervalID);\n  const gameResult = useSelector(state => state.gameState.gameResult);\n\n  const startCountDown = (restart, start) => {\n    initialTimeRef.current = new Date();\n    clearInterval(timerRef.current);\n    dispatch({\n      type: restart,\n      value: \"restart\"\n    });\n    timerRef.current = setInterval(() => {\n      const currentTime = new Date();\n      const timeElapsed = Math.floor((currentTime - initialTimeRef.current) / 1000);\n      dispatch({\n        type: start,\n        value: timeElapsed\n      });\n    }, 1000);\n    dispatch({\n      type: \"setCurrentIntervalID\",\n      value: timerRef.current\n    });\n  };\n\n  const setTimer = (playerTurn, gameFinish) => {\n    if (!ref.current) {\n      ref.current = new Worker(\"/web_worker_timer/webWorkerTimer.js\");\n\n      ref.current.onmessage = () => {\n        if (playerTurn) dispatch({\n          type: \"setPlayerTimeLeftToMove\",\n          value: null\n        });else dispatch({\n          type: \"setOpponentTimeLeftToMove\",\n          value: null\n        });\n      };\n\n      dispatch({\n        type: \"setCurrentIntervalID\",\n        value: ref.current\n      });\n    }\n\n    if (gameFinish) {\n      ref.current.postMessage([null, true]);\n      dispatch({\n        type: \"setOpponentTimeLeftToMove\",\n        value: \"restart\"\n      });\n      dispatch({\n        type: \"setPlayerTimeLeftToMove\",\n        value: \"restart\"\n      });\n      dispatch({\n        type: \"setTurnToMove\",\n        value: false\n      });\n      return;\n    }\n\n    if (playerTurn) dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: \"restart\"\n    });else dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: \"restart\"\n    });\n    ref.current.postMessage([playerTurn, false]); // if (playerTurn) {\n    //   ref.current.postMessage([true, false]);\n    //   // startCountDown(\"setOpponentTimeLeftToMove\", \"setPlayerTimeLeftToMove\");\n    // } else {\n    //   ref.current.postMessage([false, false]);\n    //   // startCountDown(\"setPlayerTimeLeftToMove\", \"setOpponentTimeLeftToMove\");\n    // }\n  };\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n\n        if (row !== curRow || curCol !== col) {\n          dispatch({\n            type: \"setGetClicked\",\n            value: false\n          });\n        }\n      }\n\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"inline\"\n      });\n      dispatch({\n        type: \"setDraggable\",\n        value: true\n      });\n      dispatch({\n        type: \"setTargetTranslate\",\n        value: translate\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: board[row][col]\n      });\n    }\n  };\n\n  const updateBoard = (newPostion, [curRow, curCol]) => {\n    if (newPostion) {\n      const [capture, newRow, newCol] = newPostion;\n\n      if (capture) {\n        dispatch({\n          type: \"setCapturedPieces\",\n          value: board[newRow][newCol]\n        });\n      }\n\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    }\n  };\n\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\n      setTimer(true, false);\n    }\n  };\n\n  const updateCurrentPiece = newPosition => {\n    if (newPosition || getClicked) {\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"none\"\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: null\n      });\n      dispatch({\n        type: \"setGetClicked\",\n        value: false\n      });\n    } else {\n      dispatch({\n        type: \"setGetClicked\",\n        value: true\n      });\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      const [curRow, curCol] = currentPiece.position;\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n      updateBoard(newPosition, [curRow, curCol]);\n      dispatch({\n        type: \"setDraggable\",\n        value: false\n      });\n      updateCurrentPiece(newPosition);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n\n      if (newPosition) {\n        dispatch({\n          type: \"setTurnToMove\",\n          value: !turnToMove\n        });\n        setTimer(false, false);\n        socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n      }\n    }\n  };\n\n  const handleMouseMove = event => {\n    const svg = svgRef.current;\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      });\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    const [curRow, curCol] = currentPiece.position;\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n    updateBoard(newPosition, [curRow, curCol]);\n    dispatch({\n      type: \"setTargetDisplay\",\n      value: \"none\"\n    });\n    dispatch({\n      type: \"setCurrentPiece\",\n      value: null\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: [...board]\n    });\n\n    if (newPosition) {\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      });\n      setTimer(false, false);\n      socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n    }\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const svg = svgRef.current;\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  const constructNewBoard = width => {\n    const newBoard = board.map(row => {\n      const newRow = row.map(piece => {\n        if (piece) {\n          const [row, col] = piece.position;\n          piece.width = width;\n          piece.translate = `translate(${width * col}, ${width * row})`;\n          return piece;\n        }\n\n        return 0;\n      });\n      return newRow;\n    });\n    return newBoard;\n  };\n\n  const handleResize = () => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: constructNewBoard(width / 9)\n    });\n  };\n\n  const registerEventHandler = () => {\n    socket.on(\"foundMatch\", (opponentID, firstMove) => {\n      socket.opponentID = opponentID;\n      dispatch({\n        type: \"setTurnToMove\",\n        value: firstMove\n      });\n      dispatch({\n        type: \"setFoundMatch\",\n        value: true\n      });\n      setTimer(firstMove);\n    });\n    socket.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\n    });\n    socket.on(\"gameOver\", (result, reason) => {\n      if (gameResult !== null) return;\n      const listItemRef = /*#__PURE__*/React.createRef();\n\n      if (result === \"Draw\") {\n        dispatch({\n          type: \"setGameResult\",\n          value: \"Draw\"\n        });\n        dispatch({\n          type: \"setMessage\",\n          value: {\n            type: \"game result message\",\n            winner: \"\",\n            reason: \"Game Draw By Agreement\",\n            className: \"game-message\",\n            ref: listItemRef\n          }\n        });\n      } else {\n        dispatch({\n          type: \"setGameResult\",\n          value: result\n        });\n        dispatch({\n          type: \"setMessage\",\n          value: {\n            type: \"game result message\",\n            winner: `${result === \"Won\" ? \"Phan Gia Huy\" : \"Opponent\"} Won - `,\n            reason: reason,\n            className: \"game-message\",\n            ref: listItemRef\n          }\n        });\n      }\n\n      setTimer(null, true);\n    });\n  };\n\n  useEffect(() => {\n    const width = document.querySelector(\".board-container\").offsetWidth;\n    dispatch({\n      type: \"setBoardSize\",\n      value: [width, width / (521 / 577)]\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: constructNewBoard(width / 9)\n    });\n\n    window.ondragstart = () => false;\n\n    if (currentIntervalID) ref.current = currentIntervalID;\n  }, []);\n  useEffect(() => {\n    if (sendGameResult) {\n      socket.emit(\"gameFinish\", sendGameResult);\n      setTimer(null, true);\n      dispatch({\n        type: \"setSendGameResult\",\n        value: false\n      });\n    }\n\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    window.onresize = handleResize;\n    registerEventHandler();\n    return () => {\n      window.onmouseup = null;\n      window.onmousemove = null;\n      window.onresize = null;\n      socket.removeAllListeners(\"foundMatch\");\n      socket.removeAllListeners(\"gameOver\");\n      socket.removeAllListeners(\"move\");\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: boardSize[0],\n    height: boardSize[1],\n    onClick: handleClick,\n    style: {\n      backgroundImage: \"url(/images/Board/board.jpg)\"\n    },\n    ref: svgRef,\n    children: [/*#__PURE__*/_jsxDEV(\"image\", {\n      href: \"/images/Target_Icon/target.gif\",\n      width: boardSize[0] / 9 - 3,\n      height: boardSize[0] / 9 - 3,\n      style: {\n        display: targetDisplay\n      },\n      transform: targetTranslate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Piece, {\n      board: board,\n      handleMouseDown: handleMouseDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"iA0EEzhTl96lvTZPrKVid48+46g=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Board;\nexport default _c2 = /*#__PURE__*/React.memo(Board);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Board/Board.jsx"],"names":["React","useEffect","useRef","useContext","Piece","useSelector","useDispatch","getSVGLocation","SocketContext","Board","dispatch","board","state","boardState","targetDisplay","boardSize","currentPiece","getClicked","draggable","turnToMove","side","pause","gameState","svgRef","timerRef","ref","initialTimeRef","targetTranslate","sendGameResult","socket","_","currentIntervalID","appState","gameResult","startCountDown","restart","start","current","Date","clearInterval","type","value","setInterval","currentTime","timeElapsed","Math","floor","setTimer","playerTurn","gameFinish","Worker","onmessage","postMessage","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","curRow","curCol","position","updateBoard","newPostion","capture","newRow","newCol","handleOpponentMove","animateMove","updateCurrentPiece","newPosition","handleMouseUp","svg","x","y","clientX","clientY","setNewPosition","emit","handleMouseMove","move","moveOnClick","handleClick","target","constructNewBoard","width","newBoard","map","piece","handleResize","document","querySelector","offsetWidth","registerEventHandler","on","opponentID","firstMove","result","reason","listItemRef","createRef","winner","className","window","ondragstart","onmousemove","onmouseup","onresize","removeAllListeners","backgroundImage","display","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useContext } from \"react\";\r\nimport Piece from \"./Piece/Piece.jsx\";\r\nimport \"./Board.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getSVGLocation from \"./getSVGLocation.js\";\r\nimport { SocketContext } from \"../../../App/App.jsx\";\r\n\r\nfunction Board() {\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => state.boardState.board);\r\n  const targetDisplay = useSelector((state) => state.boardState.targetDisplay);\r\n  const boardSize = useSelector((state) => state.boardState.boardSize);\r\n  const currentPiece = useSelector((state) => state.boardState.currentPiece);\r\n  const getClicked = useSelector((state) => state.boardState.getClicked);\r\n  const draggable = useSelector((state) => state.boardState.draggable);\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const side = useSelector((state) => state.boardState.side);\r\n  const pause = useSelector((state) => state.gameState.pause);\r\n  const svgRef = useRef();\r\n  const timerRef = useRef();\r\n  const ref = useRef();\r\n  const initialTimeRef = useRef();\r\n  const targetTranslate = useSelector(\r\n    (state) => state.boardState.targetTranslate\r\n  );\r\n  const sendGameResult = useSelector((state) => state.gameState.sendGameResult);\r\n  const [socket, _] = useContext(SocketContext);\r\n  const currentIntervalID = useSelector(\r\n    (state) => state.appState.currentIntervalID\r\n  );\r\n  const gameResult = useSelector((state) => state.gameState.gameResult);\r\n\r\n  const startCountDown = (restart, start) => {\r\n    initialTimeRef.current = new Date();\r\n    clearInterval(timerRef.current);\r\n    dispatch({ type: restart, value: \"restart\" });\r\n    timerRef.current = setInterval(() => {\r\n      const currentTime = new Date();\r\n      const timeElapsed = Math.floor(\r\n        (currentTime - initialTimeRef.current) / 1000\r\n      );\r\n      dispatch({ type: start, value: timeElapsed });\r\n    }, 1000);\r\n    dispatch({ type: \"setCurrentIntervalID\", value: timerRef.current });\r\n  };\r\n\r\n  const setTimer = (playerTurn, gameFinish) => {\r\n    if (!ref.current) {\r\n      ref.current = new Worker(\"/web_worker_timer/webWorkerTimer.js\");\r\n      ref.current.onmessage = () => {\r\n        if (playerTurn)\r\n          dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n        else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n      };\r\n      dispatch({ type: \"setCurrentIntervalID\", value: ref.current });\r\n    }\r\n    if (gameFinish) {\r\n      ref.current.postMessage([null, true]);\r\n      dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n      dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n      dispatch({ type: \"setTurnToMove\", value: false });\r\n      return;\r\n    }\r\n    if (playerTurn)\r\n      dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n    else dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n    ref.current.postMessage([playerTurn, false]);\r\n    // if (playerTurn) {\r\n    //   ref.current.postMessage([true, false]);\r\n    //   // startCountDown(\"setOpponentTimeLeftToMove\", \"setPlayerTimeLeftToMove\");\r\n    // } else {\r\n    //   ref.current.postMessage([false, false]);\r\n    //   // startCountDown(\"setPlayerTimeLeftToMove\", \"setOpponentTimeLeftToMove\");\r\n    // }\r\n  };\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) {\r\n          dispatch({ type: \"setGetClicked\", value: false });\r\n        }\r\n      }\r\n      dispatch({ type: \"setTargetDisplay\", value: \"inline\" });\r\n      dispatch({ type: \"setDraggable\", value: true });\r\n      dispatch({ type: \"setTargetTranslate\", value: translate });\r\n      dispatch({ type: \"setCurrentPiece\", value: board[row][col] });\r\n    }\r\n  };\r\n\r\n  const updateBoard = (newPostion, [curRow, curCol]) => {\r\n    if (newPostion) {\r\n      const [capture, newRow, newCol] = newPostion;\r\n      if (capture) {\r\n        dispatch({ type: \"setCapturedPieces\", value: board[newRow][newCol] });\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol] && board[curRow][curCol].side === side[0]) {\r\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\r\n      setTimer(true, false);\r\n    }\r\n  };\r\n\r\n  const updateCurrentPiece = (newPosition) => {\r\n    if (newPosition || getClicked) {\r\n      dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n      dispatch({ type: \"setCurrentPiece\", value: null });\r\n      dispatch({ type: \"setGetClicked\", value: false });\r\n    } else {\r\n      dispatch({ type: \"setGetClicked\", value: true });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n      updateBoard(newPosition, [curRow, curCol]);\r\n      dispatch({ type: \"setDraggable\", value: false });\r\n      updateCurrentPiece(newPosition);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      if (newPosition) {\r\n        dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n        setTimer(false, false);\r\n        socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const svg = svgRef.current;\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n    updateBoard(newPosition, [curRow, curCol]);\r\n    dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n    dispatch({ type: \"setCurrentPiece\", value: null });\r\n    dispatch({ type: \"setBoard\", value: [...board] });\r\n    if (newPosition) {\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      setTimer(false, false);\r\n      socket.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const svg = svgRef.current;\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY, svg);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  const constructNewBoard = (width) => {\r\n    const newBoard = board.map((row) => {\r\n      const newRow = row.map((piece) => {\r\n        if (piece) {\r\n          const [row, col] = piece.position;\r\n          piece.width = width;\r\n          piece.translate = `translate(${width * col}, ${width * row})`;\r\n          return piece;\r\n        }\r\n        return 0;\r\n      });\r\n      return newRow;\r\n    });\r\n    return newBoard;\r\n  };\r\n\r\n  const handleResize = () => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({\r\n      type: \"setBoardSize\",\r\n      value: [width, width / (521 / 577)],\r\n    });\r\n    dispatch({\r\n      type: \"setBoard\",\r\n      value: constructNewBoard(width / 9),\r\n    });\r\n  };\r\n\r\n  const registerEventHandler = () => {\r\n    socket.on(\"foundMatch\", (opponentID, firstMove) => {\r\n      socket.opponentID = opponentID;\r\n      dispatch({ type: \"setTurnToMove\", value: firstMove });\r\n      dispatch({ type: \"setFoundMatch\", value: true });\r\n      setTimer(firstMove);\r\n    });\r\n\r\n    socket.on(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n\r\n    socket.on(\"gameOver\", (result, reason) => {\r\n      if (gameResult !== null) return;\r\n      const listItemRef = React.createRef();\r\n      if (result === \"Draw\") {\r\n        dispatch({ type: \"setGameResult\", value: \"Draw\" });\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            type: \"game result message\",\r\n            winner: \"\",\r\n            reason: \"Game Draw By Agreement\",\r\n            className: \"game-message\",\r\n            ref: listItemRef,\r\n          },\r\n        });\r\n      } else {\r\n        dispatch({ type: \"setGameResult\", value: result });\r\n        dispatch({\r\n          type: \"setMessage\",\r\n          value: {\r\n            type: \"game result message\",\r\n            winner: `${result === \"Won\" ? \"Phan Gia Huy\" : \"Opponent\"} Won - `,\r\n            reason: reason,\r\n            className: \"game-message\",\r\n            ref: listItemRef,\r\n          },\r\n        });\r\n      }\r\n      setTimer(null, true);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = document.querySelector(\".board-container\").offsetWidth;\r\n    dispatch({ type: \"setBoardSize\", value: [width, width / (521 / 577)] });\r\n    dispatch({ type: \"setBoard\", value: constructNewBoard(width / 9) });\r\n\r\n    window.ondragstart = () => false;\r\n\r\n    if (currentIntervalID) ref.current = currentIntervalID;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (sendGameResult) {\r\n      socket.emit(\"gameFinish\", sendGameResult);\r\n      setTimer(null, true);\r\n      dispatch({ type: \"setSendGameResult\", value: false });\r\n    }\r\n\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    window.onresize = handleResize;\r\n    registerEventHandler();\r\n\r\n    return () => {\r\n      window.onmouseup = null;\r\n      window.onmousemove = null;\r\n      window.onresize = null;\r\n      socket.removeAllListeners(\"foundMatch\");\r\n      socket.removeAllListeners(\"gameOver\");\r\n      socket.removeAllListeners(\"move\");\r\n    };\r\n  });\r\n\r\n  return (\r\n    <svg\r\n      width={boardSize[0]}\r\n      height={boardSize[1]}\r\n      onClick={handleClick}\r\n      style={{\r\n        backgroundImage: \"url(/images/Board/board.jpg)\",\r\n      }}\r\n      ref={svgRef}\r\n    >\r\n      <image\r\n        href=\"/images/Target_Icon/target.gif\"\r\n        width={boardSize[0] / 9 - 3}\r\n        height={boardSize[0] / 9 - 3}\r\n        style={{ display: targetDisplay }}\r\n        transform={targetTranslate}\r\n      ></image>\r\n      <Piece board={board} handleMouseDown={handleMouseDown} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default React.memo(Board);\r\n"]},"metadata":{},"sourceType":"module"}