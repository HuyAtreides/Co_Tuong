{"ast":null,"code":"import _regeneratorRuntime from\"F:/Web/C\\u1EDD T\\u01B0\\u1EDBng/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"F:/Web/C\\u1EDD T\\u01B0\\u1EDBng/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var callAPI=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(method,endPoint,data,isFile){var response,init,responseData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!(method===\"POST\")){_context.next=8;break;}init={method:\"POST\",credentials:\"include\",headers:isFile?{}:{\"Content-Type\":\"application/json\"},body:isFile?data:JSON.stringify(data)};_context.next=5;return fetch(\"/\".concat(endPoint),init);case 5:response=_context.sent;_context.next=11;break;case 8:_context.next=10;return fetch(\"/\".concat(endPoint),{credentials:\"include\"});case 10:response=_context.sent;case 11:_context.next=13;return response.json();case 13:responseData=_context.sent;responseData.ok=response.ok;return _context.abrupt(\"return\",responseData);case 18:_context.prev=18;_context.t0=_context[\"catch\"](0);throw new Error(_context.t0.message);case 21:case\"end\":return _context.stop();}}},_callee,null,[[0,18]]);}));return function callAPI(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export default callAPI;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/callAPI.js"],"names":["callAPI","method","endPoint","data","isFile","init","credentials","headers","body","JSON","stringify","fetch","response","json","responseData","ok","Error","message"],"mappings":"2TAAA,GAAMA,CAAAA,OAAO,0FAAG,iBAAOC,MAAP,CAAeC,QAAf,CAAyBC,IAAzB,CAA+BC,MAA/B,sKAGRH,MAAM,GAAK,MAHH,0BAIJI,IAJI,CAIG,CACXJ,MAAM,CAAE,MADG,CAEXK,WAAW,CAAE,SAFF,CAGXC,OAAO,CAAEH,MAAM,CACX,EADW,CAEX,CACE,eAAgB,kBADlB,CALO,CAQXI,IAAI,CAAEJ,MAAM,CAAGD,IAAH,CAAUM,IAAI,CAACC,SAAL,CAAeP,IAAf,CARX,CAJH,uBAcOQ,CAAAA,KAAK,YAAKT,QAAL,EAAiBG,IAAjB,CAdZ,QAcVO,QAdU,oEAeYD,CAAAA,KAAK,YAAKT,QAAL,EAAiB,CAAEI,WAAW,CAAE,SAAf,CAAjB,CAfjB,SAeLM,QAfK,8CAgBeA,CAAAA,QAAQ,CAACC,IAAT,EAhBf,SAgBNC,YAhBM,eAiBZA,YAAY,CAACC,EAAb,CAAkBH,QAAQ,CAACG,EAA3B,CAjBY,gCAkBLD,YAlBK,iEAoBN,IAAIE,CAAAA,KAAJ,CAAU,YAAIC,OAAd,CApBM,sEAAH,kBAAPjB,CAAAA,OAAO,wDAAb,CAwBA,cAAeA,CAAAA,OAAf","sourcesContent":["const callAPI = async (method, endPoint, data, isFile) => {\r\n  try {\r\n    let response;\r\n    if (method === \"POST\") {\r\n      const init = {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: isFile\r\n          ? {}\r\n          : {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n        body: isFile ? data : JSON.stringify(data),\r\n      };\r\n      response = await fetch(`/${endPoint}`, init);\r\n    } else response = await fetch(`/${endPoint}`, { credentials: \"include\" });\r\n    const responseData = await response.json();\r\n    responseData.ok = response.ok;\r\n    return responseData;\r\n  } catch (err) {\r\n    throw new Error(err.message);\r\n  }\r\n};\r\n\r\nexport default callAPI;\r\n"]},"metadata":{},"sourceType":"module"}