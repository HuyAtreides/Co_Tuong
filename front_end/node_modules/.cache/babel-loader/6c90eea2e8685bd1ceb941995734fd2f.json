{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"./Game.scss\";\nimport { Row } from \"react-bootstrap\";\nimport GameController from \"./GameController/GameController.jsx\";\nimport GamePlayArea from \"./GamePlayArea/GamePlayArea.jsx\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport GameBar from \"./GameBar/GameBar.jsx\";\nimport { SocketContext, SetMoveTimerContext } from \"../../App/context.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const socket = useContext(SocketContext);\n  const setMoveTimer = useContext(SetMoveTimerContext);\n  const [timeSelectorDisplay, setTimeSelectorDisplay] = useState(\"none\");\n  const foundMatch = useSelector(state => state.gameState.foundMatch);\n  const store = useStore();\n  const [centerBoard, setCenterBoard] = useState(false);\n\n  const handleCenterBoard = () => {\n    setCenterBoard(!centerBoard);\n  };\n\n  const handleToggle = () => {\n    setTimeSelectorDisplay(timeSelectorDisplay === \"none\" ? \"flex\" : \"none\");\n  };\n\n  useEffect(() => {\n    const foundMatch = store.getState().gameState.foundMatch;\n\n    if (foundMatch) {\n      const listItemRef = /*#__PURE__*/React.createRef();\n      dispatch({\n        type: \"setGameResult\",\n        value: \"Lose\"\n      });\n      dispatch({\n        type: \"setMessage\",\n        value: {\n          type: \"game result message\",\n          winner: \"Opponent Won - \",\n          reason: \"Game Abandoned\",\n          className: \"game-message\",\n          ref: listItemRef\n        }\n      });\n      setMoveTimer(null, true, dispatch);\n      socket.emit(\"gameFinish\", [\"Won\", \"Game Abandoned\"]);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Row, {\n    md: {\n      cols: 1\n    },\n    className: \"mt-3 pb-3\",\n    children: [/*#__PURE__*/_jsxDEV(GamePlayArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100\",\n      style: {\n        display: centerBoard ? \"block\" : \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), !foundMatch ? /*#__PURE__*/_jsxDEV(GameController, {\n      timeSelectorDisplay: timeSelectorDisplay,\n      handleToggle: handleToggle,\n      handleCenterBoard: handleCenterBoard,\n      centerBoard: centerBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GameBar, {\n      handleCenterBoard: handleCenterBoard,\n      centerBoard: centerBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"kMrGrxDmdFUWzVqyohTeX1/1SJg=\", false, function () {\n  return [useDispatch, useSelector, useStore];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Game.jsx"],"names":["React","useState","useEffect","useContext","Row","GameController","GamePlayArea","useSelector","useDispatch","useStore","GameBar","SocketContext","SetMoveTimerContext","Game","dispatch","socket","setMoveTimer","timeSelectorDisplay","setTimeSelectorDisplay","foundMatch","state","gameState","store","centerBoard","setCenterBoard","handleCenterBoard","handleToggle","getState","listItemRef","createRef","type","value","winner","reason","className","ref","emit","cols","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./Game.scss\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport GameController from \"./GameController/GameController.jsx\";\r\nimport GamePlayArea from \"./GamePlayArea/GamePlayArea.jsx\";\r\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\r\nimport GameBar from \"./GameBar/GameBar.jsx\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../App/context.js\";\r\n\r\nconst Game = () => {\r\n  const dispatch = useDispatch();\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n  const [timeSelectorDisplay, setTimeSelectorDisplay] = useState(\"none\");\r\n  const foundMatch = useSelector((state) => state.gameState.foundMatch);\r\n  const store = useStore();\r\n  const [centerBoard, setCenterBoard] = useState(false);\r\n\r\n  const handleCenterBoard = () => {\r\n    setCenterBoard(!centerBoard);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setTimeSelectorDisplay(timeSelectorDisplay === \"none\" ? \"flex\" : \"none\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const foundMatch = store.getState().gameState.foundMatch;\r\n    if (foundMatch) {\r\n      const listItemRef = React.createRef();\r\n      dispatch({ type: \"setGameResult\", value: \"Lose\" });\r\n      dispatch({\r\n        type: \"setMessage\",\r\n        value: {\r\n          type: \"game result message\",\r\n          winner: \"Opponent Won - \",\r\n          reason: \"Game Abandoned\",\r\n          className: \"game-message\",\r\n          ref: listItemRef,\r\n        },\r\n      });\r\n      setMoveTimer(null, true, dispatch);\r\n      socket.emit(\"gameFinish\", [\"Won\", \"Game Abandoned\"]);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Row md={{ cols: 1 }} className=\"mt-3 pb-3\">\r\n      <GamePlayArea />\r\n      <div\r\n        className=\"w-100\"\r\n        style={{ display: centerBoard ? \"block\" : \"none\" }}\r\n      ></div>\r\n      {!foundMatch ? (\r\n        <GameController\r\n          timeSelectorDisplay={timeSelectorDisplay}\r\n          handleToggle={handleToggle}\r\n          handleCenterBoard={handleCenterBoard}\r\n          centerBoard={centerBoard}\r\n        />\r\n      ) : (\r\n        <GameBar\r\n          handleCenterBoard={handleCenterBoard}\r\n          centerBoard={centerBoard}\r\n        />\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}