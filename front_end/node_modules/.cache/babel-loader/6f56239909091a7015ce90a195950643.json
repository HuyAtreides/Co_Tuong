{"ast":null,"code":"import horseRules from \"./move_rules/horseRules.js\";\nimport Piece from \"./piece.js\";\n\nclass Horse extends Piece {\n  constructor(width, row, col, name, choosenSide) {\n    super(width, row, col, name, choosenSide);\n    this.moves = horseRules;\n  }\n\n  setNewPosition(x, y, board, turnToMove) {\n    const newCol = Math.floor(x / this.width);\n    const newRow = Math.floor(y / this.width);\n    const [curRow, curCol] = this.position;\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n    this.translate = `translate(${translateX}, ${translateY})`;\n\n    if (turnToMove && this.side === this.choosenSide[1]) {\n      if (this.checkValidMove(newRow, newCol, board)) {\n        if (!this.isBlocked(newRow, newCol, board)) {\n          if (!board[newRow][newCol].side) return this.setPosition(false, newRow, newCol);else if (board[newRow][newCol].side !== board[curRow][curCol].side) return this.setPosition(true, newRow, newCol);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  canSaveGeneral(piece, tmpBoard) {\n    const [curRow, curCol] = piece.position;\n\n    for (let move of piece.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= piece.minCol && newCol <= piece.maxCol && newRow >= piece.minRow && newRow <= piece.maxRow && !piece.isBlocked(newRow, newCol, tmpBoard)) {\n        if (!tmpBoard[newRow][newCol].side) {\n          if (piece.countPiecesBetween(newRow, newCol, tmpBoard) === 0) {\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\n            if (!this.isGeneralInDanger(tmpBoard)) return true;\n          }\n        } else if (tmpBoard[newRow][newCol].side !== piece.side) {\n          if (piece.countPiecesBetween(newRow, newCol, tmpBoard) == 1) {\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\n            if (!this.isGeneralInDanger(tmpBoard)) return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isBlocked(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\n\n    if (Math.abs(moveRow) === 2) {\n      return board[curRow + moveRow / 2][curCol] !== 0;\n    } else {\n      return board[curRow][curCol + moveCol / 2] !== 0;\n    }\n  }\n\n  canCaptureGeneral(board) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\n        if (board[newRow][newCol].side) if (board[newRow][newCol].side !== board[curRow][curCol].side) if (!this.isBlocked(newRow, newCol, board)) if (board[newRow][newCol].name.split(\"-\")[0] === \"general\") return true;\n      }\n    }\n  }\n\n}\n\nexport default Horse;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/horse.js"],"names":["horseRules","Piece","Horse","constructor","width","row","col","name","choosenSide","moves","setNewPosition","x","y","board","turnToMove","newCol","Math","floor","newRow","curRow","curCol","position","translateX","translateY","translate","side","checkValidMove","isBlocked","setPosition","canSaveGeneral","piece","tmpBoard","move","minCol","maxCol","minRow","maxRow","countPiecesBetween","updateTmpBoard","isGeneralInDanger","moveRow","moveCol","abs","canCaptureGeneral","split"],"mappings":"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","sourcesContent":["import horseRules from \"./move_rules/horseRules.js\";\r\nimport Piece from \"./piece.js\";\r\n\r\nclass Horse extends Piece {\r\n  constructor(width, row, col, name, choosenSide) {\r\n    super(width, row, col, name, choosenSide);\r\n    this.moves = horseRules;\r\n  }\r\n\r\n  setNewPosition(x, y, board, turnToMove) {\r\n    const newCol = Math.floor(x / this.width);\r\n    const newRow = Math.floor(y / this.width);\r\n    const [curRow, curCol] = this.position;\r\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n    this.translate = `translate(${translateX}, ${translateY})`;\r\n    if (turnToMove && this.side === this.choosenSide[1]) {\r\n      if (this.checkValidMove(newRow, newCol, board)) {\r\n        if (!this.isBlocked(newRow, newCol, board)) {\r\n          if (!board[newRow][newCol].side)\r\n            return this.setPosition(false, newRow, newCol);\r\n          else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n            return this.setPosition(true, newRow, newCol);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  canSaveGeneral(piece, tmpBoard) {\r\n    const [curRow, curCol] = piece.position;\r\n    for (let move of piece.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (\r\n        newCol >= piece.minCol &&\r\n        newCol <= piece.maxCol &&\r\n        newRow >= piece.minRow &&\r\n        newRow <= piece.maxRow &&\r\n        !piece.isBlocked(newRow, newCol, tmpBoard)\r\n      ) {\r\n        if (!tmpBoard[newRow][newCol].side) {\r\n          if (piece.countPiecesBetween(newRow, newCol, tmpBoard) === 0) {\r\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\r\n            if (!this.isGeneralInDanger(tmpBoard)) return true;\r\n          }\r\n        } else if (tmpBoard[newRow][newCol].side !== piece.side) {\r\n          if (piece.countPiecesBetween(newRow, newCol, tmpBoard) == 1) {\r\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\r\n            if (!this.isGeneralInDanger(tmpBoard)) return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isBlocked(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\r\n    if (Math.abs(moveRow) === 2) {\r\n      return board[curRow + moveRow / 2][curCol] !== 0;\r\n    } else {\r\n      return board[curRow][curCol + moveCol / 2] !== 0;\r\n    }\r\n  }\r\n\r\n  canCaptureGeneral(board) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\r\n        if (board[newRow][newCol].side)\r\n          if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n            if (!this.isBlocked(newRow, newCol, board))\r\n              if (board[newRow][newCol].name.split(\"-\")[0] === \"general\")\r\n                return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Horse;\r\n"]},"metadata":{},"sourceType":"module"}