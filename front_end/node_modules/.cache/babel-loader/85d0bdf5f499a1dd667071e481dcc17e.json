{"ast":null,"code":"import Piece from \"./piece.js\";\nimport cannonRules from \"./move_rules/cannonRules.js\";\n\nclass Cannon extends Piece {\n  constructor(width, row, col, name, choosenSide) {\n    super(width, row, col, name, choosenSide);\n    this.moves = cannonRules;\n  }\n\n  canMoveToNewPosition(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n    this.translate = `translate(${translateX}, ${translateY})`;\n\n    if (this.side === this.choosenSide[1]) {\n      const isValid = this.checkValidMove(newRow, newCol, board);\n\n      if (isValid && !/translate/.test(isValid)) {\n        console.log(board[newRow][newCol].name);\n\n        if (!board[newRow][newCol].side) {\n          if (this.countPiecesBetween(newRow, newCol, board) === 0) return true;\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, board) === 2) {\n          console.log(\"capture\");\n          console.log(board[newRow][newCol].name);\n          return \"capture\";\n        }\n      } else if (isValid) return isValid;\n    }\n\n    return false;\n  }\n\n  canCaptureGeneral(tmpBoard) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\n        if (tmpBoard[newRow][newCol].side) if (tmpBoard[newRow][newCol].side !== tmpBoard[curRow][curCol].side) if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 2) if (tmpBoard[newRow][newCol].name.split(\"-\")[0] === \"general\") {\n          return tmpBoard[newRow][newCol].translate;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexport default Cannon;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/cannon.js"],"names":["Piece","cannonRules","Cannon","constructor","width","row","col","name","choosenSide","moves","canMoveToNewPosition","newRow","newCol","board","curRow","curCol","position","translateX","translateY","translate","side","isValid","checkValidMove","test","console","log","countPiecesBetween","canCaptureGeneral","tmpBoard","move","split"],"mappings":"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","sourcesContent":["import Piece from \"./piece.js\";\r\nimport cannonRules from \"./move_rules/cannonRules.js\";\r\n\r\nclass Cannon extends Piece {\r\n  constructor(width, row, col, name, choosenSide) {\r\n    super(width, row, col, name, choosenSide);\r\n    this.moves = cannonRules;\r\n  }\r\n\r\n  canMoveToNewPosition(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n    this.translate = `translate(${translateX}, ${translateY})`;\r\n    if (this.side === this.choosenSide[1]) {\r\n      const isValid = this.checkValidMove(newRow, newCol, board);\r\n      if (isValid && !/translate/.test(isValid)) {\r\n        console.log(board[newRow][newCol].name);\r\n        if (!board[newRow][newCol].side) {\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 0) return true;\r\n        } else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n          if (this.countPiecesBetween(newRow, newCol, board) === 2) {\r\n            console.log(\"capture\");\r\n            console.log(board[newRow][newCol].name);\r\n            return \"capture\";\r\n          }\r\n      } else if (isValid) return isValid;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  canCaptureGeneral(tmpBoard) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\r\n        if (tmpBoard[newRow][newCol].side)\r\n          if (tmpBoard[newRow][newCol].side !== tmpBoard[curRow][curCol].side)\r\n            if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 2)\r\n              if (tmpBoard[newRow][newCol].name.split(\"-\")[0] === \"general\") {\r\n                return tmpBoard[newRow][newCol].translate;\r\n              }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default Cannon;\r\n"]},"metadata":{},"sourceType":"module"}