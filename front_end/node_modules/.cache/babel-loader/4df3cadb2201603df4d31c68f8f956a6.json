{"ast":null,"code":"import React,{useEffect,useContext}from\"react\";import\"./Timer.scss\";import{useDispatch,useSelector,useStore}from\"react-redux\";import{SocketContext,SetMoveTimerContext}from\"../../../App/context.js\";import{jsx as _jsx}from\"react/jsx-runtime\";var Timer=function Timer(props){var dispatch=useDispatch();var store=useStore();var minute=Math.floor(props.timeLeftToMove/60);var second=props.timeLeftToMove%60;var socket=useContext(SocketContext);var setMoveTimer=useContext(SetMoveTimerContext);var turnToMove=useSelector(function(state){return state.boardState.turnToMove;});useEffect(function(){if(props.timeLeftToMove<=0&&turnToMove){var opponent=store.getState().gameState.opponentInfo;dispatch({type:\"setGameResult\",value:\"Lose\"});dispatch({type:\"setMessage\",value:{type:\"game result message\",winner:\"\".concat(opponent.playername,\" Won - \"),reason:\"Game Abandoned\",className:\"game-message\"}});setMoveTimer(null,true,dispatch);socket.emit(\"gameFinish\",[\"Won\",\"Game Abandoned\"]);}},[turnToMove,props.timeLeftToMove]);return/*#__PURE__*/_jsx(\"div\",{className:\"clock \".concat(props.turnToMove&&socket.connected?\"turn-to-move\":\"\"),children:/*#__PURE__*/_jsx(\"span\",{children:(minute<10?\"0\"+minute:minute)+\":\"+(second<10?\"0\"+second:second)})});};export default Timer;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/Timer/Timer.jsx"],"names":["React","useEffect","useContext","useDispatch","useSelector","useStore","SocketContext","SetMoveTimerContext","Timer","props","dispatch","store","minute","Math","floor","timeLeftToMove","second","socket","setMoveTimer","turnToMove","state","boardState","opponent","getState","gameState","opponentInfo","type","value","winner","playername","reason","className","emit","connected"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,UAA3B,KAA6C,OAA7C,CACA,MAAO,cAAP,CACA,OAASC,WAAT,CAAsBC,WAAtB,CAAmCC,QAAnC,KAAmD,aAAnD,CACA,OAASC,aAAT,CAAwBC,mBAAxB,KAAmD,yBAAnD,C,2CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,CACvB,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CACA,GAAMQ,CAAAA,KAAK,CAAGN,QAAQ,EAAtB,CACA,GAAMO,CAAAA,MAAM,CAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,cAAN,CAAuB,EAAlC,CAAf,CACA,GAAMC,CAAAA,MAAM,CAAGP,KAAK,CAACM,cAAN,CAAuB,EAAtC,CACA,GAAME,CAAAA,MAAM,CAAGf,UAAU,CAACI,aAAD,CAAzB,CACA,GAAMY,CAAAA,YAAY,CAAGhB,UAAU,CAACK,mBAAD,CAA/B,CACA,GAAMY,CAAAA,UAAU,CAAGf,WAAW,CAAC,SAACgB,KAAD,QAAWA,CAAAA,KAAK,CAACC,UAAN,CAAiBF,UAA5B,EAAD,CAA9B,CAEAlB,SAAS,CAAC,UAAM,CACd,GAAIQ,KAAK,CAACM,cAAN,EAAwB,CAAxB,EAA6BI,UAAjC,CAA6C,CAC3C,GAAMG,CAAAA,QAAQ,CAAGX,KAAK,CAACY,QAAN,GAAiBC,SAAjB,CAA2BC,YAA5C,CACAf,QAAQ,CAAC,CAAEgB,IAAI,CAAE,eAAR,CAAyBC,KAAK,CAAE,MAAhC,CAAD,CAAR,CACAjB,QAAQ,CAAC,CACPgB,IAAI,CAAE,YADC,CAEPC,KAAK,CAAE,CACLD,IAAI,CAAE,qBADD,CAELE,MAAM,WAAKN,QAAQ,CAACO,UAAd,WAFD,CAGLC,MAAM,CAAE,gBAHH,CAILC,SAAS,CAAE,cAJN,CAFA,CAAD,CAAR,CASAb,YAAY,CAAC,IAAD,CAAO,IAAP,CAAaR,QAAb,CAAZ,CACAO,MAAM,CAACe,IAAP,CAAY,YAAZ,CAA0B,CAAC,KAAD,CAAQ,gBAAR,CAA1B,EACD,CACF,CAhBQ,CAgBN,CAACb,UAAD,CAAaV,KAAK,CAACM,cAAnB,CAhBM,CAAT,CAkBA,mBACE,YACE,SAAS,iBACPN,KAAK,CAACU,UAAN,EAAoBF,MAAM,CAACgB,SAA3B,CAAuC,cAAvC,CAAwD,EADjD,CADX,uBAKE,sBACG,CAACrB,MAAM,CAAG,EAAT,CAAc,IAAMA,MAApB,CAA6BA,MAA9B,EACC,GADD,EAEEI,MAAM,CAAG,EAAT,CAAc,IAAMA,MAApB,CAA6BA,MAF/B,CADH,EALF,EADF,CAaD,CAxCD,CA0CA,cAAeR,CAAAA,KAAf","sourcesContent":["import React, { useEffect, useContext } from \"react\";\r\nimport \"./Timer.scss\";\r\nimport { useDispatch, useSelector, useStore } from \"react-redux\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../../App/context.js\";\r\n\r\nconst Timer = (props) => {\r\n  const dispatch = useDispatch();\r\n  const store = useStore();\r\n  const minute = Math.floor(props.timeLeftToMove / 60);\r\n  const second = props.timeLeftToMove % 60;\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n\r\n  useEffect(() => {\r\n    if (props.timeLeftToMove <= 0 && turnToMove) {\r\n      const opponent = store.getState().gameState.opponentInfo;\r\n      dispatch({ type: \"setGameResult\", value: \"Lose\" });\r\n      dispatch({\r\n        type: \"setMessage\",\r\n        value: {\r\n          type: \"game result message\",\r\n          winner: `${opponent.playername} Won - `,\r\n          reason: \"Game Abandoned\",\r\n          className: \"game-message\",\r\n        },\r\n      });\r\n      setMoveTimer(null, true, dispatch);\r\n      socket.emit(\"gameFinish\", [\"Won\", \"Game Abandoned\"]);\r\n    }\r\n  }, [turnToMove, props.timeLeftToMove]);\r\n\r\n  return (\r\n    <div\r\n      className={`clock ${\r\n        props.turnToMove && socket.connected ? \"turn-to-move\" : \"\"\r\n      }`}\r\n    >\r\n      <span>\r\n        {(minute < 10 ? \"0\" + minute : minute) +\r\n          \":\" +\r\n          (second < 10 ? \"0\" + second : second)}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}