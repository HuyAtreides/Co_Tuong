{"ast":null,"code":"import Piece from \"./piece.js\";\nimport elephantRules from \"./move_rules/elephantRules.js\";\n\nclass Elephant extends Piece {\n  constructor(width, row, col, name, side) {\n    super(width, row, col, name);\n    this.moves = elephantRules;\n    this.choosenSide = side;\n  }\n\n  checkValidMove(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\n    const maxRow = this.side === this.choosenSide[0] ? 5 : 10;\n    const minRow = this.side === this.choosenSide[0] ? 0 : 5;\n    const valid = newCol >= 0 && newCol < 9 && newRow >= minRow && newRow < maxRow;\n    const existMove = this.moves.some(move => {\n      return move[0] === moveRow && move[1] === moveCol;\n    });\n    const generalInDanger = this.putGeneralInDanger(newRow, newCol, board);\n    return valid && existMove && !generalInDanger;\n  }\n\n  countPiecesBetween(newRow, newCol, board) {\n    let [curRow, curCol] = this.position;\n    let count = 0;\n\n    do {\n      curCol += curCol > newCol ? -1 : 1;\n      curRow += curRow > newRow ? -1 : 1;\n      if (board[curRow][curCol]) count++;\n    } while (curCol !== newCol || curRow !== newRow);\n\n    return count;\n  }\n\n  canCaptureGeneral(board) {\n    return false;\n  }\n\n}\n\nexport default Elephant;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/elephant.js"],"names":["Piece","elephantRules","Elephant","constructor","width","row","col","name","side","moves","choosenSide","checkValidMove","newRow","newCol","board","curRow","curCol","position","moveRow","moveCol","maxRow","minRow","valid","existMove","some","move","generalInDanger","putGeneralInDanger","countPiecesBetween","count","canCaptureGeneral"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;AAEA,MAAMC,QAAN,SAAuBF,KAAvB,CAA6B;AAC3BG,EAAAA,WAAW,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AACvC,UAAMJ,KAAN,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB;AACA,SAAKE,KAAL,GAAaR,aAAb;AACA,SAAKS,WAAL,GAAmBF,IAAnB;AACD;;AAEDG,EAAAA,cAAc,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACpC,UAAM,CAACC,MAAD,EAASC,MAAT,IAAmB,KAAKC,QAA9B;AACA,UAAM,CAACC,OAAD,EAAUC,OAAV,IAAqB,CAACP,MAAM,GAAGG,MAAV,EAAkBF,MAAM,GAAGG,MAA3B,CAA3B;AACA,UAAMI,MAAM,GAAG,KAAKZ,IAAL,KAAc,KAAKE,WAAL,CAAiB,CAAjB,CAAd,GAAoC,CAApC,GAAwC,EAAvD;AACA,UAAMW,MAAM,GAAG,KAAKb,IAAL,KAAc,KAAKE,WAAL,CAAiB,CAAjB,CAAd,GAAoC,CAApC,GAAwC,CAAvD;AACA,UAAMY,KAAK,GACTT,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAG,CAAxB,IAA6BD,MAAM,IAAIS,MAAvC,IAAiDT,MAAM,GAAGQ,MAD5D;AAEA,UAAMG,SAAS,GAAG,KAAKd,KAAL,CAAWe,IAAX,CAAiBC,IAAD,IAAU;AAC1C,aAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYP,OAAZ,IAAuBO,IAAI,CAAC,CAAD,CAAJ,KAAYN,OAA1C;AACD,KAFiB,CAAlB;AAGA,UAAMO,eAAe,GAAG,KAAKC,kBAAL,CAAwBf,MAAxB,EAAgCC,MAAhC,EAAwCC,KAAxC,CAAxB;AACA,WAAOQ,KAAK,IAAIC,SAAT,IAAsB,CAACG,eAA9B;AACD;;AAEDE,EAAAA,kBAAkB,CAAChB,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACxC,QAAI,CAACC,MAAD,EAASC,MAAT,IAAmB,KAAKC,QAA5B;AACA,QAAIY,KAAK,GAAG,CAAZ;;AACA,OAAG;AACDb,MAAAA,MAAM,IAAIA,MAAM,GAAGH,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAAjC;AACAE,MAAAA,MAAM,IAAIA,MAAM,GAAGH,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAAjC;AACA,UAAIE,KAAK,CAACC,MAAD,CAAL,CAAcC,MAAd,CAAJ,EAA2Ba,KAAK;AACjC,KAJD,QAISb,MAAM,KAAKH,MAAX,IAAqBE,MAAM,KAAKH,MAJzC;;AAMA,WAAOiB,KAAP;AACD;;AAEDC,EAAAA,iBAAiB,CAAChB,KAAD,EAAQ;AACvB,WAAO,KAAP;AACD;;AAnC0B;;AAsC7B,eAAeZ,QAAf","sourcesContent":["import Piece from \"./piece.js\";\r\nimport elephantRules from \"./move_rules/elephantRules.js\";\r\n\r\nclass Elephant extends Piece {\r\n  constructor(width, row, col, name, side) {\r\n    super(width, row, col, name);\r\n    this.moves = elephantRules;\r\n    this.choosenSide = side;\r\n  }\r\n\r\n  checkValidMove(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\r\n    const maxRow = this.side === this.choosenSide[0] ? 5 : 10;\r\n    const minRow = this.side === this.choosenSide[0] ? 0 : 5;\r\n    const valid =\r\n      newCol >= 0 && newCol < 9 && newRow >= minRow && newRow < maxRow;\r\n    const existMove = this.moves.some((move) => {\r\n      return move[0] === moveRow && move[1] === moveCol;\r\n    });\r\n    const generalInDanger = this.putGeneralInDanger(newRow, newCol, board);\r\n    return valid && existMove && !generalInDanger;\r\n  }\r\n\r\n  countPiecesBetween(newRow, newCol, board) {\r\n    let [curRow, curCol] = this.position;\r\n    let count = 0;\r\n    do {\r\n      curCol += curCol > newCol ? -1 : 1;\r\n      curRow += curRow > newRow ? -1 : 1;\r\n      if (board[curRow][curCol]) count++;\r\n    } while (curCol !== newCol || curRow !== newRow);\r\n\r\n    return count;\r\n  }\r\n\r\n  canCaptureGeneral(board) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default Elephant;\r\n"]},"metadata":{},"sourceType":"module"}