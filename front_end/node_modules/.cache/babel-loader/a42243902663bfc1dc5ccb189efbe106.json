{"ast":null,"code":"const callAPI = async (method, endPoint, data, signal) => {\n  let response;\n\n  if (method === \"POST\") {\n    const init = {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    };\n    response = await fetch(`http://localhost:8080${endPoint}`, init, {\n      signal\n    });\n  } else response = await fetch(`http://localhost:8080${endPoint}`, {\n    credentials: \"include\"\n  }, {\n    signal\n  });\n\n  const responseData = await response.json();\n  responseData.ok = response.ok;\n  return responseData;\n};\n\nexport default callAPI;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/callAPI.js"],"names":["callAPI","method","endPoint","data","signal","response","init","credentials","headers","body","JSON","stringify","fetch","responseData","json","ok"],"mappings":"AAAA,MAAMA,OAAO,GAAG,OAAOC,MAAP,EAAeC,QAAf,EAAyBC,IAAzB,EAA+BC,MAA/B,KAA0C;AACxD,MAAIC,QAAJ;;AACA,MAAIJ,MAAM,KAAK,MAAf,EAAuB;AACrB,UAAMK,IAAI,GAAG;AACXL,MAAAA,MAAM,EAAE,MADG;AAEXM,MAAAA,WAAW,EAAE,SAFF;AAGXC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAHE;AAMXC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AANK,KAAb;AAQAE,IAAAA,QAAQ,GAAG,MAAMO,KAAK,CAAE,wBAAuBV,QAAS,EAAlC,EAAqCI,IAArC,EAA2C;AAC/DF,MAAAA;AAD+D,KAA3C,CAAtB;AAGD,GAZD,MAaEC,QAAQ,GAAG,MAAMO,KAAK,CACnB,wBAAuBV,QAAS,EADb,EAEpB;AACEK,IAAAA,WAAW,EAAE;AADf,GAFoB,EAKpB;AAAEH,IAAAA;AAAF,GALoB,CAAtB;;AAOF,QAAMS,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA3B;AACAD,EAAAA,YAAY,CAACE,EAAb,GAAkBV,QAAQ,CAACU,EAA3B;AACA,SAAOF,YAAP;AACD,CAzBD;;AA2BA,eAAeb,OAAf","sourcesContent":["const callAPI = async (method, endPoint, data, signal) => {\r\n  let response;\r\n  if (method === \"POST\") {\r\n    const init = {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    };\r\n    response = await fetch(`http://localhost:8080${endPoint}`, init, {\r\n      signal,\r\n    });\r\n  } else\r\n    response = await fetch(\r\n      `http://localhost:8080${endPoint}`,\r\n      {\r\n        credentials: \"include\",\r\n      },\r\n      { signal }\r\n    );\r\n  const responseData = await response.json();\r\n  responseData.ok = response.ok;\r\n  return responseData;\r\n};\r\n\r\nexport default callAPI;\r\n"]},"metadata":{},"sourceType":"module"}