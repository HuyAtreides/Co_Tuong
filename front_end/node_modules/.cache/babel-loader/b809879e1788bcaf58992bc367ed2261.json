{"ast":null,"code":"import _regeneratorRuntime from\"F:/Web/C\\u1EDD T\\u01B0\\u1EDBng/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"F:/Web/C\\u1EDD T\\u01B0\\u1EDBng/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var callAPI=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(method,endPoint,data){var response,init,responseData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(method===\"POST\")){_context.next=7;break;}init={method:\"POST\",credentials:\"include\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(data)};_context.next=4;return fetch(\"http://localhost:8080/api/\".concat(endPoint),init);case 4:response=_context.sent;_context.next=10;break;case 7:_context.next=9;return fetch(\"http://localhost:8080/api/\".concat(endPoint),{credentials:\"include\"});case 9:response=_context.sent;case 10:_context.next=12;return response.json();case 12:responseData=_context.sent;responseData.ok=response.ok;return _context.abrupt(\"return\",responseData);case 15:case\"end\":return _context.stop();}}},_callee);}));return function callAPI(_x,_x2,_x3){return _ref.apply(this,arguments);};}();export default callAPI;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/callAPI.js"],"names":["callAPI","method","endPoint","data","init","credentials","headers","body","JSON","stringify","fetch","response","json","responseData","ok"],"mappings":"2TAAA,GAAMA,CAAAA,OAAO,0FAAG,iBAAOC,MAAP,CAAeC,QAAf,CAAyBC,IAAzB,sJAEVF,MAAM,GAAK,MAFD,0BAGNG,IAHM,CAGC,CACXH,MAAM,CAAE,MADG,CAEXI,WAAW,CAAE,SAFF,CAGXC,OAAO,CAAE,CACP,eAAgB,kBADT,CAHE,CAMXC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CANK,CAHD,uBAWKO,CAAAA,KAAK,qCAA8BR,QAA9B,EAA0CE,IAA1C,CAXV,QAWZO,QAXY,mEAaKD,CAAAA,KAAK,qCAA8BR,QAA9B,EAA0C,CAC9DG,WAAW,CAAE,SADiD,CAA1C,CAbV,QAaZM,QAbY,8CAgBaA,CAAAA,QAAQ,CAACC,IAAT,EAhBb,SAgBRC,YAhBQ,eAiBdA,YAAY,CAACC,EAAb,CAAkBH,QAAQ,CAACG,EAA3B,CAjBc,gCAkBPD,YAlBO,yDAAH,kBAAPb,CAAAA,OAAO,oDAAb,CAqBA,cAAeA,CAAAA,OAAf","sourcesContent":["const callAPI = async (method, endPoint, data) => {\r\n  let response;\r\n  if (method === \"POST\") {\r\n    const init = {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    };\r\n    response = await fetch(`http://localhost:8080/api/${endPoint}`, init);\r\n  } else\r\n    response = await fetch(`http://localhost:8080/api/${endPoint}`, {\r\n      credentials: \"include\",\r\n    });\r\n  const responseData = await response.json();\r\n  responseData.ok = response.ok;\r\n  return responseData;\r\n};\r\n\r\nexport default callAPI;\r\n"]},"metadata":{},"sourceType":"module"}