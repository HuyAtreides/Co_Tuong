{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport initializeBoard from \"../initializeBoard\";\nimport Piece from \"./piece.jsx\";\nimport \"./board.scss\";\nimport getSVGLocation from \"../getSVGLocation.js\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const [board, setBoard] = useState(initializeBoard(520 / 9, props.side));\n  const [targetDisplay, setTargetDisplay] = useState(\"none\");\n  const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\n  const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [getClicked, setGetClicked] = useState(false);\n  const [draggable, setDraggable] = useState(false);\n  const [capturedPiece, setCapturedPiece] = useState([]);\n  const [findMatch, setFindMatch] = useState();\n  const socketRef = useRef();\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n        if (row !== curRow || curCol !== col) setGetClicked(false);\n      }\n\n      setTargetDisplay(\"inline\");\n      setDraggable(true);\n      setTargetTranslate(translate);\n      setCurrentPiece(board[row][col]);\n    }\n  };\n\n  const updateBoard = (newPostion, [prevRow, prevCol]) => {\n    if (newPostion) {\n      const [capture, newRow, newCol] = newPostion;\n\n      if (capture) {\n        capturedPiece.push(board[newRow][newCol]);\n        setCapturedPiece([...capturedPiece]);\n      }\n\n      board[prevRow][prevCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n      const [prevRow, prevCol] = currentPiece.position;\n      const newPosition = currentPiece.setNewPosition(x, y, board);\n      updateBoard(newPosition, [prevRow, prevCol]);\n      setDraggable(false);\n\n      if (!getClicked) {\n        setGetClicked(true);\n      } else {\n        setTargetDisplay(\"none\");\n        setCurrentPiece(null);\n        setGetClicked(false);\n      }\n\n      setBoard([...board]);\n    }\n  };\n\n  const handleMouseMove = event => {\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      setBoard([...board]);\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    const [prevRow, prevCol] = currentPiece.position;\n    const newPosition = currentPiece.setNewPosition(x, y, board);\n    updateBoard(newPosition, [prevRow, prevCol]);\n    setTargetDisplay(\"none\");\n    setCurrentPiece(null);\n    setBoard([...board]);\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  useEffect(() => {\n    const width = +window.innerWidth;\n    const boardWidth = width * (90 / 100);\n\n    if (width < 525) {\n      setBoardSize([boardWidth, boardWidth / (521 / 577)]);\n      setBoard(initializeBoard(boardWidth / 9, props.side));\n    }\n\n    window.ondragstart = () => false;\n  }, []);\n  useEffect(() => {\n    socketRef.current = io(\"http://localhost:8080\");\n    socketRef.current.emit(\"find match\", socketRef.current);\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    return () => {\n      socketRef.current.disconnect();\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: boardSize[0],\n      height: boardSize[1],\n      onClick: handleClick,\n      style: {\n        backgroundImage: \"url(/images/Board/board.jpg)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"image\", {\n        href: \"/images/Target_Icon/target.gif\",\n        width: boardSize[0] / 9,\n        height: boardSize[0] / 9,\n        style: {\n          display: targetDisplay\n        },\n        transform: targetTranslate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Piece, {\n        board: board,\n        handleMouseDown: handleMouseDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: findMatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"fasVjqh9kftum6JSUPZKDRQ9bac=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/board.jsx"],"names":["React","useState","useEffect","useRef","initializeBoard","Piece","getSVGLocation","io","Board","props","board","setBoard","side","targetDisplay","setTargetDisplay","targetTranslate","setTargetTranslate","boardSize","setBoardSize","currentPiece","setCurrentPiece","getClicked","setGetClicked","draggable","setDraggable","capturedPiece","setCapturedPiece","findMatch","setFindMatch","socketRef","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","curRow","curCol","position","updateBoard","newPostion","prevRow","prevCol","capture","newRow","newCol","push","handleMouseUp","x","y","clientX","clientY","newPosition","setNewPosition","handleMouseMove","move","moveOnClick","handleClick","target","width","window","innerWidth","boardWidth","ondragstart","current","emit","onmousemove","onmouseup","disconnect","backgroundImage","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport initializeBoard from \"../initializeBoard\";\r\nimport Piece from \"./piece.jsx\";\r\nimport \"./board.scss\";\r\nimport getSVGLocation from \"../getSVGLocation.js\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nfunction Board(props) {\r\n  const [board, setBoard] = useState(initializeBoard(520 / 9, props.side));\r\n  const [targetDisplay, setTargetDisplay] = useState(\"none\");\r\n  const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\r\n  const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\r\n  const [currentPiece, setCurrentPiece] = useState(null);\r\n  const [getClicked, setGetClicked] = useState(false);\r\n  const [draggable, setDraggable] = useState(false);\r\n  const [capturedPiece, setCapturedPiece] = useState([]);\r\n  const [findMatch, setFindMatch] = useState();\r\n  const socketRef = useRef();\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) setGetClicked(false);\r\n      }\r\n      setTargetDisplay(\"inline\");\r\n      setDraggable(true);\r\n      setTargetTranslate(translate);\r\n      setCurrentPiece(board[row][col]);\r\n    }\r\n  };\r\n\r\n  const updateBoard = (newPostion, [prevRow, prevCol]) => {\r\n    if (newPostion) {\r\n      const [capture, newRow, newCol] = newPostion;\r\n      if (capture) {\r\n        capturedPiece.push(board[newRow][newCol]);\r\n        setCapturedPiece([...capturedPiece]);\r\n      }\r\n      board[prevRow][prevCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n      const [prevRow, prevCol] = currentPiece.position;\r\n      const newPosition = currentPiece.setNewPosition(x, y, board);\r\n      updateBoard(newPosition, [prevRow, prevCol]);\r\n      setDraggable(false);\r\n      if (!getClicked) {\r\n        setGetClicked(true);\r\n      } else {\r\n        setTargetDisplay(\"none\");\r\n        setCurrentPiece(null);\r\n        setGetClicked(false);\r\n      }\r\n      setBoard([...board]);\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      setBoard([...board]);\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    const [prevRow, prevCol] = currentPiece.position;\r\n    const newPosition = currentPiece.setNewPosition(x, y, board);\r\n    updateBoard(newPosition, [prevRow, prevCol]);\r\n    setTargetDisplay(\"none\");\r\n    setCurrentPiece(null);\r\n    setBoard([...board]);\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = +window.innerWidth;\r\n    const boardWidth = width * (90 / 100);\r\n    if (width < 525) {\r\n      setBoardSize([boardWidth, boardWidth / (521 / 577)]);\r\n      setBoard(initializeBoard(boardWidth / 9, props.side));\r\n    }\r\n    window.ondragstart = () => false;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io(\"http://localhost:8080\");\r\n    socketRef.current.emit(\"find match\", socketRef.current);\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <svg\r\n        width={boardSize[0]}\r\n        height={boardSize[1]}\r\n        onClick={handleClick}\r\n        style={{\r\n          backgroundImage: \"url(/images/Board/board.jpg)\",\r\n        }}\r\n      >\r\n        <image\r\n          href=\"/images/Target_Icon/target.gif\"\r\n          width={boardSize[0] / 9}\r\n          height={boardSize[0] / 9}\r\n          style={{ display: targetDisplay }}\r\n          transform={targetTranslate}\r\n        ></image>\r\n        <Piece board={board} handleMouseDown={handleMouseDown} />\r\n      </svg>\r\n      <span>{findMatch}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}