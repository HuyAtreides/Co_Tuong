{"ast":null,"code":"import React from \"react\";\nimport { io } from \"socket.io-client\";\nconst socket = io(\"http://localhost:8080/play\");\nconst SocketContext = /*#__PURE__*/React.createContext();\nconst SetMoveTimerContext = /*#__PURE__*/React.createContext();\n\nconst setMoveTimer = (playerTurn, gameFinish, dispatch) => {\n  socket.removeAllListeners(\"oneSecondPass\");\n\n  if (gameFinish) {\n    socket.emit(\"setTimer\", false);\n    dispatch({\n      type: \"setPause\",\n      value: null\n    });\n    dispatch({\n      type: \"setPauseTime\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setTurnToMove\",\n      value: false\n    });\n    return;\n  }\n\n  if (playerTurn) dispatch({\n    type: \"setOpponentTimeLeftToMove\",\n    value: \"restart\"\n  });else dispatch({\n    type: \"setPlayerTimeLeftToMove\",\n    value: \"restart\"\n  });\n  socket.emit(\"startTimer\", true);\n  socket.on(\"oneSecondPass\", () => {\n    if (playerTurn) dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: null\n    });else dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: null\n    });\n  });\n};\n\nexport { SocketContext, SetMoveTimerContext, setMoveTimer, socket };","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/context.js"],"names":["React","io","socket","SocketContext","createContext","SetMoveTimerContext","setMoveTimer","playerTurn","gameFinish","dispatch","removeAllListeners","emit","type","value","on"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,4BAAD,CAAjB;AACA,MAAME,aAAa,gBAAGH,KAAK,CAACI,aAAN,EAAtB;AACA,MAAMC,mBAAmB,gBAAGL,KAAK,CAACI,aAAN,EAA5B;;AAEA,MAAME,YAAY,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,QAAzB,KAAsC;AACzDP,EAAAA,MAAM,CAACQ,kBAAP,CAA0B,eAA1B;;AACA,MAAIF,UAAJ,EAAgB;AACdN,IAAAA,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwB,KAAxB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,cAAR;AAAwBC,MAAAA,KAAK,EAAE;AAA/B,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,2BAAR;AAAqCC,MAAAA,KAAK,EAAE;AAA5C,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,yBAAR;AAAmCC,MAAAA,KAAK,EAAE;AAA1C,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,KAAK,EAAE;AAAhC,KAAD,CAAR;AACA;AACD;;AACD,MAAIN,UAAJ,EACEE,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,2BAAR;AAAqCC,IAAAA,KAAK,EAAE;AAA5C,GAAD,CAAR,CADF,KAEKJ,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,yBAAR;AAAmCC,IAAAA,KAAK,EAAE;AAA1C,GAAD,CAAR;AACLX,EAAAA,MAAM,CAACS,IAAP,CAAY,YAAZ,EAA0B,IAA1B;AACAT,EAAAA,MAAM,CAACY,EAAP,CAAU,eAAV,EAA2B,MAAM;AAC/B,QAAIP,UAAJ,EAAgBE,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,yBAAR;AAAmCC,MAAAA,KAAK,EAAE;AAA1C,KAAD,CAAR,CAAhB,KACKJ,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,2BAAR;AAAqCC,MAAAA,KAAK,EAAE;AAA5C,KAAD,CAAR;AACN,GAHD;AAID,CAnBD;;AAqBA,SAASV,aAAT,EAAwBE,mBAAxB,EAA6CC,YAA7C,EAA2DJ,MAA3D","sourcesContent":["import React from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:8080/play\");\r\nconst SocketContext = React.createContext();\r\nconst SetMoveTimerContext = React.createContext();\r\n\r\nconst setMoveTimer = (playerTurn, gameFinish, dispatch) => {\r\n  socket.removeAllListeners(\"oneSecondPass\");\r\n  if (gameFinish) {\r\n    socket.emit(\"setTimer\", false);\r\n    dispatch({ type: \"setPause\", value: null });\r\n    dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setTurnToMove\", value: false });\r\n    return;\r\n  }\r\n  if (playerTurn)\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n  else dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n  socket.emit(\"startTimer\", true);\r\n  socket.on(\"oneSecondPass\", () => {\r\n    if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n    else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n  });\r\n};\r\n\r\nexport { SocketContext, SetMoveTimerContext, setMoveTimer, socket };\r\n"]},"metadata":{},"sourceType":"module"}