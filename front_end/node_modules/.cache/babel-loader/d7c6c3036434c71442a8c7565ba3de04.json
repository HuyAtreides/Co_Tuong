{"ast":null,"code":"import initializeBoard from \"../Components/Main/Game/Board/initializeBoard.js\";\nconst defaultState = {\n  board: initializeBoard(520 / 9, [\"red\", \"black\"]),\n  targetDisplay: \"none\",\n  targetTranslate: \"translate(0, 0)\",\n  boardSize: [520, 520 / (521 / 577)],\n  currentPiece: null,\n  getClicked: false,\n  draggable: false,\n  capturedPieces: [],\n  turnToMove: false,\n  side: [\"red\", \"black\"]\n};\n\nconst boardReducer = (state = defaultState, action) => {\n  const newState = Object.assign({}, state);\n  const {\n    type,\n    value\n  } = action;\n\n  switch (type) {\n    case \"setBoard\":\n      newState.board = value;\n      return newState;\n\n    case \"setTargetDisplay\":\n      newState.targetDisplay = value;\n      return newState;\n\n    case \"setTargetTranslate\":\n      newState.targetTranslate = value;\n      return newState;\n\n    case \"setBoardSize\":\n      newState.boardSize = value;\n      return newState;\n\n    case \"setCurrentPiece\":\n      newState.currentPiece = value;\n      return newState;\n\n    case \"setGetClicked\":\n      newState.getClicked = value;\n      return newState;\n\n    case \"setDraggable\":\n      newState.draggable = value;\n      return newState;\n\n    case \"setCapturedPieces\":\n      const newCapturedPieces = [...newState.capturedPieces];\n      newCapturedPieces.push(value);\n      newState.capturedPieces = newCapturedPieces;\n      return newState;\n\n    case \"setTurnToMove\":\n      newState.turnToMove = value;\n      return newState;\n\n    case \"switchSide\":\n      const width = +document.querySelector(\".board-container\").offsetWidth;\n      newState.board = initializeBoard(width / 9, value);\n      newState.side = value;\n      return newState;\n\n    case \"restartBoardState\":\n      return defaultState;\n\n    default:\n      return state;\n  }\n};\n\nexport default boardReducer;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/reducer/boardReducer.js"],"names":["initializeBoard","defaultState","board","targetDisplay","targetTranslate","boardSize","currentPiece","getClicked","draggable","capturedPieces","turnToMove","side","boardReducer","state","action","newState","Object","assign","type","value","newCapturedPieces","push","width","document","querySelector","offsetWidth"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,kDAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEF,eAAe,CAAC,MAAM,CAAP,EAAU,CAAC,KAAD,EAAQ,OAAR,CAAV,CADH;AAEnBG,EAAAA,aAAa,EAAE,MAFI;AAGnBC,EAAAA,eAAe,EAAE,iBAHE;AAInBC,EAAAA,SAAS,EAAE,CAAC,GAAD,EAAM,OAAO,MAAM,GAAb,CAAN,CAJQ;AAKnBC,EAAAA,YAAY,EAAE,IALK;AAMnBC,EAAAA,UAAU,EAAE,KANO;AAOnBC,EAAAA,SAAS,EAAE,KAPQ;AAQnBC,EAAAA,cAAc,EAAE,EARG;AASnBC,EAAAA,UAAU,EAAE,KATO;AAUnBC,EAAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,OAAR;AAVa,CAArB;;AAaA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AACrD,QAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,CAAjB;AACA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBL,MAAxB;;AACA,UAAQI,IAAR;AACE,SAAK,UAAL;AACEH,MAAAA,QAAQ,CAACb,KAAT,GAAiBiB,KAAjB;AACA,aAAOJ,QAAP;;AACF,SAAK,kBAAL;AACEA,MAAAA,QAAQ,CAACZ,aAAT,GAAyBgB,KAAzB;AACA,aAAOJ,QAAP;;AACF,SAAK,oBAAL;AACEA,MAAAA,QAAQ,CAACX,eAAT,GAA2Be,KAA3B;AACA,aAAOJ,QAAP;;AACF,SAAK,cAAL;AACEA,MAAAA,QAAQ,CAACV,SAAT,GAAqBc,KAArB;AACA,aAAOJ,QAAP;;AACF,SAAK,iBAAL;AACEA,MAAAA,QAAQ,CAACT,YAAT,GAAwBa,KAAxB;AACA,aAAOJ,QAAP;;AACF,SAAK,eAAL;AACEA,MAAAA,QAAQ,CAACR,UAAT,GAAsBY,KAAtB;AACA,aAAOJ,QAAP;;AACF,SAAK,cAAL;AACEA,MAAAA,QAAQ,CAACP,SAAT,GAAqBW,KAArB;AACA,aAAOJ,QAAP;;AACF,SAAK,mBAAL;AACE,YAAMK,iBAAiB,GAAG,CAAC,GAAGL,QAAQ,CAACN,cAAb,CAA1B;AACAW,MAAAA,iBAAiB,CAACC,IAAlB,CAAuBF,KAAvB;AACAJ,MAAAA,QAAQ,CAACN,cAAT,GAA0BW,iBAA1B;AACA,aAAOL,QAAP;;AACF,SAAK,eAAL;AACEA,MAAAA,QAAQ,CAACL,UAAT,GAAsBS,KAAtB;AACA,aAAOJ,QAAP;;AACF,SAAK,YAAL;AACE,YAAMO,KAAK,GAAG,CAACC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,EAA2CC,WAA1D;AACAV,MAAAA,QAAQ,CAACb,KAAT,GAAiBF,eAAe,CAACsB,KAAK,GAAG,CAAT,EAAYH,KAAZ,CAAhC;AACAJ,MAAAA,QAAQ,CAACJ,IAAT,GAAgBQ,KAAhB;AACA,aAAOJ,QAAP;;AACF,SAAK,mBAAL;AACE,aAAOd,YAAP;;AACF;AACE,aAAOY,KAAP;AAtCJ;AAwCD,CA3CD;;AA6CA,eAAeD,YAAf","sourcesContent":["import initializeBoard from \"../Components/Main/Game/Board/initializeBoard.js\";\r\n\r\nconst defaultState = {\r\n  board: initializeBoard(520 / 9, [\"red\", \"black\"]),\r\n  targetDisplay: \"none\",\r\n  targetTranslate: \"translate(0, 0)\",\r\n  boardSize: [520, 520 / (521 / 577)],\r\n  currentPiece: null,\r\n  getClicked: false,\r\n  draggable: false,\r\n  capturedPieces: [],\r\n  turnToMove: false,\r\n  side: [\"red\", \"black\"],\r\n};\r\n\r\nconst boardReducer = (state = defaultState, action) => {\r\n  const newState = Object.assign({}, state);\r\n  const { type, value } = action;\r\n  switch (type) {\r\n    case \"setBoard\":\r\n      newState.board = value;\r\n      return newState;\r\n    case \"setTargetDisplay\":\r\n      newState.targetDisplay = value;\r\n      return newState;\r\n    case \"setTargetTranslate\":\r\n      newState.targetTranslate = value;\r\n      return newState;\r\n    case \"setBoardSize\":\r\n      newState.boardSize = value;\r\n      return newState;\r\n    case \"setCurrentPiece\":\r\n      newState.currentPiece = value;\r\n      return newState;\r\n    case \"setGetClicked\":\r\n      newState.getClicked = value;\r\n      return newState;\r\n    case \"setDraggable\":\r\n      newState.draggable = value;\r\n      return newState;\r\n    case \"setCapturedPieces\":\r\n      const newCapturedPieces = [...newState.capturedPieces];\r\n      newCapturedPieces.push(value);\r\n      newState.capturedPieces = newCapturedPieces;\r\n      return newState;\r\n    case \"setTurnToMove\":\r\n      newState.turnToMove = value;\r\n      return newState;\r\n    case \"switchSide\":\r\n      const width = +document.querySelector(\".board-container\").offsetWidth;\r\n      newState.board = initializeBoard(width / 9, value);\r\n      newState.side = value;\r\n      return newState;\r\n    case \"restartBoardState\":\r\n      return defaultState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default boardReducer;\r\n"]},"metadata":{},"sourceType":"module"}