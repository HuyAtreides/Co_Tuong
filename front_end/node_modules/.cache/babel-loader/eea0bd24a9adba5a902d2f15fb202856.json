{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\Main\\\\Game\\\\GamePlayArea\\\\Pause\\\\Pause.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect } from \"react\";\nimport \"./Pause.scss\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport { SocketContext, SetMoveTimerContext } from \"../../../../App/context.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const socket = useContext(SocketContext);\n  const setMoveTimer = useContext(SetMoveTimerContext);\n  const time = useSelector(state => state.gameState.pauseTime);\n  const minute = Math.floor(time / 60);\n  const second = time % 60;\n  const turnToMove = useSelector(state => state.boardState.turnToMove);\n  useEffect(() => {\n    if (time === 0) {\n      if (/Paused/.test(props.pause)) {\n        socket.emit(\"startTimer\", true);\n        dispatch({\n          type: \"setPauseTime\",\n          value: \"timeout\"\n        });\n        dispatch({\n          type: \"setPause\",\n          value: \"Timeout\"\n        });\n      } else {\n        socket.emit(\"startTimer\", false);\n        dispatch({\n          type: \"setPauseTime\",\n          value: \"restart\"\n        });\n        dispatch({\n          type: \"setPause\",\n          value: null\n        });\n        setMoveTimer(turnToMove, false, dispatch);\n        socket.emit(\"startGame\");\n      }\n    }\n\n    socket.on(\"pauseOver\", () => {\n      const listItemRef = /*#__PURE__*/React.createRef();\n      dispatch({\n        type: \"setPause\",\n        value: \"Timeout\"\n      });\n      dispatch({\n        type: \"setPauseTime\",\n        value: \"timeout\"\n      });\n      socket.emit(\"starTimer\", true);\n      dispatch({\n        type: \"setMessage\",\n        value: {\n          from: \"\",\n          message: \"Pause Timeout\",\n          className: \"game-message\",\n          ref: listItemRef\n        }\n      });\n    });\n    socket.on(\"gameStarted\", () => {\n      socket.emit(\"startTimer\", false);\n      dispatch({\n        type: \"setPause\",\n        value: null\n      });\n      dispatch({\n        type: \"setPauseTime\",\n        value: \"restart\"\n      });\n      setMoveTimer(turnToMove, false, dispatch);\n    });\n    return () => {\n      socket.removeAllListeners(\"pauseOver\");\n      socket.removeAllListeners(\"gameStarted\");\n    };\n  }, [time]);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"pause-timer\",\n    children: [/Paused/.test(props.pause) ? \"Resume In\" : \"Game Will Start In\", \":\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: (minute < 10 ? \"0\" + minute : minute) + \":\" + (second < 10 ? \"0\" + second : second)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timer, \"nWaBamYdVcQZGiNKf4KwgwxzLZY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Timer;\n\nconst Pause = () => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const pause = useSelector(state => state.gameState.pause);\n  const [boardWidth, boardHeight] = useSelector(state => state.boardState.boardSize);\n  const store = useStore();\n  const socket = useContext(SocketContext);\n  useEffect(() => {\n    if (pause) {\n      if (/Paused/.test(pause)) {\n        socket.removeAllListeners(\"oneSecondPass\");\n        socket.emit(\"startTimer\", true);\n        socket.on(\"oneSecondPass\", () => {\n          dispatch({\n            type: \"setPauseTime\",\n            value: null\n          });\n        });\n      } else if (/Resumed/.test(pause)) {\n        socket.emit(\"startTimer\", true);\n        dispatch({\n          type: \"setPauseTime\",\n          value: \"timeout\"\n        });\n      }\n    }\n\n    const handleOpponentPauseOrResumeGame = pause => {\n      const opponentInfo = store.getState().gameState.opponentInfo;\n      const listItemRef = /*#__PURE__*/React.createRef();\n      const message = {\n        from: `${opponentInfo.playername}`,\n        message: `${pause ? \"Paused\" : \"Resumed\"} Game`,\n        className: \"game-message\",\n        ref: listItemRef\n      };\n      dispatch({\n        type: \"setMessage\",\n        value: message\n      });\n      dispatch({\n        type: \"setPause\",\n        value: `${opponentInfo.playername} ${pause ? \"Paused\" : \"Resumed\"} Game`\n      });\n    };\n\n    socket.on(\"opponentPauseGame\", () => {\n      handleOpponentPauseOrResumeGame(true);\n    });\n    socket.on(\"opponentResumeGame\", () => {\n      handleOpponentPauseOrResumeGame(false);\n    });\n    return () => {\n      socket.removeAllListeners(\"opponentPauseGame\");\n      socket.removeAllListeners(\"opponentResumeGame\");\n    };\n  }, [pause]);\n  if (!pause) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pause\",\n    style: {\n      width: `${boardWidth}px`,\n      height: `${boardHeight}px`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"pause-announce\",\n        children: pause\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        pause: pause\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Pause, \"gYOAuJL9Iv8yf/JHI46+fC0M5jA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useStore];\n});\n\n_c2 = Pause;\nexport default _c3 = /*#__PURE__*/React.memo(Pause);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Timer\");\n$RefreshReg$(_c2, \"Pause\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/Main/Game/GamePlayArea/Pause/Pause.jsx"],"names":["React","useContext","useEffect","useSelector","useDispatch","useStore","SocketContext","SetMoveTimerContext","Timer","props","dispatch","socket","setMoveTimer","time","state","gameState","pauseTime","minute","Math","floor","second","turnToMove","boardState","test","pause","emit","type","value","on","listItemRef","createRef","from","message","className","ref","removeAllListeners","Pause","boardWidth","boardHeight","boardSize","store","handleOpponentPauseOrResumeGame","opponentInfo","getState","playername","width","height","memo"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport \"./Pause.scss\";\r\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\r\nimport { SocketContext, SetMoveTimerContext } from \"../../../../App/context.js\";\r\n\r\nconst Timer = (props) => {\r\n  const dispatch = useDispatch();\r\n  const socket = useContext(SocketContext);\r\n  const setMoveTimer = useContext(SetMoveTimerContext);\r\n  const time = useSelector((state) => state.gameState.pauseTime);\r\n  const minute = Math.floor(time / 60);\r\n  const second = time % 60;\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  useEffect(() => {\r\n    if (time === 0) {\r\n      if (/Paused/.test(props.pause)) {\r\n        socket.emit(\"startTimer\", true);\r\n        dispatch({ type: \"setPauseTime\", value: \"timeout\" });\r\n        dispatch({ type: \"setPause\", value: \"Timeout\" });\r\n      } else {\r\n        socket.emit(\"startTimer\", false);\r\n        dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n        dispatch({ type: \"setPause\", value: null });\r\n        setMoveTimer(turnToMove, false, dispatch);\r\n        socket.emit(\"startGame\");\r\n      }\r\n    }\r\n\r\n    socket.on(\"pauseOver\", () => {\r\n      const listItemRef = React.createRef();\r\n      dispatch({ type: \"setPause\", value: \"Timeout\" });\r\n      dispatch({ type: \"setPauseTime\", value: \"timeout\" });\r\n      socket.emit(\"starTimer\", true);\r\n      dispatch({\r\n        type: \"setMessage\",\r\n        value: {\r\n          from: \"\",\r\n          message: \"Pause Timeout\",\r\n          className: \"game-message\",\r\n          ref: listItemRef,\r\n        },\r\n      });\r\n    });\r\n\r\n    socket.on(\"gameStarted\", () => {\r\n      socket.emit(\"startTimer\", false);\r\n      dispatch({ type: \"setPause\", value: null });\r\n      dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n      setMoveTimer(turnToMove, false, dispatch);\r\n    });\r\n\r\n    return () => {\r\n      socket.removeAllListeners(\"pauseOver\");\r\n      socket.removeAllListeners(\"gameStarted\");\r\n    };\r\n  }, [time]);\r\n\r\n  return (\r\n    <p className=\"pause-timer\">\r\n      {/Paused/.test(props.pause) ? \"Resume In\" : \"Game Will Start In\"}:{\" \"}\r\n      <span>\r\n        {(minute < 10 ? \"0\" + minute : minute) +\r\n          \":\" +\r\n          (second < 10 ? \"0\" + second : second)}\r\n      </span>\r\n    </p>\r\n  );\r\n};\r\n\r\nconst Pause = () => {\r\n  const dispatch = useDispatch();\r\n  const pause = useSelector((state) => state.gameState.pause);\r\n  const [boardWidth, boardHeight] = useSelector(\r\n    (state) => state.boardState.boardSize\r\n  );\r\n  const store = useStore();\r\n  const socket = useContext(SocketContext);\r\n\r\n  useEffect(() => {\r\n    if (pause) {\r\n      if (/Paused/.test(pause)) {\r\n        socket.removeAllListeners(\"oneSecondPass\");\r\n        socket.emit(\"startTimer\", true);\r\n        socket.on(\"oneSecondPass\", () => {\r\n          dispatch({ type: \"setPauseTime\", value: null });\r\n        });\r\n      } else if (/Resumed/.test(pause)) {\r\n        socket.emit(\"startTimer\", true);\r\n        dispatch({ type: \"setPauseTime\", value: \"timeout\" });\r\n      }\r\n    }\r\n\r\n    const handleOpponentPauseOrResumeGame = (pause) => {\r\n      const opponentInfo = store.getState().gameState.opponentInfo;\r\n      const listItemRef = React.createRef();\r\n      const message = {\r\n        from: `${opponentInfo.playername}`,\r\n        message: `${pause ? \"Paused\" : \"Resumed\"} Game`,\r\n        className: \"game-message\",\r\n        ref: listItemRef,\r\n      };\r\n      dispatch({ type: \"setMessage\", value: message });\r\n      dispatch({\r\n        type: \"setPause\",\r\n        value: `${opponentInfo.playername} ${\r\n          pause ? \"Paused\" : \"Resumed\"\r\n        } Game`,\r\n      });\r\n    };\r\n\r\n    socket.on(\"opponentPauseGame\", () => {\r\n      handleOpponentPauseOrResumeGame(true);\r\n    });\r\n\r\n    socket.on(\"opponentResumeGame\", () => {\r\n      handleOpponentPauseOrResumeGame(false);\r\n    });\r\n\r\n    return () => {\r\n      socket.removeAllListeners(\"opponentPauseGame\");\r\n      socket.removeAllListeners(\"opponentResumeGame\");\r\n    };\r\n  }, [pause]);\r\n\r\n  if (!pause) return null;\r\n  return (\r\n    <div\r\n      className=\"pause\"\r\n      style={{\r\n        width: `${boardWidth}px`,\r\n        height: `${boardHeight}px`,\r\n      }}\r\n    >\r\n      <div>\r\n        <p className=\"pause-announce\">{pause}</p>\r\n        <Timer pause={pause} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Pause);\r\n"]},"metadata":{},"sourceType":"module"}