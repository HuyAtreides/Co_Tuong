{"ast":null,"code":"import React from \"react\";\nimport { io } from \"socket.io-client\";\nconst socket = io(\"http://localhost:8080/play\", {\n  autoConnect: false\n});\nconst SocketContext = /*#__PURE__*/React.createContext();\nconst SetMoveTimerContext = /*#__PURE__*/React.createContext();\nconst AuthenticateUserContext = /*#__PURE__*/React.createContext();\n\nconst authenticateUser = (dispatch, user) => {\n  if (socket.guest) {\n    socket.guest = undefined;\n    socket.disconnect();\n  } else if (user.guest) {\n    socket.guest = true;\n  }\n\n  dispatch({\n    type: \"setPlayerInfo\",\n    value: user\n  });\n  dispatch({\n    type: \"setIsAuthenticated\",\n    value: !socket.guest ? true : \"guest\"\n  });\n  if (user.lang) dispatch({\n    type: \"setLang\",\n    value: user.lang\n  });\n  dispatch({\n    type: \"resetGameState\"\n  });\n  dispatch({\n    type: \"resetBoardState\",\n    value: 520\n  });\n  socket.auth = {\n    player: {\n      playername: user.username,\n      guest: user.guest,\n      photo: user.photo\n    }\n  };\n  socket.connect();\n  console.log(socket.connected);\n};\n\nconst setMoveTimer = (playerTurn, gameFinish, dispatch) => {\n  socket.removeAllListeners(\"oneSecondPass\");\n\n  if (gameFinish) {\n    socket.emit(\"setTimer\", false);\n    dispatch({\n      type: \"setPause\",\n      value: null\n    });\n    dispatch({\n      type: \"setPauseTime\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: \"restart\"\n    });\n    dispatch({\n      type: \"setTurnToMove\",\n      value: false\n    });\n    return;\n  }\n\n  if (playerTurn) dispatch({\n    type: \"setOpponentTimeLeftToMove\",\n    value: \"restart\"\n  });else dispatch({\n    type: \"setPlayerTimeLeftToMove\",\n    value: \"restart\"\n  });\n  socket.emit(\"startTimer\", true);\n  socket.on(\"oneSecondPass\", () => {\n    if (playerTurn) dispatch({\n      type: \"setPlayerTimeLeftToMove\",\n      value: null\n    });else dispatch({\n      type: \"setOpponentTimeLeftToMove\",\n      value: null\n    });\n  });\n};\n\nexport { SocketContext, SetMoveTimerContext, setMoveTimer, socket, AuthenticateUserContext, authenticateUser };","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/App/context.js"],"names":["React","io","socket","autoConnect","SocketContext","createContext","SetMoveTimerContext","AuthenticateUserContext","authenticateUser","dispatch","user","guest","undefined","disconnect","type","value","lang","auth","player","playername","username","photo","connect","console","log","connected","setMoveTimer","playerTurn","gameFinish","removeAllListeners","emit","on"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:8080/play\", { autoConnect: false });\r\nconst SocketContext = React.createContext();\r\nconst SetMoveTimerContext = React.createContext();\r\nconst AuthenticateUserContext = React.createContext();\r\n\r\nconst authenticateUser = (dispatch, user) => {\r\n  if (socket.guest) {\r\n    socket.guest = undefined;\r\n    socket.disconnect();\r\n  } else if (user.guest) {\r\n    socket.guest = true;\r\n  }\r\n  dispatch({ type: \"setPlayerInfo\", value: user });\r\n  dispatch({\r\n    type: \"setIsAuthenticated\",\r\n    value: !socket.guest ? true : \"guest\",\r\n  });\r\n  if (user.lang) dispatch({ type: \"setLang\", value: user.lang });\r\n  dispatch({ type: \"resetGameState\" });\r\n  dispatch({ type: \"resetBoardState\", value: 520 });\r\n  socket.auth = {\r\n    player: {\r\n      playername: user.username,\r\n      guest: user.guest,\r\n      photo: user.photo,\r\n    },\r\n  };\r\n  socket.connect();\r\n  console.log(socket.connected);\r\n};\r\n\r\nconst setMoveTimer = (playerTurn, gameFinish, dispatch) => {\r\n  socket.removeAllListeners(\"oneSecondPass\");\r\n  if (gameFinish) {\r\n    socket.emit(\"setTimer\", false);\r\n    dispatch({ type: \"setPause\", value: null });\r\n    dispatch({ type: \"setPauseTime\", value: \"restart\" });\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n    dispatch({ type: \"setTurnToMove\", value: false });\r\n    return;\r\n  }\r\n  if (playerTurn)\r\n    dispatch({ type: \"setOpponentTimeLeftToMove\", value: \"restart\" });\r\n  else dispatch({ type: \"setPlayerTimeLeftToMove\", value: \"restart\" });\r\n  socket.emit(\"startTimer\", true);\r\n  socket.on(\"oneSecondPass\", () => {\r\n    if (playerTurn) dispatch({ type: \"setPlayerTimeLeftToMove\", value: null });\r\n    else dispatch({ type: \"setOpponentTimeLeftToMove\", value: null });\r\n  });\r\n};\r\n\r\nexport {\r\n  SocketContext,\r\n  SetMoveTimerContext,\r\n  setMoveTimer,\r\n  socket,\r\n  AuthenticateUserContext,\r\n  authenticateUser,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}