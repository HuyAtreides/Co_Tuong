{"ast":null,"code":"import horseRules from \"./move_rules/horseRules.js\";\nimport Piece from \"./piece.js\";\n\nclass Horse extends Piece {\n  constructor(width, row, col, name, choosenSide) {\n    super(width, row, col, name, choosenSide);\n    this.moves = horseRules;\n  }\n\n  setNewPosition(x, y, board, turnToMove) {\n    const newCol = Math.floor(x / this.width);\n    const newRow = Math.floor(y / this.width);\n    const [curRow, curCol] = this.position;\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\n    this.translate = `translate(${translateX}, ${translateY})`;\n\n    if (turnToMove && this.side === this.choosenSide[1]) {\n      const isValid = this.checkValidMove(newRow, newCol, board);\n\n      if (isValid && !/translate/.test(isValid)) {\n        if (!this.isBlocked(newRow, newCol, board)) {\n          if (!board[newRow][newCol].side) return this.setPosition(false, newRow, newCol);else if (board[newRow][newCol].side !== board[curRow][curCol].side) return this.setPosition(true, newRow, newCol);\n        }\n      } else if (isValid) return isValid;\n    }\n\n    return null;\n  }\n\n  canSaveGeneral(board) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const tmpBoard = board.reduce((acc, row) => {\n        acc.push([...row]);\n        return acc;\n      }, []);\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= this.minCol && newCol <= this.maxCol && newRow >= this.minRow && newRow <= this.maxRow && !this.isBlocked(newRow, newCol, tmpBoard)) {\n        if (!tmpBoard[newRow][newCol].side) {\n          if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 0) {\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\n            if (!Piece.isGeneralInDanger(tmpBoard, this.side)) return true;\n          }\n        } else if (tmpBoard[newRow][newCol].side !== this.side) {\n          if (this.countPiecesBetween(newRow, newCol, tmpBoard) == 1) {\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\n            if (!Piece.isGeneralInDanger(tmpBoard, this.side)) return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isBlocked(newRow, newCol, board) {\n    const [curRow, curCol] = this.position;\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\n\n    if (Math.abs(moveRow) === 2) {\n      return board[curRow + moveRow / 2][curCol] !== 0;\n    } else {\n      return board[curRow][curCol + moveCol / 2] !== 0;\n    }\n  }\n\n  canCaptureGeneral(board) {\n    const [curRow, curCol] = this.position;\n\n    for (let move of this.moves) {\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\n\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\n        if (board[newRow][newCol].side) if (board[newRow][newCol].side !== board[curRow][curCol].side) if (!this.isBlocked(newRow, newCol, board)) if (board[newRow][newCol].name.split(\"-\")[0] === \"general\") return true;\n      }\n    }\n  }\n\n}\n\nexport default Horse;","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/pieces/horse.js"],"names":["horseRules","Piece","Horse","constructor","width","row","col","name","choosenSide","moves","setNewPosition","x","y","board","turnToMove","newCol","Math","floor","newRow","curRow","curCol","position","translateX","translateY","translate","side","isValid","checkValidMove","test","isBlocked","setPosition","canSaveGeneral","move","tmpBoard","reduce","acc","push","minCol","maxCol","minRow","maxRow","countPiecesBetween","updateTmpBoard","isGeneralInDanger","moveRow","moveCol","abs","canCaptureGeneral","split"],"mappings":"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","sourcesContent":["import horseRules from \"./move_rules/horseRules.js\";\r\nimport Piece from \"./piece.js\";\r\n\r\nclass Horse extends Piece {\r\n  constructor(width, row, col, name, choosenSide) {\r\n    super(width, row, col, name, choosenSide);\r\n    this.moves = horseRules;\r\n  }\r\n\r\n  setNewPosition(x, y, board, turnToMove) {\r\n    const newCol = Math.floor(x / this.width);\r\n    const newRow = Math.floor(y / this.width);\r\n    const [curRow, curCol] = this.position;\r\n    const [translateX, translateY] = [curCol * this.width, curRow * this.width];\r\n    this.translate = `translate(${translateX}, ${translateY})`;\r\n    if (turnToMove && this.side === this.choosenSide[1]) {\r\n      const isValid = this.checkValidMove(newRow, newCol, board);\r\n      if (isValid && !/translate/.test(isValid)) {\r\n        if (!this.isBlocked(newRow, newCol, board)) {\r\n          if (!board[newRow][newCol].side)\r\n            return this.setPosition(false, newRow, newCol);\r\n          else if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n            return this.setPosition(true, newRow, newCol);\r\n        }\r\n      } else if (isValid) return isValid;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  canSaveGeneral(board) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const tmpBoard = board.reduce((acc, row) => {\r\n        acc.push([...row]);\r\n        return acc;\r\n      }, []);\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (\r\n        newCol >= this.minCol &&\r\n        newCol <= this.maxCol &&\r\n        newRow >= this.minRow &&\r\n        newRow <= this.maxRow &&\r\n        !this.isBlocked(newRow, newCol, tmpBoard)\r\n      ) {\r\n        if (!tmpBoard[newRow][newCol].side) {\r\n          if (this.countPiecesBetween(newRow, newCol, tmpBoard) === 0) {\r\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\r\n            if (!Piece.isGeneralInDanger(tmpBoard, this.side)) return true;\r\n          }\r\n        } else if (tmpBoard[newRow][newCol].side !== this.side) {\r\n          if (this.countPiecesBetween(newRow, newCol, tmpBoard) == 1) {\r\n            this.updateTmpBoard(newRow, newCol, tmpBoard);\r\n            if (!Piece.isGeneralInDanger(tmpBoard, this.side)) return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isBlocked(newRow, newCol, board) {\r\n    const [curRow, curCol] = this.position;\r\n    const [moveRow, moveCol] = [newRow - curRow, newCol - curCol];\r\n    if (Math.abs(moveRow) === 2) {\r\n      return board[curRow + moveRow / 2][curCol] !== 0;\r\n    } else {\r\n      return board[curRow][curCol + moveCol / 2] !== 0;\r\n    }\r\n  }\r\n\r\n  canCaptureGeneral(board) {\r\n    const [curRow, curCol] = this.position;\r\n    for (let move of this.moves) {\r\n      const [newRow, newCol] = [curRow + move[0], curCol + move[1]];\r\n      if (newCol >= 0 && newCol < 9 && newRow >= 0 && newRow < 10) {\r\n        if (board[newRow][newCol].side)\r\n          if (board[newRow][newCol].side !== board[curRow][curCol].side)\r\n            if (!this.isBlocked(newRow, newCol, board))\r\n              if (board[newRow][newCol].name.split(\"-\")[0] === \"general\")\r\n                return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Horse;\r\n"]},"metadata":{},"sourceType":"module"}