{"ast":null,"code":"var _jsxFileName = \"F:\\\\Web\\\\C\\u1EDD T\\u01B0\\u1EDBng\\\\front_end\\\\src\\\\Components\\\\board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport initializeBoard from \"../initializeBoard\";\nimport Piece from \"./piece.jsx\";\nimport \"./board.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport getSVGLocation from \"../getSVGLocation.js\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.boardState.board);\n  const targetDisplay = useSelector(state => state.boardState.targetDisplay);\n  const boardSize = useSelector(state => state.boardState.boardSize);\n  const currentPiece = useSelector(state => state.boardState.currentPiece);\n  const getClicked = useSelector(state => state.boardState.getClicked);\n  const draggable = useSelector(state => state.boardState.draggable);\n  const capturedPiece = useSelector(state => state.boardState.capturedPiece);\n  const findMatch = useSelector(state => state.boardState.findMatch);\n  const turnToMove = useSelector(state => state.boardState.turnToMove);\n  const socketRef = useRef();\n  const targetTranslate = useSelector(state => state.boardState.targetTranslate); // const [board, setBoard] = useState(initializeBoard(520 / 9, props.side));\n  // const [targetDisplay, setTargetDisplay] = useState(\"none\");\n  // const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\n  // const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\n  // const [currentPiece, setCurrentPiece] = useState(null);\n  // const [getClicked, setGetClicked] = useState(false);\n  // const [draggable, setDraggable] = useState(false);\n  // const [capturedPiece, setCapturedPiece] = useState([]);\n  // const [findMatch, setFindMatch] = useState();\n  // const socketRef = useRef();\n  // const [turnToMove, setTurnToMove] = useState(false);\n\n  const handleMouseDown = event => {\n    const elementId = event.currentTarget.id;\n    const [row, col] = [+elementId[1], +elementId[2]];\n    const translate = board[row][col].translate;\n\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\n      if (currentPiece) {\n        const [curRow, curCol] = currentPiece.position;\n\n        if (row !== curRow || curCol !== col) {\n          dispatch({\n            type: \"setGetClicked\",\n            value: false\n          }); // setGetClicked(false)\n        }\n      }\n\n      dispatch({\n        type: \"setTargetDisplay\",\n        value: \"inline\"\n      });\n      dispatch({\n        type: \"setDraggable\",\n        value: true\n      });\n      dispatch({\n        type: \"setTargetTranslate\",\n        value: translate\n      });\n      dispatch({\n        type: \"setCurrentPiece\",\n        value: board[row][col]\n      }); // setTargetDisplay(\"inline\");\n      // setDraggable(true);\n      // setTargetTranslate(translate);\n      // setCurrentPiece(board[row][col]);\n    }\n  };\n\n  const updateBoard = (newPostion, [curRow, curCol]) => {\n    if (newPostion) {\n      const [capture, newRow, newCol] = newPostion;\n\n      if (capture) {\n        capturedPiece.push(board[newRow][newCol]);\n        dispatch({\n          type: \"setCapturedPiece\",\n          value: [...capturedPiece]\n        }); // setCapturedPiece([...capturedPiece]);\n      }\n\n      board[curRow][curCol] = 0;\n      board[newRow][newCol] = currentPiece;\n    }\n  };\n\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\n    if (board[curRow][curCol] && board[curRow][curCol].side === props.side[0]) {\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      }); // setTurnToMove(!turnToMove);\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (currentPiece) {\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n      const [curRow, curCol] = currentPiece.position;\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n      updateBoard(newPosition, [curRow, curCol]);\n      dispatch({\n        type: \"setDraggable\",\n        value: false\n      }); // setDraggable(false);\n\n      if (!getClicked) {\n        dispatch({\n          type: \"setGetClicked\",\n          value: true\n        }); // setGetClicked(true);\n      } else {\n        dispatch({\n          type: \"setTargetDisplay\",\n          value: \"none\"\n        });\n        dispatch({\n          type: \"setCurrentPiece\",\n          value: null\n        });\n        dispatch({\n          type: \"setGetClicked\",\n          value: true\n        }); // setTargetDisplay(\"none\");\n        // setCurrentPiece(null);\n        // setGetClicked(false);\n      }\n\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      }); // setBoard([...board]);\n\n      if (newPosition) {\n        dispatch({\n          type: \"setTurnToMove\",\n          value: !turnToMove\n        }); // setTurnToMove(!turnToMove);\n\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n      }\n    }\n  };\n\n  const handleMouseMove = event => {\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\n      currentPiece.move(x, y, board);\n      dispatch({\n        type: \"setBoard\",\n        value: [...board]\n      }); // setBoard([...board]);\n    }\n  };\n\n  const moveOnClick = (currentPiece, x, y) => {\n    const [curRow, curCol] = currentPiece.position;\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\n    updateBoard(newPosition, [curRow, curCol]);\n    dispatch({\n      type: \"setTargetDisplay\",\n      value: \"none\"\n    });\n    dispatch({\n      type: \"setCurrentPiece\",\n      value: null\n    });\n    dispatch({\n      type: \"setBoard\",\n      value: [...board]\n    }); // setTargetDisplay(\"none\");\n    // setCurrentPiece(null);\n    // setBoard([...board]);\n\n    if (newPosition) {\n      dispatch({\n        type: \"setTurnToMove\",\n        value: !turnToMove\n      }); // setTurnToMove(!turnToMove);\n\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\n    }\n  };\n\n  const handleClick = event => {\n    if (currentPiece) {\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\n    }\n  };\n\n  useEffect(() => {\n    const width = +window.innerWidth;\n    const boardWidth = width * (90 / 100);\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\n\n    if (width < 525) {\n      dispatch({\n        type: \"setBoardSize\",\n        value: [boardWidth, boardWidth / (521 / 577)]\n      });\n      dispatch({\n        type: \"setBoard\",\n        value: initializeBoard(boardWidth / 9, props.side)\n      }); // setBoardSize([boardWidth, boardWidth / (521 / 577)]);\n      // setBoard(initializeBoard(boardWidth / 9, props.side));\n    } else {\n      dispatch({\n        type: \"setBoardSize\",\n        value: [520, 520 / (521 / 577)]\n      });\n      dispatch({\n        type: \"setBoard\",\n        value: initializeBoard(520 / 9, props.side)\n      }); // setBoardSize([520, 520 / (521 / 577)]);\n      // setBoard(initializeBoard(520 / 9, props.side));\n    }\n\n    window.ondragstart = () => false;\n\n    socketRef.current = io(\"http://localhost:8080/play\");\n  }, []);\n  useEffect(() => {\n    window.onmousemove = handleMouseMove;\n    window.onmouseup = handleMouseUp;\n    socketRef.current.on(\"foundMatch\", (opponentId, firstMove) => {\n      dispatch({\n        type: \"setTurnToMove\",\n        value: firstMove\n      });\n      socketRef.current.opponentId = opponentId;\n      dispatch({\n        type: \"findMatch\",\n        value: `foundMatch ${opponentId}`\n      }); // setFindMatch(`foundMatch ${opponentId}`);\n    });\n    socketRef.current.on(\"timeout\", () => {\n      dispatch({\n        type: \"findMatch\",\n        value: \"no players online\"\n      }); // setFindMatch(`no players online`);\n    });\n    socketRef.current.once(\"move\", ([curRow, curCol], [newRow, newCol]) => {\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\n    });\n    return () => {\n      socketRef.current.removeAllListeners();\n    };\n  });\n\n  const startPlay = () => {\n    dispatch({\n      type: \"findMatch\",\n      value: \"findMatch\"\n    });\n    socketRef.current.emit(\"findMatch\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: boardSize[0],\n      height: boardSize[1],\n      onClick: handleClick,\n      style: {\n        backgroundImage: \"url(/images/Board/board.jpg)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"image\", {\n        href: \"/images/Target_Icon/target.gif\",\n        width: boardSize[0] / 9,\n        height: boardSize[0] / 9,\n        style: {\n          display: targetDisplay\n        },\n        transform: targetTranslate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Piece, {\n        board: board,\n        handleMouseDown: handleMouseDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: findMatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startPlay,\n      children: \"play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"PvJRCmd8+THRp+xGkZfLcTxxV7Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["F:/Web/Cờ Tướng/front_end/src/Components/board.jsx"],"names":["React","useState","useEffect","useRef","initializeBoard","Piece","useSelector","useDispatch","getSVGLocation","io","Board","props","dispatch","board","state","boardState","targetDisplay","boardSize","currentPiece","getClicked","draggable","capturedPiece","findMatch","turnToMove","socketRef","targetTranslate","handleMouseDown","event","elementId","currentTarget","id","row","col","translate","side","curRow","curCol","position","type","value","updateBoard","newPostion","capture","newRow","newCol","push","handleOpponentMove","animateMove","handleMouseUp","x","y","clientX","clientY","newPosition","setNewPosition","current","emit","handleMouseMove","move","moveOnClick","handleClick","target","width","window","innerWidth","boardWidth","ondragstart","onmousemove","onmouseup","on","opponentId","firstMove","once","removeAllListeners","startPlay","backgroundImage","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport initializeBoard from \"../initializeBoard\";\r\nimport Piece from \"./piece.jsx\";\r\nimport \"./board.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getSVGLocation from \"../getSVGLocation.js\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nfunction Board(props) {\r\n  const dispatch = useDispatch();\r\n  const board = useSelector((state) => state.boardState.board);\r\n  const targetDisplay = useSelector((state) => state.boardState.targetDisplay);\r\n  const boardSize = useSelector((state) => state.boardState.boardSize);\r\n  const currentPiece = useSelector((state) => state.boardState.currentPiece);\r\n  const getClicked = useSelector((state) => state.boardState.getClicked);\r\n  const draggable = useSelector((state) => state.boardState.draggable);\r\n  const capturedPiece = useSelector((state) => state.boardState.capturedPiece);\r\n  const findMatch = useSelector((state) => state.boardState.findMatch);\r\n  const turnToMove = useSelector((state) => state.boardState.turnToMove);\r\n  const socketRef = useRef();\r\n  const targetTranslate = useSelector(\r\n    (state) => state.boardState.targetTranslate\r\n  );\r\n\r\n  // const [board, setBoard] = useState(initializeBoard(520 / 9, props.side));\r\n  // const [targetDisplay, setTargetDisplay] = useState(\"none\");\r\n  // const [targetTranslate, setTargetTranslate] = useState(\"translate(0, 0)\");\r\n  // const [boardSize, setBoardSize] = useState([520, 520 / (521 / 577)]);\r\n  // const [currentPiece, setCurrentPiece] = useState(null);\r\n  // const [getClicked, setGetClicked] = useState(false);\r\n  // const [draggable, setDraggable] = useState(false);\r\n  // const [capturedPiece, setCapturedPiece] = useState([]);\r\n  // const [findMatch, setFindMatch] = useState();\r\n  // const socketRef = useRef();\r\n  // const [turnToMove, setTurnToMove] = useState(false);\r\n\r\n  const handleMouseDown = (event) => {\r\n    const elementId = event.currentTarget.id;\r\n    const [row, col] = [+elementId[1], +elementId[2]];\r\n    const translate = board[row][col].translate;\r\n    if (!currentPiece || board[row][col].side === currentPiece.side) {\r\n      if (currentPiece) {\r\n        const [curRow, curCol] = currentPiece.position;\r\n        if (row !== curRow || curCol !== col) {\r\n          dispatch({ type: \"setGetClicked\", value: false });\r\n          // setGetClicked(false)\r\n        }\r\n      }\r\n      dispatch({ type: \"setTargetDisplay\", value: \"inline\" });\r\n      dispatch({ type: \"setDraggable\", value: true });\r\n      dispatch({ type: \"setTargetTranslate\", value: translate });\r\n      dispatch({ type: \"setCurrentPiece\", value: board[row][col] });\r\n      // setTargetDisplay(\"inline\");\r\n      // setDraggable(true);\r\n      // setTargetTranslate(translate);\r\n      // setCurrentPiece(board[row][col]);\r\n    }\r\n  };\r\n\r\n  const updateBoard = (newPostion, [curRow, curCol]) => {\r\n    if (newPostion) {\r\n      const [capture, newRow, newCol] = newPostion;\r\n      if (capture) {\r\n        capturedPiece.push(board[newRow][newCol]);\r\n        dispatch({ type: \"setCapturedPiece\", value: [...capturedPiece] });\r\n        // setCapturedPiece([...capturedPiece]);\r\n      }\r\n      board[curRow][curCol] = 0;\r\n      board[newRow][newCol] = currentPiece;\r\n    }\r\n  };\r\n\r\n  const handleOpponentMove = ([curRow, curCol], [newRow, newCol]) => {\r\n    if (board[curRow][curCol] && board[curRow][curCol].side === props.side[0]) {\r\n      board[curRow][curCol].animateMove([newRow, newCol], board, dispatch);\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      // setTurnToMove(!turnToMove);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    if (currentPiece) {\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n      const [curRow, curCol] = currentPiece.position;\r\n      const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n      updateBoard(newPosition, [curRow, curCol]);\r\n      dispatch({ type: \"setDraggable\", value: false });\r\n      // setDraggable(false);\r\n      if (!getClicked) {\r\n        dispatch({ type: \"setGetClicked\", value: true });\r\n        // setGetClicked(true);\r\n      } else {\r\n        dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n        dispatch({ type: \"setCurrentPiece\", value: null });\r\n        dispatch({ type: \"setGetClicked\", value: true });\r\n        // setTargetDisplay(\"none\");\r\n        // setCurrentPiece(null);\r\n        // setGetClicked(false);\r\n      }\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      // setBoard([...board]);\r\n\r\n      if (newPosition) {\r\n        dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n        // setTurnToMove(!turnToMove);\r\n        socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n    if (x >= 0 && x < boardSize[0] && y >= 0 && y < boardSize[1] && draggable) {\r\n      currentPiece.move(x, y, board);\r\n      dispatch({ type: \"setBoard\", value: [...board] });\r\n      // setBoard([...board]);\r\n    }\r\n  };\r\n\r\n  const moveOnClick = (currentPiece, x, y) => {\r\n    const [curRow, curCol] = currentPiece.position;\r\n    const newPosition = currentPiece.setNewPosition(x, y, board, turnToMove);\r\n    updateBoard(newPosition, [curRow, curCol]);\r\n    dispatch({ type: \"setTargetDisplay\", value: \"none\" });\r\n    dispatch({ type: \"setCurrentPiece\", value: null });\r\n    dispatch({ type: \"setBoard\", value: [...board] });\r\n    // setTargetDisplay(\"none\");\r\n    // setCurrentPiece(null);\r\n    // setBoard([...board]);\r\n    if (newPosition) {\r\n      dispatch({ type: \"setTurnToMove\", value: !turnToMove });\r\n      // setTurnToMove(!turnToMove);\r\n      socketRef.current.emit(\"opponentMove\", newPosition, [curRow, curCol]);\r\n    }\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (currentPiece) {\r\n      const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n      if (!event.target.id) moveOnClick(currentPiece, x, y);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const width = +window.innerWidth;\r\n    const boardWidth = width * (90 / 100);\r\n    const [x, y] = getSVGLocation(+event.clientX, +event.clientY);\r\n    if (width < 525) {\r\n      dispatch({\r\n        type: \"setBoardSize\",\r\n        value: [boardWidth, boardWidth / (521 / 577)],\r\n      });\r\n      dispatch({\r\n        type: \"setBoard\",\r\n        value: initializeBoard(boardWidth / 9, props.side),\r\n      });\r\n      // setBoardSize([boardWidth, boardWidth / (521 / 577)]);\r\n      // setBoard(initializeBoard(boardWidth / 9, props.side));\r\n    } else {\r\n      dispatch({\r\n        type: \"setBoardSize\",\r\n        value: [520, 520 / (521 / 577)],\r\n      });\r\n      dispatch({\r\n        type: \"setBoard\",\r\n        value: initializeBoard(520 / 9, props.side),\r\n      });\r\n      // setBoardSize([520, 520 / (521 / 577)]);\r\n      // setBoard(initializeBoard(520 / 9, props.side));\r\n    }\r\n    window.ondragstart = () => false;\r\n    socketRef.current = io(\"http://localhost:8080/play\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.onmousemove = handleMouseMove;\r\n    window.onmouseup = handleMouseUp;\r\n    socketRef.current.on(\"foundMatch\", (opponentId, firstMove) => {\r\n      dispatch({ type: \"setTurnToMove\", value: firstMove });\r\n      socketRef.current.opponentId = opponentId;\r\n      dispatch({ type: \"findMatch\", value: `foundMatch ${opponentId}` });\r\n      // setFindMatch(`foundMatch ${opponentId}`);\r\n    });\r\n\r\n    socketRef.current.on(\"timeout\", () => {\r\n      dispatch({ type: \"findMatch\", value: \"no players online\" });\r\n      // setFindMatch(`no players online`);\r\n    });\r\n\r\n    socketRef.current.once(\"move\", ([curRow, curCol], [newRow, newCol]) => {\r\n      handleOpponentMove([curRow, curCol], [newRow, newCol]);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.removeAllListeners();\r\n    };\r\n  });\r\n\r\n  const startPlay = () => {\r\n    dispatch({ type: \"findMatch\", value: \"findMatch\" });\r\n    socketRef.current.emit(\"findMatch\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <svg\r\n        width={boardSize[0]}\r\n        height={boardSize[1]}\r\n        onClick={handleClick}\r\n        style={{\r\n          backgroundImage: \"url(/images/Board/board.jpg)\",\r\n        }}\r\n      >\r\n        <image\r\n          href=\"/images/Target_Icon/target.gif\"\r\n          width={boardSize[0] / 9}\r\n          height={boardSize[0] / 9}\r\n          style={{ display: targetDisplay }}\r\n          transform={targetTranslate}\r\n        ></image>\r\n        <Piece board={board} handleMouseDown={handleMouseDown} />\r\n      </svg>\r\n      <span>{findMatch}</span>\r\n      <button onClick={startPlay}>play</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}